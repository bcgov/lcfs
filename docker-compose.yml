services:
  db:
    container_name: db
    restart: "no"
    image: postgres:14.2
    environment:
      POSTGRES_DB: lcfs
      POSTGRES_USER: lcfs
      POSTGRES_PASSWORD: development_only
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - shared_network

  redis:
    container_name: redis
    restart: "no"
    image: bitnami/redis:7.4.2
    environment:
      REDIS_PASSWORD: development_only
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/bitnami/redis/data
    networks:
      - shared_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: lcfs
      RABBITMQ_DEFAULT_PASS: development_only
      RABBITMQ_DEFAULT_VHOST: lcfs
    volumes:
      - ./docker/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    ports:
      - "15672:15672" # Management UI
      - "5672:5672"   # RabbitMQ Port
    networks:
      - shared_network

  #  clamav:
  #    image: clamav/clamav:stable_base
  #    volumes:
  #      - clamsocket:/var/run/clamav/
  #      - clamav:/var/lib/clamav
  #    ports:
  #      - "3310:3310"
  #    networks:
  #    - shared_network

  minio:
    image: minio/minio:latest
    restart: "no"
    command: "server --console-address :9001 --address :9000 /data"
    environment:
      - MINIO_ROOT_USER=s3_access_key
      - MINIO_ROOT_PASSWORD=development_only
      - MINIO_SERVER_URL=http://localhost:9000
    volumes:
      - s3:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - shared_network

  create_bucket:
    image: minio/mc
    restart: "no"
    container_name: minio_init
    entrypoint: >
      /bin/sh -c "
      until mc alias set myminio http://minio:9000 s3_access_key development_only; do
        echo 'Waiting for MinIO...';
        sleep 5;
      done;
      mc mb myminio/lcfs
      "
    networks:
      - shared_network
    depends_on:
      - minio

  backend:
    container_name: backend
    restart: "no"
    build:
      context: ./backend
      dockerfile: 'Dockerfile'
      target: dev
    volumes:
      - type: bind
        source: ./backend
        target: /app
        consistency: cached
    environment:
      LCFS_DB_HOST: db
      LCFS_DB_PORT: 5432
      LCFS_DB_USER: lcfs
      LCFS_DB_PASS: development_only
      LCFS_DB_BASE: lcfs
      LCFS_REDIS_HOST: redis
      LCFS_REDIS_PORT: 6379
      LCFS_REDIS_PASSWORD: development_only
      LCFS_RELOAD: true
      LCFS_CHES_CLIENT_ID: ${LCFS_CHES_CLIENT_ID}
      LCFS_CHES_CLIENT_SECRET: ${LCFS_CHES_CLIENT_SECRET}
      LCFS_CHES_AUTH_URL: ${LCFS_CHES_AUTH_URL}
      LCFS_CHES_SENDER_EMAIL: ${LCFS_CHES_SENDER_EMAIL}
      LCFS_CHES_SENDER_NAME: ${LCFS_CHES_SENDER_NAME}
      LCFS_CHES_EMAIL_URL: ${LCFS_CHES_EMAIL_URL}
      APP_ENVIRONMENT: dev
    ports:
      - '8000:8000' # Application port
      - '5678:5678' # Debugger port
    depends_on:
      - db
      - redis
      - create_bucket
      - rabbitmq
      # - clamav
    networks:
      - shared_network

  frontend:
    container_name: frontend
    restart: "no"
    build:
      dockerfile: Dockerfile.dev
      context: ./frontend
    command: npm run dev --force
    ports:
      - "3000:3000"
    volumes:
      - type: bind
        source: ./frontend
        target: /app
      - type: volume
        source: node_modules
        target: /app/node_modules
    networks:
      - shared_network

volumes:
  postgres_data:
    name: lcfs_postgres_data
  redis_data:
    name: lcfs_redis_data
  node_modules:
    name: lcfs_node_data
  s3:
    name: lcfs_s3_data
  clamav:
    name: clamav
  clamsocket:
    name: clamsocket

networks:
  shared_network:
    name: shared_network
    external: true