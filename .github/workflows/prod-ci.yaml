name: LCFS 1.0.0 Prod CI

on:
  workflow_dispatch:

env:
  GIT_URL: https://github.com/bcgov/lcfs.git
  TEST_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE_PLATE }}-test
  PROD_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE_PLATE }}-prod

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  install-oc:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4.1.1

      - name: Set up cache for OpenShift CLI
        id: cache
        uses: actions/cache@v4.2.0
        with:
          path: /usr/local/bin/oc # Path where the `oc` binary will be installed
          key: oc-cli-${{ runner.os }}

      - name: Install OpenShift CLI (if not cached)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-linux.tar.gz
          tar -xvf openshift-client-linux.tar.gz
          sudo mv oc /usr/local/bin/
          oc version --client

      - name: Confirm OpenShift CLI is Available
        run: oc version --client

  # Read the image tag from test environment
  get-image-tag:
    name: Get the image-tag from values-test.yaml
    runs-on: ubuntu-latest
    needs: [install-oc]

    outputs:
      IMAGE_TAG: ${{ steps.get-image-tag.outputs.IMAGE_TAG }}

    steps:
      - name: Checkout Manifest repository
        uses: actions/checkout@v3
        with:
          repository: bcgov-c/tenant-gitops-d2bd59
          ref: main
          ssh-key: ${{ secrets.MANIFEST_REPO_DEPLOY_KEY }}

      # to do: verify the frontend image tag is same as the backend image tag
      - name: Get the image tag from values-test.yaml
        id: get-image-tag
        uses: mikefarah/yq@v4.40.5
        with:
          cmd: |
            imagetag=$(yq eval '.image.tag' lcfs/charts/lcfs-frontend/values-test.yaml)
            echo "IMAGE_TAG retrieved from Test is $imagetag"
            echo "IMAGE_TAG=$imagetag" >> $GITHUB_OUTPUT

  get-current-time:
    name: Get Current Time
    runs-on: ubuntu-latest
    needs: get-image-tag

    outputs:
      CURRENT_TIME: ${{ steps.get-current-time.outputs.CURRENT_TIME }}

    steps:
      - id: get-current-time
        run: |
          TZ="America/Vancouver"
          echo "CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_OUTPUT

  # Deplog the image which is running on test to prod
  deploy-on-prod:
    name: Deploy LCFS on Prod
    runs-on: ubuntu-latest
    needs: [get-image-tag, get-current-time]
    timeout-minutes: 60

    env:
      IMAGE_TAG: ${{ needs.get-image-tag.outputs.IMAGE_TAG }}
      CURRENT_TIME: ${{ needs.get-current-time.outputs.CURRENT_TIME }}

    steps:
      - name: Checkout Manifest repository
        uses: actions/checkout@v3
        with:
          repository: bcgov-c/tenant-gitops-d2bd59
          ref: main
          ssh-key: ${{ secrets.MANIFEST_REPO_DEPLOY_KEY }}

      - name: Ask for approval for LCFS ${{env.IMAGE_TAG }} Prod deployment
        uses: trstringer/manual-approval@v1.6.0
        with:
          secret: ${{ github.TOKEN }}
          approvers: AlexZorkin,kuanfandevops,hamed-valiollahi,airinggov,areyeslo,dhaselhan,Grulin
          minimum-approvals: 2
          issue-title: "LCFS ${{env.IMAGE_TAG }} Prod Deployment at ${{ env.CURRENT_TIME }}."

      - name: Restore oc command from Cache
        uses: actions/cache@v4.2.0
        with:
          path: /usr/local/bin/oc
          key: oc-cli-${{ runner.os }}

      - name: Log in to Openshift
        uses: redhat-actions/oc-login@v1.3
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.PROD_NAMESPACE }}

      - name: Tag LCFS images from Test to Prod
        run: |
          oc tag ${{ env.TEST_NAMESPACE }}/lcfs-backend:${{env.IMAGE_TAG }} ${{ env.PROD_NAMESPACE }}/lcfs-backend:${{env.IMAGE_TAG }}
          oc tag ${{ env.TEST_NAMESPACE }}/lcfs-frontend:${{env.IMAGE_TAG }} ${{ env.PROD_NAMESPACE }}/lcfs-frontend:${{env.IMAGE_TAG }}

      - name: Update frontend tag for prod deployment
        uses: mikefarah/yq@v4.40.5
        with:
          cmd: |
            yq -i '.image.tag = "${{env.IMAGE_TAG }}"' lcfs/charts/lcfs-frontend/values-prod.yaml
            yq -i '.image.tag = "${{env.IMAGE_TAG }}"' lcfs/charts/lcfs-backend/values-prod.yaml

      - name: GitHub Commit & Push
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add lcfs/charts/lcfs-frontend/values-prod.yaml
          git add lcfs/charts/lcfs-backend/values-prod.yaml
          git commit -m "Update image tag ${{env.IMAGE_TAG }} for prod"
          git push

  create-release:
    name: Create release after prod deployment
    runs-on: ubuntu-latest
    needs: [get-image-tag, deploy-on-prod]
    env:
      IMAGE_TAG: ${{ needs.get-image-tag.outputs.IMAGE_TAG }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4.1.1

      - name: Fetch tags
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch --tags
          git tag -l

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by GitHub
        with:
          tag_name: ${{env.IMAGE_TAG }} # The pushed tag
          release_name: "v${{ env.IMAGE_TAG }}" # Release title
          body: "This is an automated release ðŸš€" # Release notes
          draft: false # Set to true if you want a draft release
          prerelease: false
