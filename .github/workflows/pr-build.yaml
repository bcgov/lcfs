name: Label Triggered Build

on:
  pull_request:
    types: [labeled, synchronize]

env:
  VERSION: 0.2.0
  GIT_URL: https://github.com/bcgov/lcfs.git 
  TOOLS_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE_PLATE }}-tools
  DEV_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE_PLATE }}-dev
  PR_NUMBER: ${{ github.event.pull_request.number }}
  GIT_REF: ${{ github.event.pull_request.head.ref }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true  

jobs:

  # build:
  #   if: contains(github.event.pull_request.labels.*.name, 'build')
  #   name: Build LCFS
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60

  #   steps:

  #     - name: Check out repository
  #       uses: actions/checkout@v4.1.1
  #       with: 
  #         ref: ${{ github.event.pull_request.head.ref }} 

  #     - name: verify ref
  #       run: |
  #         pwd
  #         ls -la
  #         cat .github/workflows/pr-build.yaml
  #         echo ${{ env.PR_NUMBER }}
  #         echo ${{ env.GIT_URL }}
  #         echo ${{ env.GIT_REF }}

  #     - name: Log in to Openshift
  #       uses: redhat-actions/oc-login@v1.3
  #       with:
  #         openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
  #         openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
  #         insecure_skip_tls_verify: true
  #         namespace: ${{ env.TOOLS_NAMESPACE }}

  #     - name: Build LCFS Backend
  #       run: |
  #         cd openshift/templates
  #         oc process -f ./backend-bc.yaml VERSION=${{ env.VERSION }}-${{ env.PR_NUMBER }} GIT_URL=${{ env.GIT_URL }} GIT_REF=${{ github.event.pull_request.head.ref }} | oc apply --wait=true -f - -n ${{ env.TOOLS_NAMESPACE }}
  #         sleep 2s
  #         for build in $(oc -n ${{ env.TOOLS_NAMESPACE }} get builds -l buildconfig=lcfs-backend-${{ env.VERSION }}-${{ env.PR_NUMBER }} -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}'); do
  #           oc -n ${{ env.TOOLS_NAMESPACE }} cancel-build $build --wait=true
  #         done
  #         sleep 2s
  #         oc -n ${{ env.TOOLS_NAMESPACE }} start-build lcfs-backend-${{ env.VERSION }}-${{ env.PR_NUMBER }} --wait=true
  #         sleep 2s
  #         oc tag ${{ env.TOOLS_NAMESPACE }}/lcfs-backend:${{ env.VERSION }}-${{ env.PR_NUMBER }} ${{ env.DEV_NAMESPACE }}/lcfs-backend:${{ env.VERSION }}-${{ env.PR_NUMBER }}

  #     - name: Build LCFS Frontend
  #       run: |
  #         cd openshift/templates
  #         oc process -f ./frontend-bc.yaml VERSION=${{ env.VERSION }}-${{ env.PR_NUMBER }} GIT_URL=${{ env.GIT_URL }} GIT_REF=${{ github.event.pull_request.head.ref }} | oc apply --wait=true -f - -n ${{ env.TOOLS_NAMESPACE }}
  #         sleep 2s
  #         for build in $(oc -n ${{ env.TOOLS_NAMESPACE }} get builds -l buildconfig=lcfs-frontend-${{ env.VERSION }}-${{ env.PR_NUMBER }} -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}'); do
  #           oc -n ${{ env.TOOLS_NAMESPACE }} cancel-build $build --wait=true
  #         done
  #         sleep 2s
  #         oc -n ${{ env.TOOLS_NAMESPACE }} start-build lcfs-frontend-${{ env.VERSION }}-${{ env.PR_NUMBER }} --wait=true
  #         sleep 2s
  #         oc tag ${{ env.TOOLS_NAMESPACE }}/lcfs-frontend:${{ env.VERSION }}-${{ env.PR_NUMBER }} ${{ env.DEV_NAMESPACE }}/lcfs-frontend:${{ env.VERSION }}-${{ env.PR_NUMBER }}
          
  deploy:
    if: contains(github.event.pull_request.labels.*.name, 'build')
    name: Deploy LCFS
    runs-on: ubuntu-latest
    timeout-minutes: 60
    # needs: [build]

    steps:
      
      - name: Checkout Manifest repository
        uses: actions/checkout@v4.1.1
        with:
          repository: bcgov-c/tenant-gitops-d2bd59
          ref: main
          ssh-key: ${{ secrets.MANIFEST_REPO_DEPLOY_KEY }}

      - name: Log in to Openshift
        uses: redhat-actions/oc-login@v1.3
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.TOOLS_NAMESPACE }}
      
      - name: Update values-dev-pr.yaml for frentend and backend
        uses: mikefarah/yq@v4.40.5
        with:
            cmd: |
                yq -i '.image.tag = "${{ env.VERSION }}-${{ env.PR_NUMBER }}"' lcfs/charts/lcfs-frontend/values-dev-pr.yaml
                yq -i '.route.host = "lcfs-dev-${{ env.PR_NUMBER }}.apps.silver.devops.gov.bc.ca"' lcfs/charts/lcfs-frontend/values-dev-pr.yaml
                yq -i '.volumes[0].configMap.name = "lcfs-frontend-dev-${{ env.PR_NUMBER }}"' lcfs/charts/lcfs-frontend/values-dev-pr.yaml
                yq -i '.apiBase = "https://lcfs-backend-dev-${{ env.PR_NUMBER }}.apps.silver.devops.gov.bc.ca/api"' lcfs/charts/lcfs-frontend/values-dev-pr.yaml
                yq -i '.keycloak.postLogoutUrl = "https://lcfs-dev-${{ env.PR_NUMBER }}.apps.silver.devops.gov.bc.ca/"' lcfs/charts/lcfs-frontend/values-dev-pr.yaml
                yq -i '.image.tag = "${{ env.VERSION }}-${{ env.PR_NUMBER }}"' lcfs/charts/lcfs-backend/values-dev-pr.yaml
                yq -i '.route.host = "lcfs-backend-dev-${{ env.PR_NUMBER }}.apps.silver.devops.gov.bc.ca"' lcfs/charts/lcfs-backend/values-dev-pr.yaml
                yq -i eval '(.env[] | select(.name == "LCFS_DB_HOST") | .value) = "lcfs-postgresql-dev-${{ env.PR_NUMBER }}.${{ env.DEV_NAMESPACE }}.svc.cluster.local"' lcfs/charts/lcfs-backend/values-dev-pr.yaml
                yq -i eval '(.env[] | select(.name == "LCFS_REDIS_HOST") | .value) = "lcfs-redis-dev-${{ env.PR_NUMBER }}.${{ env.DEV_NAMESPACE }}.svc.cluster.local"' lcfs/charts/lcfs-backend/values-dev-pr.yaml

      # There is no need to push the changes back to deployment repo as argocd is not used for the pr build deployment
      # - name: GitHub Commit & Push
      #   run: |
      #     git config --global user.email "actions@github.com"
      #     git config --global user.name "GitHub Actions"
      #     git add lcfs/charts/lcfs-frontend/values-dev-pr.yaml
      #     git add lcfs/charts/lcfs-backend/values-dev-pr.yaml
      #     git commit -m "Pull request build for ${{ env.VERSION }}-${{ env.PR_NUMBER }}"
      #     git push
      
      - name: Helm Deployment 
        shell: bash {0}
        run: |
          cd lcfs/charts/lcfs-postgres-pr
          helm -n ${{ env.DEV_NAMESPACE }} -f ./values-dev-pr.yaml upgrade --install lcfs-postgres-dev-${{ env.PR_NUMBER }} .
          cd ../lcfs-redis-pr
          helm -n ${{ env.DEV_NAMESPACE }} -f ./values-dev-pr.yaml upgrade --install lcfs-redis-dev-${{ env.PR_NUMBER }} .
          cd ../lcfs-frontend-pr
          helm -n ${{ env.DEV_NAMESPACE }} -f ./values-dev-pr.yaml upgrade --install lcfs-frontend-dev-${{ env.PR_NUMBER }} .
          cd ../lcfs-backend-pr
          helm -n ${{ env.DEV_NAMESPACE }} -f ./values-dev-pr.yaml upgrade --install lcfs-backend-dev-${{ env.PR_NUMBER }} .
