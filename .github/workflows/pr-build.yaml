name: PR Build on Dev

on:
  pull_request:
    types: [labeled, synchronize]
    paths:
      - frontend/**
      - backend/**

env:
  GIT_URL: https://github.com/bcgov/lcfs.git 
  TOOLS_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE_PLATE }}-tools
  DEV_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE_PLATE }}-dev
  PR_NUMBER: ${{ github.event.pull_request.number }}
  GIT_REF: ${{ github.event.pull_request.head.ref }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true  

jobs:

  get-version:
    if: contains(github.event.pull_request.labels.*.name, 'build') && github.event.pull_request.base.ref == "${{ github.event.repository.default_branch }}"
    name: Retrieve version
    runs-on: ubuntu-latest
  
    outputs:
      output1: ${{ steps.get-version.outputs.VERSION }}
    
    steps:
      - id: get-version
        run: |
          echo "11111"
          echo "${{ toJSON(github.event.pull_request.labels) }}" | jq -r '.[].name'
          echo "22222"
          echo ${{github.event.pull_request.base.ref}}
          echo "33333"
          echo ${{github.event.repository.default_branch}}
          echo "44444"
          version=$(echo "${{ github.event.repository.default_branch }}" | sed -E 's/release-(.*)/\1/')
          echo "VERSION=$version" >> $GITHUB_OUTPUT

  # build:
  #   if: contains(github.event.pull_request.labels.*.name, 'build')  && github.event.pull_request.base.ref == "${{ github.event.repository.default_branch }}"
  #   name: Build LCFS
  #   runs-on: ubuntu-latest
  #   needs: [get-version]
  #   timeout-minutes: 60

  #   env:
  #     VERSION: ${{ needs.get-version.outputs.output1 }}

  #   steps:

  #     - name: Check out repository
  #       uses: actions/checkout@v4.1.1
  #       with: 
  #         ref: ${{ github.event.pull_request.head.ref }} 

  #     - name: verify ref
  #       run: |
  #         pwd
  #         ls -la
  #         cat .github/workflows/pr-build.yaml
  #         echo ${{ env.PR_NUMBER }}
  #         echo ${{ env.GIT_URL }}
  #         echo ${{ env.GIT_REF }}
  #         echo ${{ env.VERSION }}

  #     - name: Log in to Openshift
  #       uses: redhat-actions/oc-login@v1.3
  #       with:
  #         openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
  #         openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
  #         insecure_skip_tls_verify: true
  #         namespace: ${{ env.TOOLS_NAMESPACE }}

  #     - name: Build LCFS Backend
  #       run: |
  #         cd openshift/templates
  #         oc process -f ./backend-bc.yaml VERSION=${{ env.VERSION }}-${{ env.PR_NUMBER }} GIT_URL=${{ env.GIT_URL }} GIT_REF=${{ github.event.pull_request.head.ref }} | oc apply --wait=true -f - -n ${{ env.TOOLS_NAMESPACE }}
  #         sleep 2s
  #         for build in $(oc -n ${{ env.TOOLS_NAMESPACE }} get builds -l buildconfig=lcfs-backend-${{ env.VERSION }}-${{ env.PR_NUMBER }} -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}'); do
  #           oc -n ${{ env.TOOLS_NAMESPACE }} cancel-build $build --wait=true
  #         done
  #         sleep 2s
  #         oc -n ${{ env.TOOLS_NAMESPACE }} start-build lcfs-backend-${{ env.VERSION }}-${{ env.PR_NUMBER }} --wait=true
  #         sleep 2s
  #         oc tag ${{ env.TOOLS_NAMESPACE }}/lcfs-backend:${{ env.VERSION }}-${{ env.PR_NUMBER }} ${{ env.DEV_NAMESPACE }}/lcfs-backend:${{ env.VERSION }}-${{ env.PR_NUMBER }}

  #     - name: Build LCFS Frontend
  #       run: |
  #         cd openshift/templates
  #         oc process -f ./frontend-bc.yaml VERSION=${{ env.VERSION }}-${{ env.PR_NUMBER }} GIT_URL=${{ env.GIT_URL }} GIT_REF=${{ github.event.pull_request.head.ref }} | oc apply --wait=true -f - -n ${{ env.TOOLS_NAMESPACE }}
  #         sleep 2s
  #         for build in $(oc -n ${{ env.TOOLS_NAMESPACE }} get builds -l buildconfig=lcfs-frontend-${{ env.VERSION }}-${{ env.PR_NUMBER }} -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}'); do
  #           oc -n ${{ env.TOOLS_NAMESPACE }} cancel-build $build --wait=true
  #         done
  #         sleep 2s
  #         oc -n ${{ env.TOOLS_NAMESPACE }} start-build lcfs-frontend-${{ env.VERSION }}-${{ env.PR_NUMBER }} --wait=true
  #         sleep 2s
  #         oc tag ${{ env.TOOLS_NAMESPACE }}/lcfs-frontend:${{ env.VERSION }}-${{ env.PR_NUMBER }} ${{ env.DEV_NAMESPACE }}/lcfs-frontend:${{ env.VERSION }}-${{ env.PR_NUMBER }}
          
  # deploy:
  #   if: contains(github.event.pull_request.labels.*.name, 'build')  && github.event.pull_request.base.ref == "${{ github.event.repository.default_branch }}"
  #   name: Deploy LCFS
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
  #   needs: [get-version, build]

  #   env:
  #     VERSION: ${{ needs.get-version.outputs.output1 }}

  #   steps:
      
  #     - name: Checkout Manifest repository
  #       uses: actions/checkout@v4.1.1
  #       with:
  #         repository: bcgov-c/tenant-gitops-d2bd59
  #         ref: main
  #         ssh-key: ${{ secrets.MANIFEST_REPO_DEPLOY_KEY }}

  #     - name: Log in to Openshift
  #       uses: redhat-actions/oc-login@v1.3
  #       with:
  #         openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
  #         openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
  #         insecure_skip_tls_verify: true
  #         namespace: ${{ env.TOOLS_NAMESPACE }}
      
  #     - name: Update values-dev-pr.yaml for frentend and backend
  #       uses: mikefarah/yq@v4.40.5
  #       with:
  #           cmd: |
  #               yq -i '.image.tag = "${{ env.VERSION }}-${{ env.PR_NUMBER }}"' lcfs/charts/lcfs-frontend/values-dev-pr.yaml
  #               yq -i '.route.host = "lcfs-dev-${{ env.PR_NUMBER }}.apps.silver.devops.gov.bc.ca"' lcfs/charts/lcfs-frontend/values-dev-pr.yaml
  #               yq -i '.volumes[0].configMap.name = "lcfs-frontend-dev-${{ env.PR_NUMBER }}"' lcfs/charts/lcfs-frontend/values-dev-pr.yaml
  #               yq -i '.apiBase = "https://lcfs-backend-dev-${{ env.PR_NUMBER }}.apps.silver.devops.gov.bc.ca/api"' lcfs/charts/lcfs-frontend/values-dev-pr.yaml
  #               yq -i '.keycloak.postLogoutUrl = "https://lcfs-dev-${{ env.PR_NUMBER }}.apps.silver.devops.gov.bc.ca/"' lcfs/charts/lcfs-frontend/values-dev-pr.yaml
  #               yq -i '.image.tag = "${{ env.VERSION }}-${{ env.PR_NUMBER }}"' lcfs/charts/lcfs-backend/values-dev-pr.yaml
  #               yq -i '.route.host = "lcfs-backend-dev-${{ env.PR_NUMBER }}.apps.silver.devops.gov.bc.ca"' lcfs/charts/lcfs-backend/values-dev-pr.yaml
  #               yq -i eval '(.env[] | select(.name == "LCFS_DB_HOST") | .value) = "lcfs-postgres-dev-${{ env.PR_NUMBER }}-postgresql.${{ env.DEV_NAMESPACE }}.svc.cluster.local"' lcfs/charts/lcfs-backend/values-dev-pr.yaml
  #               yq -i eval '(.env[] | select(.name == "LCFS_REDIS_HOST") | .value) = "lcfs-redis-dev-${{ env.PR_NUMBER }}-master.${{ env.DEV_NAMESPACE }}.svc.cluster.local"' lcfs/charts/lcfs-backend/values-dev-pr.yaml
      
  #     - name: Helm Deployment 
  #       shell: bash {0}
  #       run: |
  #         cd lcfs/charts/lcfs-postgres-pr
  #         helm -n ${{ env.DEV_NAMESPACE }} -f ./values-dev-pr.yaml upgrade --install lcfs-postgres-dev-${{ env.PR_NUMBER }} oci://registry-1.docker.io/bitnamicharts/postgresql --version 15.5.17
  #         cd ../lcfs-redis-pr
  #         helm -n ${{ env.DEV_NAMESPACE }} -f ./values-dev-pr.yaml upgrade --install lcfs-redis-dev-${{ env.PR_NUMBER }} oci://registry-1.docker.io/bitnamicharts/redis --version 19.6.1
  #         cd ../lcfs-frontend
  #         helm -n ${{ env.DEV_NAMESPACE }} -f ./values-dev-pr.yaml upgrade --install lcfs-frontend-dev-${{ env.PR_NUMBER }} .
  #         sleep 60s
  #         cd ../lcfs-backend
  #         helm -n ${{ env.DEV_NAMESPACE }} -f ./values-dev-pr.yaml upgrade --install lcfs-backend-dev-${{ env.PR_NUMBER }} .
