name: PR Teardown on Dev

on:
  pull_request:
    types: [unlabeled, closed]

env:
  DEV_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE_PLATE }}-dev
  PR_NUMBER: ${{ github.event.pull_request.number }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true  

jobs:
  install-oc:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4.1.1

      - name: Set up cache for OpenShift CLI
        id: cache
        uses: actions/cache@v4.2.0
        with:
          path: /usr/local/bin/oc  # Path where the `oc` binary will be installed
          key: oc-cli-${{ runner.os }}

      - name: Install OpenShift CLI (if not cached)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-linux.tar.gz
          tar -xvf openshift-client-linux.tar.gz
          sudo mv oc /usr/local/bin/
          oc version --client

      - name: Confirm OpenShift CLI is Available
        run: oc version --client

  teardown:
    if: >
      (github.event.action == 'unlabeled' && github.event.label.name == 'build') || 
      (github.event.action == 'closed' && contains(github.event.pull_request.labels.*.name, 'build') )
    name: PR Teardown
    runs-on: ubuntu-latest
    needs: [install-oc]
    timeout-minutes: 60

    steps:
      
      - name: Restore oc command from Cache
        uses: actions/cache@v4.2.0
        with:
          path: /usr/local/bin/oc
          key: oc-cli-${{ runner.os }}

      - name: Log in to Openshift
        uses: redhat-actions/oc-login@v1.3
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.DEV_NAMESPACE }}

      - name: Teardown the pull request
        run: |
          helm -n ${{ env.DEV_NAMESPACE }} uninstall lcfs-frontend-dev-${{ env.PR_NUMBER }}
          helm -n ${{ env.DEV_NAMESPACE }} uninstall lcfs-backend-dev-${{ env.PR_NUMBER }}
          helm -n ${{ env.DEV_NAMESPACE }} uninstall lcfs-redis-dev-${{ env.PR_NUMBER }}
          helm -n ${{ env.DEV_NAMESPACE }} uninstall lcfs-postgres-dev-${{ env.PR_NUMBER }}
          helm -n ${{ env.DEV_NAMESPACE }} uninstall lcfs-minio-dev-${{ env.PR_NUMBER }}
          oc -n ${{ env.DEV_NAMESPACE }} delete pvc -l app.kubernetes.io/instance=lcfs-postgres-dev-${{ env.PR_NUMBER }}
          oc -n ${{ env.DEV_NAMESPACE }} delete pvc -l app.kubernetes.io/instance=lcfs-redis-dev-${{ env.PR_NUMBER }}
