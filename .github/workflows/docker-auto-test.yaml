name: Testing pipeline

on:
  pull_request:
    branches:
      - '*'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.13'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install Poetry
      run: pip install poetry==1.6.1

    - name: Install backend dependencies
      run: |
        cd backend
        poetry config virtualenvs.create false
        poetry install

    - name: Fix docker-compose.yml
      run: |
        sed -i 's/: true/: "true"/g; s/: false/: "false"/g' docker-compose.yml

    - name: Build and start services
      run: |
        docker-compose build
        docker-compose up -d

    - name: Run backend tests
      id: backend_tests
      continue-on-error: true
      run: |
        cd backend
        poetry run pytest
      env:
        LCFS_DB_HOST: localhost
        LCFS_DB_PORT: 5432
        LCFS_DB_USER: lcfs
        LCFS_DB_PASS: development_only
        LCFS_DB_BASE: lcfs
        LCFS_REDIS_HOST: localhost
        LCFS_REDIS_PORT: 6379
        LCFS_REDIS_PASSWORD: development_only
        APP_ENVIRONMENT: test

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      id: frontend_tests
      continue-on-error: true
      run: |
        cd frontend
        npm test

    - name: Run Cypress tests
      id: cypress_tests
      continue-on-error: true
      uses: cypress-io/github-action@v5
      with:
        command: npm run cypress:run
        wait-on: 'http://localhost:3000, http://localhost:8000'
        working-directory: frontend
      env:
        admin_idir_username: ${{ secrets.ADMIN_IDIR_USERNAME }}
        admin_idir_password: ${{ secrets.ADMIN_IDIR_PASSWORD }}
        org1_bceid_username: ${{ secrets.ORG1_BCEID_USERNAME }}
        org1_bceid_password: ${{ secrets.ORG1_BCEID_PASSWORD }}
        org1_bceid_id: ${{ secrets.ORG1_BCEID_ID }}
        org1_bceid_userId: ${{ secrets.ORG1_BCEID_USERID }}
        org2_bceid_username: ${{ secrets.ORG2_BCEID_USERNAME }}
        org2_bceid_password: ${{ secrets.ORG2_BCEID_PASSWORD }}
        org2_bceid_id: ${{ secrets.ORG2_BCEID_ID }}
        org2_bceid_userId: ${{ secrets.ORG2_BCEID_USERID }}

    - name: Stop services
      if: always()
      run: docker-compose down

    - name: Check test results
      if: always()
      run: |
        if [ "${{ steps.backend_tests.outcome }}" == "failure" ] || \
           [ "${{ steps.frontend_tests.outcome }}" == "failure" ] || \
           [ "${{ steps.cypress_tests.outcome }}" == "failure" ]; then
          echo "One or more tests failed"
          exit 1
        else
          echo "All tests passed"
        fi