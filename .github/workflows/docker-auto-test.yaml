name: Testing pipeline

on:
  pull_request:
    branches:
      - '*'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.13'

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: pip install poetry==1.6.1

      - name: Install backend dependencies
        run: |
          pip install --upgrade pip setuptools wheel
          cd backend
          poetry config virtualenvs.create false
          poetry install
          pip install pytest-github-actions-annotate-failures typing_extensions

      - name: Fix docker-compose.yml
        run: |
          sed -i 's/: true/: "true"/g; s/: false/: "false"/g' docker-compose.yml

      - name: Build and start services
        run: |
          docker-compose build
          docker-compose up -d

      - name: Run backend tests
        id: backend_tests
        run: |
          cd backend
          poetry run pytest --junitxml=pytest-results.xml
        env:
          LCFS_DB_HOST: localhost
          LCFS_DB_PORT: 5432
          LCFS_DB_USER: lcfs
          LCFS_DB_PASS: development_only
          LCFS_DB_BASE: lcfs
          LCFS_REDIS_HOST: localhost
          LCFS_REDIS_PORT: 6379
          LCFS_REDIS_PASSWORD: development_only
          APP_ENVIRONMENT: dev
          LCFS_CHES_CLIENT_ID: mock_client_id
          LCFS_CHES_CLIENT_SECRET: mock_client_secret
          LCFS_CHES_AUTH_URL: http://mock_auth_url
          LCFS_CHES_SENDER_EMAIL: noreply@gov.bc.ca
          LCFS_CHES_SENDER_NAME: Mock Notification System
          LCFS_CHES_EMAIL_URL: http://mock_email_url

      - name: Upload pytest results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: backend/pytest-results.xml

      - name: Stop services
        if: always()
        run: docker-compose down

      - name: Publish Backend Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: backend/pytest-results.xml
          github_token: ${{ secrets.GITHUB_TOKEN }}
          comment_title: 'Backend Test Results'
          check_name: 'Backend Test Results'
          fail_on: 'errors'
          report_individual_runs: 'true'
          deduplicate_classes_by_file_name: 'true'

  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        id: frontend_tests
        run: |
          cd frontend
          npm run test:ci:memory
        env:
          CI: true

      - name: Upload blob report to GitHub Actions Artifacts
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.shardIndex }}
          path: .vitest-reports/*
          include-hidden-files: true
          retention-days: 1

  merge-reports:
    if: ${{ !cancelled() }}
    needs: [frontend-tests]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: .vitest-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge reports
        run: npx vitest --merge-reports

      # - name: Upload Vitest results
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: vitest-results
      #     path: frontend/vitest-results.xml

      # - name: Publish Frontend Test Results
      #   uses: EnricoMi/publish-unit-test-result-action@v2
      #   if: always()
      #   with:
      #     files: frontend/vitest-results.xml
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     comment_title: 'Frontend Test Results'
      #     check_name: 'Frontend Test Results'
      #     fail_on: 'errors'
      #     report_individual_runs: 'true'
      #     deduplicate_classes_by_file_name: 'true'

  teams-notification:
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Determine Test Status
        id: test_status
        run: |
          if [[ "${{ contains(needs.backend-tests.result, 'failure') }}" == "true" || "${{ contains(needs.frontend-tests.result, 'failure') }}" == "true" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "theme_color=FF0000" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "theme_color=00FF00" >> $GITHUB_OUTPUT
          fi

      - name: Send custom Teams notification
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          REPO="${{ github.repository }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
          AVATAR_URL="${{ github.event.pull_request.user.avatar_url }}"
          THREAD_ID="pr-${PR_NUMBER}"
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          MESSAGE="**Test Results**\n- Backend Tests: ${{ needs.backend-tests.result }}\n- Frontend Tests: ${{ needs.frontend-tests.result }}\n\n**Status:** $([[ '${{ steps.test_status.outputs.status }}' == 'failure' ]] && echo '❌ Failed' || echo '✅ Passed')"

          COLOR="${{ steps.test_status.outputs.theme_color }}"

          cat <<EOF > teams_card.json
          {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "$COLOR",
            "summary": "GitHub Notification for PR #$PR_NUMBER",
            "sections": [
              {
                "activityTitle": "$PR_TITLE - PR #$PR_NUMBER",
                "activitySubtitle": "Repository: $REPO, Author: $PR_AUTHOR",
                "activityImage": "$AVATAR_URL",
                "facts": [
                  { "name": "Repository", "value": "$REPO" },
                  { "name": "PR Title", "value": "$PR_TITLE" },
                  { "name": "Branch", "value": "${{ github.head_ref }}" },
                  { "name": "Commit", "value": "$COMMIT_SHA" },
                ],
                "text": "$MESSAGE",
                "markdown": true
              }
            ],
            "replyToId": "$THREAD_ID",
            "potentialAction": [
              {
                "@type": "OpenUri",
                "name": "View Pull Request",
                "targets": [
                  {
                    "os": "default",
                    "uri": "$PR_URL"
                  }
                ]
              },
              {
                "@type": "OpenUri",
                "name": "View Workflow Run",
                "targets": [
                  {
                    "os": "default",
                    "uri": "$WORKFLOW_URL"
                  }
                ]
              }
            ]
          }
          EOF

          curl -H "Content-Type: application/json" -d @teams_card.json "${{ secrets.TEAMS_WEBHOOK_URL }}"
