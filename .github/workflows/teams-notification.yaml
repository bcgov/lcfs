name: Teams Notification

on:
  pull_request:
    types: [opened, closed, reopened, review_requested]
  pull_request_review:
    types: [submitted]
  workflow_run:
    workflows: ["Testing pipeline"]
    types: [completed]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Microsoft Teams Notification
        uses: actions/github-script@v6
        with:
          script: |
            const event = context.eventName;
            const payload = context.payload;
            
            // Prepare variables based on event type
            let message = "";
            let color = "";
            let prNumber = "";
            let prTitle = "";
            
            // Function to extract PR info from workflow run
            async function getPrInfoFromWorkflowRun(run) {
              const octokit = github.rest;
              try {
                // Find the PR associated with this workflow run
                const response = await octokit.repos.listPullRequestsAssociatedWithCommit({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  commit_sha: run.head_sha
                });
                
                if (response.data.length > 0) {
                  const pr = response.data[0];
                  return {
                    number: pr.number,
                    title: pr.title
                  };
                }
                return null;
              } catch (error) {
                console.log(`Error finding PR for workflow: ${error}`);
                return null;
              }
            }
            
            // Set thread identifier based on PR number to group messages
            let threadId = "";
            
            if (event === 'pull_request') {
              const pr = payload.pull_request;
              prNumber = pr.number;
              prTitle = pr.title;
              threadId = `pr-${prNumber}`;
              
              const action = payload.action;
              if (action === 'opened' || action === 'reopened') {
                message = `📣 New PR #${prNumber} opened: **${prTitle}**\nBy: ${pr.user.login}\n[View PR](${pr.html_url})`;
                color = "0076D7"; // blue
              } else if (action === 'closed') {
                if (pr.merged) {
                  message = `✅ PR #${prNumber} merged: **${prTitle}**\nBy: ${pr.user.login}\n[View PR](${pr.html_url})`;
                  color = "2CBE4E"; // green
                } else {
                  message = `❌ PR #${prNumber} closed without merging: **${prTitle}**\nBy: ${pr.user.login}\n[View PR](${pr.html_url})`;
                  color = "D73A49"; // red
                }
              } else if (action === 'review_requested') {
                const reviewers = payload.requested_reviewers.map(reviewer => reviewer.login).join(', ');
                message = `👀 Review requested for PR #${prNumber}: **${prTitle}**\nReviewers: ${reviewers}\n[View PR](${pr.html_url})`;
                color = "FBAB19"; // orange
              }
            } else if (event === 'pull_request_review') {
              const review = payload.review;
              const pr = payload.pull_request;
              prNumber = pr.number;
              prTitle = pr.title;
              threadId = `pr-${prNumber}`;
              
              if (review.state === 'approved') {
                message = `✅ PR #${prNumber} approved by ${review.user.login}: **${prTitle}**\n[View PR](${pr.html_url})`;
                color = "2CBE4E"; // green
              } else if (review.state === 'changes_requested') {
                message = `🔨 Changes requested on PR #${prNumber} by ${review.user.login}: **${prTitle}**\n[View PR](${pr.html_url})`;
                color = "FBAB19"; // orange
              } else if (review.state === 'commented') {
                message = `💬 PR #${prNumber} received comments from ${review.user.login}: **${prTitle}**\n[View PR](${pr.html_url})`;
                color = "0076D7"; // blue
              }
            } else if (event === 'workflow_run') {
              const run = payload.workflow_run;
              
              // Get associated PR information
              const prInfo = await getPrInfoFromWorkflowRun(run);
              if (prInfo) {
                prNumber = prInfo.number;
                prTitle = prInfo.title;
                threadId = `pr-${prNumber}`;
                
                if (run.conclusion === 'success') {
                  message = `✅ All tests passed for PR #${prNumber}: **${prTitle}**\n\n**Backend tests**: Passed ✅\n**Frontend tests**: Passed ✅\n\n[View test details](${run.html_url})`;
                  color = "2CBE4E"; // green
                } else if (run.conclusion === 'failure') {
                  // Try to determine which tests failed
                  let backendStatus = "Unknown";
                  let frontendStatus = "Unknown";
                  
                  // This is a simplification - ideally we would parse the actual job results
                  if (run.name === "Testing pipeline") {
                    // Try to determine which specific tests failed based on job output
                    // Since we can't access job details directly in this context, we make an educated guess
                    message = `❌ Tests failed for PR #${prNumber}: **${prTitle}**\n\nOne or more tests failed in the pipeline.\n\n[View test details](${run.html_url})`;
                  } else {
                    message = `❌ Workflow "${run.name}" failed for PR #${prNumber}: **${prTitle}**\n\n[View test details](${run.html_url})`;
                  }
                  color = "D73A49"; // red
                } else {
                  message = `⚠️ Workflow "${run.name}" for PR #${prNumber}: **${prTitle}** completed with status: ${run.conclusion}\n\n[View test details](${run.html_url})`;
                  color = "FBAB19"; // orange
                }
              } else {
                // Fallback if we can't link to a PR
                message = `Workflow "${run.name}" on branch ${run.head_branch} completed with status: ${run.conclusion}\n[View details](${run.html_url})`;
                color = run.conclusion === 'success' ? "2CBE4E" : (run.conclusion === 'failure' ? "D73A49" : "FBAB19");
                threadId = `workflow-${run.id}`;
              }
            }
            
            // Only proceed if we have a message to send
            if (message) {
              const webhookUrl = process.env.TEAMS_WEBHOOK_URL;
              
              const card = {
                "@type": "MessageCard",
                "@context": "http://schema.org/extensions",
                "themeColor": color,
                "summary": `GitHub Notification for PR #${prNumber}`,
                "sections": [
                  {
                    "activityTitle": `GitHub Notification for PR #${prNumber}`,
                    "activitySubtitle": `Repository: ${context.repo.owner}/${context.repo.repo}`,
                    "text": message
                  }
                ],
                // Add correlation ID to group messages for the same PR
                "correlationId": threadId
              };
              
              // Send notification to Teams
              const https = require('https');
              const url = new URL(webhookUrl);
              
              const options = {
                hostname: url.hostname,
                path: url.pathname + url.search,
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                }
              };
              
              const req = https.request(options, (res) => {
                console.log(`Teams notification status: ${res.statusCode}`);
                
                res.on('data', (chunk) => {
                  console.log(`Response: ${chunk}`);
                });
              });
              
              req.on('error', (error) => {
                console.error(`Error sending Teams notification: ${error}`);
                core.setFailed(`Failed to send Teams notification: ${error.message}`);
              });
              
              req.write(JSON.stringify(card));
              req.end();
            } else {
              console.log('No notification configured for this event type or action');
            }
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}