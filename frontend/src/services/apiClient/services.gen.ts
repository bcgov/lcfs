// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-axios';
import type { GetAdminAdjustmentData, GetAdminAdjustmentError, GetAdminAdjustmentResponse, UpdateAdminAdjustmentData, UpdateAdminAdjustmentError, UpdateAdminAdjustmentResponse, CreateAdminAdjustmentData, CreateAdminAdjustmentError, CreateAdminAdjustmentResponse, GetAllocationAgreementTableOptionsError, GetAllocationAgreementTableOptionsResponse, GetAllocationAgreementsData, GetAllocationAgreementsError, GetAllocationAgreementsResponse, GetAllocationAgreementsPaginatedData, GetAllocationAgreementsPaginatedError, GetAllocationAgreementsPaginatedResponse, SaveAllocationAgreementsRowData, SaveAllocationAgreementsRowError, SaveAllocationAgreementsRowResponse, SearchAllocationAgreementTableOptionsStringsData, SearchAllocationAgreementTableOptionsStringsError, SearchAllocationAgreementTableOptionsStringsResponse, GetAuditLogData, GetAuditLogError, GetAuditLogResponse, GetCompliancePeriodsError, GetCompliancePeriodsResponse, GetComplianceReportsData, GetComplianceReportsError, GetComplianceReportsResponse, GetComplianceReportByIdData, GetComplianceReportByIdError, GetComplianceReportByIdResponse, UpdateComplianceReportData, UpdateComplianceReportError, UpdateComplianceReportResponse, GetComplianceReportSummaryData, GetComplianceReportSummaryError, GetComplianceReportSummaryResponse, UpdateComplianceReportSummaryData, UpdateComplianceReportSummaryError, UpdateComplianceReportSummaryResponse, CreateSupplementalReportData, CreateSupplementalReportError, CreateSupplementalReportResponse, GetDirectorReviewCountsError, GetDirectorReviewCountsResponse, GetTransactionCountsError, GetTransactionCountsResponse, GetOrgTransactionCountsError, GetOrgTransactionCountsResponse, GetOrgComplianceReportCountsError, GetOrgComplianceReportCountsResponse, MetricsError, MetricsResponse, GetAllDocumentsData, GetAllDocumentsError, GetAllDocumentsResponse, UploadFileData, UploadFileError, UploadFileResponse, StreamDocumentData, StreamDocumentError, StreamDocumentResponse, DeleteFileData, DeleteFileError, DeleteFileResponse, SendEchoMessageData, SendEchoMessageError, SendEchoMessageResponse, GetFseOptionsError, GetFseOptionsResponse, GetFinalSupplyEquipmentsData, GetFinalSupplyEquipmentsError, GetFinalSupplyEquipmentsResponse, SaveFinalSupplyEquipmentRowData, SaveFinalSupplyEquipmentRowError, SaveFinalSupplyEquipmentRowResponse, SearchTableOptionsData, SearchTableOptionsError, SearchTableOptionsResponse, GetFuelCodeTableOptionsError, GetFuelCodeTableOptionsResponse, SearchFuelCodeTableOptionsStringsData, SearchFuelCodeTableOptionsStringsError, SearchFuelCodeTableOptionsStringsResponse, GetFuelCodesData, GetFuelCodesError, GetFuelCodesResponse, GetFuelCodeData, GetFuelCodeError, GetFuelCodeResponse, UpdateFuelCodeData, UpdateFuelCodeError, UpdateFuelCodeResponse, DeleteFuelCodeData, DeleteFuelCodeError, DeleteFuelCodeResponse, SaveFuelCodeRowData, SaveFuelCodeRowError, SaveFuelCodeRowResponse, GetFuelExportTableOptionsData, GetFuelExportTableOptionsError, GetFuelExportTableOptionsResponse, GetFuelExportsData, GetFuelExportsError, GetFuelExportsResponse, SaveFuelExportRowData, SaveFuelExportRowError, SaveFuelExportRowResponse, GetFsTableOptionsData, GetFsTableOptionsError, GetFsTableOptionsResponse, GetFuelSupplyData, GetFuelSupplyError, GetFuelSupplyResponse, SaveFuelSupplyRowData, SaveFuelSupplyRowError, SaveFuelSupplyRowResponse, GetFuelTypeOthersError, GetFuelTypeOthersResponse, GetInitiativeAgreementData, GetInitiativeAgreementError, GetInitiativeAgreementResponse, UpdateInitiativeAgreementData, UpdateInitiativeAgreementError, UpdateInitiativeAgreementResponse, CreateInitiativeAgreementData, CreateInitiativeAgreementError, CreateInitiativeAgreementResponse, CreateCommentData, CreateCommentError, CreateCommentResponse, GetCommentsData, GetCommentsError, GetCommentsResponse, UpdateCommentData, UpdateCommentError, UpdateCommentResponse, HealthCheckError, HealthCheckResponse, GetNotificationsChannelSubscriptionsData, GetNotificationsChannelSubscriptionsError, GetNotificationsChannelSubscriptionsResponse, GetNotificationData, GetNotificationError, GetNotificationResponse, UpdateNotificationData, UpdateNotificationError, UpdateNotificationResponse, GetNotificationChannelSubscriptionData, GetNotificationChannelSubscriptionError, GetNotificationChannelSubscriptionResponse, UpdateNotificationChannelSubscriptionData, UpdateNotificationChannelSubscriptionError, UpdateNotificationChannelSubscriptionResponse, DeleteNotificationChannelSubscriptionData, DeleteNotificationChannelSubscriptionError, DeleteNotificationChannelSubscriptionResponse, GetNotionalTransferTableOptionsError, GetNotionalTransferTableOptionsResponse, GetNotionalTransfersData, GetNotionalTransfersError, GetNotionalTransfersResponse, GetNotionalTransfersPaginatedData, GetNotionalTransfersPaginatedError, GetNotionalTransfersPaginatedResponse, GetNotionalTransferData, GetNotionalTransferError, GetNotionalTransferResponse, SaveNotionalTransferRowData, SaveNotionalTransferRowError, SaveNotionalTransferRowResponse, GetOrgUsersData, GetOrgUsersError, GetOrgUsersResponse, GetOrgUserByIdData, GetOrgUserByIdError, GetOrgUserByIdResponse, UpdateOrgUserData, UpdateOrgUserError, UpdateOrgUserResponse, CreateOrgUserData, CreateOrgUserError, CreateOrgUserResponse, GetTransactionsPaginatedForOrgData, GetTransactionsPaginatedForOrgError, GetTransactionsPaginatedForOrgResponse, ExportTransactionsForOrgData, ExportTransactionsForOrgError, ExportTransactionsForOrgResponse, CreateTransferData, CreateTransferError, CreateTransferResponse, UpdateTransferData, UpdateTransferError, UpdateTransferResponse, CreateComplianceReportData, CreateComplianceReportError, CreateComplianceReportResponse, GetOrgComplianceReportsData, GetOrgComplianceReportsError, GetOrgComplianceReportsResponse, GetAllOrgReportedYearsData, GetAllOrgReportedYearsError, GetAllOrgReportedYearsResponse, GetOrgComplianceReportByIdData, GetOrgComplianceReportByIdError, GetOrgComplianceReportByIdResponse, ExportOrganizationsError, ExportOrganizationsResponse, CreateOrganizationData, CreateOrganizationError, CreateOrganizationResponse, SearchOrganizationsData, SearchOrganizationsError, SearchOrganizationsResponse, GetOrganizationData, GetOrganizationError, GetOrganizationResponse, UpdateOrganizationData, UpdateOrganizationError, UpdateOrganizationResponse, GetOrganizationsData, GetOrganizationsError, GetOrganizationsResponse, GetOrganizationStatusesError, GetOrganizationStatusesResponse, GetOrganizationTypesError, GetOrganizationTypesResponse, GetOrganizationNamesError, GetOrganizationNamesResponse, GetExternallyRegisteredOrganizationsError, GetExternallyRegisteredOrganizationsResponse, GetBalancesByOrgIdData, GetBalancesByOrgIdError, GetBalancesByOrgIdResponse, GetBalancesError, GetBalancesResponse, GetOtherUsesTableOptionsError, GetOtherUsesTableOptionsResponse, GetOtherUsesData, GetOtherUsesError, GetOtherUsesResponse, GetOtherUsesPaginatedData, GetOtherUsesPaginatedError, GetOtherUsesPaginatedResponse, SaveOtherUsesRowData, SaveOtherUsesRowError, SaveOtherUsesRowResponse, GetRedisValueData, GetRedisValueError, GetRedisValueResponse, SetRedisValueData, SetRedisValueError, SetRedisValueResponse, GetRolesData, GetRolesError, GetRolesResponse, GetTransactionsPaginatedByOrgData, GetTransactionsPaginatedByOrgError, GetTransactionsPaginatedByOrgResponse, ExportTransactionsByOrgData, ExportTransactionsByOrgError, ExportTransactionsByOrgResponse, GetTransactionsPaginatedData, GetTransactionsPaginatedError, GetTransactionsPaginatedResponse, ExportTransactionsData, ExportTransactionsError, ExportTransactionsResponse, GetTransactionStatusesError, GetTransactionStatusesResponse, GetAllTransfersError, GetAllTransfersResponse, GetTransferData, GetTransferError, GetTransferResponse, GovernmentUpdateTransferData, GovernmentUpdateTransferError, GovernmentUpdateTransferResponse, UpdateCategoryData, UpdateCategoryError, UpdateCategoryResponse, ExportUsersData, ExportUsersError, ExportUsersResponse, GetUsersData, GetUsersError, GetUsersResponse, GetCurrentUserError, GetCurrentUserResponse, GetUserByIdData, GetUserByIdError, GetUserByIdResponse, UpdateUserData, UpdateUserError, UpdateUserResponse, DeleteUserData, DeleteUserError, DeleteUserResponse, CreateUserData, CreateUserError, CreateUserResponse, GetUserRolesData, GetUserRolesError, GetUserRolesResponse, GetUserActivitiesData, GetUserActivitiesError, GetUserActivitiesResponse, GetAllUserActivitiesData, GetAllUserActivitiesError, GetAllUserActivitiesResponse, GetAllUserLoginHistoryData, GetAllUserLoginHistoryError, GetAllUserLoginHistoryResponse } from './types.gen';

export const client = createClient(createConfig());

export class AdminAdjustmentsService {
    /**
     * Get Admin Adjustment
     * Endpoint to fetch an admin adjustment by its ID.
     */
    public static getAdminAdjustment<ThrowOnError extends boolean = false>(options: Options<GetAdminAdjustmentData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAdminAdjustmentResponse, GetAdminAdjustmentError, ThrowOnError>({
            ...options,
            url: '/api/admin-adjustments/{admin_adjustment_id}'
        });
    }
    
    /**
     * Update Admin Adjustment
     * Endpoint to update an existing admin adjustment.
     */
    public static updateAdminAdjustment<ThrowOnError extends boolean = false>(options: Options<UpdateAdminAdjustmentData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateAdminAdjustmentResponse, UpdateAdminAdjustmentError, ThrowOnError>({
            ...options,
            url: '/api/admin-adjustments/'
        });
    }
    
    /**
     * Create Admin Adjustment
     * Endpoint to create a new admin adjustment.
     */
    public static createAdminAdjustment<ThrowOnError extends boolean = false>(options: Options<CreateAdminAdjustmentData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateAdminAdjustmentResponse, CreateAdminAdjustmentError, ThrowOnError>({
            ...options,
            url: '/api/admin-adjustments/'
        });
    }
    
}

export class AllocationAgreementsService {
    /**
     * Get Allocation Agreement Table Options
     * Endpoint to retrieve table options related to allocation agreements
     */
    public static getAllocationAgreementTableOptions<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllocationAgreementTableOptionsResponse, GetAllocationAgreementTableOptionsError, ThrowOnError>({
            ...options,
            url: '/api/allocation-agreement/table-options'
        });
    }
    
    /**
     * Get Allocation Agreements
     * Endpoint to get list of allocation agreements for a compliance report
     */
    public static getAllocationAgreements<ThrowOnError extends boolean = false>(options: Options<GetAllocationAgreementsData, ThrowOnError>) {
        return (options?.client ?? client).post<GetAllocationAgreementsResponse, GetAllocationAgreementsError, ThrowOnError>({
            ...options,
            url: '/api/allocation-agreement/list-all'
        });
    }
    
    /**
     * Get Allocation Agreements Paginated
     */
    public static getAllocationAgreementsPaginated<ThrowOnError extends boolean = false>(options: Options<GetAllocationAgreementsPaginatedData, ThrowOnError>) {
        return (options?.client ?? client).post<GetAllocationAgreementsPaginatedResponse, GetAllocationAgreementsPaginatedError, ThrowOnError>({
            ...options,
            url: '/api/allocation-agreement/list'
        });
    }
    
    /**
     * Save Allocation Agreements Row
     * Endpoint to save a single allocation agreements row
     */
    public static saveAllocationAgreementsRow<ThrowOnError extends boolean = false>(options: Options<SaveAllocationAgreementsRowData, ThrowOnError>) {
        return (options?.client ?? client).post<SaveAllocationAgreementsRowResponse, SaveAllocationAgreementsRowError, ThrowOnError>({
            ...options,
            url: '/api/allocation-agreement/save'
        });
    }
    
    /**
     * Search Allocation Agreement Table Options Strings
     * Endpoint to search allocation agreement options based on a query string
     */
    public static searchAllocationAgreementTableOptionsStrings<ThrowOnError extends boolean = false>(options?: Options<SearchAllocationAgreementTableOptionsStringsData, ThrowOnError>) {
        return (options?.client ?? client).get<SearchAllocationAgreementTableOptionsStringsResponse, SearchAllocationAgreementTableOptionsStringsError, ThrowOnError>({
            ...options,
            url: '/api/allocation-agreement/search'
        });
    }
    
}

export class AuditLogService {
    /**
     * Get Audit Log
     * Get audit logs with optional filters for `table_name` and `operation`.
     */
    public static getAuditLog<ThrowOnError extends boolean = false>(options?: Options<GetAuditLogData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAuditLogResponse, GetAuditLogError, ThrowOnError>({
            ...options,
            url: '/api/audit_log/'
        });
    }
    
}

export class ComplianceReportsService {
    /**
     * Get Compliance Periods
     * Get a list of compliance periods
     */
    public static getCompliancePeriods<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetCompliancePeriodsResponse, GetCompliancePeriodsError, ThrowOnError>({
            ...options,
            url: '/api/reports/compliance-periods'
        });
    }
    
    /**
     * Get Compliance Reports
     */
    public static getComplianceReports<ThrowOnError extends boolean = false>(options: Options<GetComplianceReportsData, ThrowOnError>) {
        return (options?.client ?? client).post<GetComplianceReportsResponse, GetComplianceReportsError, ThrowOnError>({
            ...options,
            url: '/api/reports/list'
        });
    }
    
    /**
     * Get Compliance Report By Id
     */
    public static getComplianceReportById<ThrowOnError extends boolean = false>(options: Options<GetComplianceReportByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetComplianceReportByIdResponse, GetComplianceReportByIdError, ThrowOnError>({
            ...options,
            url: '/api/reports/{report_id}'
        });
    }
    
    /**
     * Update Compliance Report
     * Update an existing compliance report.
     */
    public static updateComplianceReport<ThrowOnError extends boolean = false>(options: Options<UpdateComplianceReportData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateComplianceReportResponse, UpdateComplianceReportError, ThrowOnError>({
            ...options,
            url: '/api/reports/{report_id}'
        });
    }
    
    /**
     * Get Compliance Report Summary
     * Retrieve the comprehensive compliance report summary for a specific report by ID.
     */
    public static getComplianceReportSummary<ThrowOnError extends boolean = false>(options: Options<GetComplianceReportSummaryData, ThrowOnError>) {
        return (options?.client ?? client).get<GetComplianceReportSummaryResponse, GetComplianceReportSummaryError, ThrowOnError>({
            ...options,
            url: '/api/reports/{report_id}/summary'
        });
    }
    
    /**
     * Update Compliance Report Summary
     * Autosave compliance report summary details for a specific summary by ID.
     */
    public static updateComplianceReportSummary<ThrowOnError extends boolean = false>(options: Options<UpdateComplianceReportSummaryData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateComplianceReportSummaryResponse, UpdateComplianceReportSummaryError, ThrowOnError>({
            ...options,
            url: '/api/reports/{report_id}/summary'
        });
    }
    
    /**
     * Create Supplemental Report
     * Create a supplemental compliance report.
     */
    public static createSupplementalReport<ThrowOnError extends boolean = false>(options: Options<CreateSupplementalReportData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateSupplementalReportResponse, CreateSupplementalReportError, ThrowOnError>({
            ...options,
            url: '/api/reports/{report_id}/supplemental'
        });
    }
    
}

export class DashboardService {
    /**
     * Get Director Review Counts
     * Endpoint to retrieve counts for director review items
     */
    public static getDirectorReviewCounts<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetDirectorReviewCountsResponse, GetDirectorReviewCountsError, ThrowOnError>({
            ...options,
            url: '/api/dashboard/director-review-counts'
        });
    }
    
    /**
     * Get Transaction Counts
     * Endpoint to retrieve counts for transaction items
     */
    public static getTransactionCounts<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetTransactionCountsResponse, GetTransactionCountsError, ThrowOnError>({
            ...options,
            url: '/api/dashboard/transaction-counts'
        });
    }
    
    /**
     * Get Org Transaction Counts
     * Endpoint to retrieve counts for organizarion transaction items
     */
    public static getOrgTransactionCounts<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetOrgTransactionCountsResponse, GetOrgTransactionCountsError, ThrowOnError>({
            ...options,
            url: '/api/dashboard/org-transaction-counts'
        });
    }
    
    /**
     * Get Org Compliance Report Counts
     * Endpoint to retrieve counts for organization compliance report items
     */
    public static getOrgComplianceReportCounts<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetOrgComplianceReportCountsResponse, GetOrgComplianceReportCountsError, ThrowOnError>({
            ...options,
            url: '/api/dashboard/org-compliance-report-counts'
        });
    }
    
}

export class DefaultService {
    /**
     * Metrics
     * Endpoint that serves Prometheus metrics.
     */
    public static metrics<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<MetricsResponse, MetricsError, ThrowOnError>({
            ...options,
            url: '/metrics'
        });
    }
    
}

export class DocumentsService {
    /**
     * Get All Documents
     */
    public static getAllDocuments<ThrowOnError extends boolean = false>(options: Options<GetAllDocumentsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllDocumentsResponse, GetAllDocumentsError, ThrowOnError>({
            ...options,
            url: '/api/documents/{parent_type}/{parent_id}'
        });
    }
    
    /**
     * Upload File
     */
    public static uploadFile<ThrowOnError extends boolean = false>(options: Options<UploadFileData, ThrowOnError>) {
        return (options?.client ?? client).post<UploadFileResponse, UploadFileError, ThrowOnError>({
            ...options,
            ...formDataBodySerializer,
            headers: {
                'Content-Type': null,
                ...options?.headers
            },
            url: '/api/documents/{parent_type}/{parent_id}'
        });
    }
    
    /**
     * Stream Document
     */
    public static streamDocument<ThrowOnError extends boolean = false>(options: Options<StreamDocumentData, ThrowOnError>) {
        return (options?.client ?? client).get<StreamDocumentResponse, StreamDocumentError, ThrowOnError>({
            ...options,
            url: '/api/documents/{parent_type}/{parent_id}/{document_id}'
        });
    }
    
    /**
     * Delete File
     */
    public static deleteFile<ThrowOnError extends boolean = false>(options: Options<DeleteFileData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteFileResponse, DeleteFileError, ThrowOnError>({
            ...options,
            url: '/api/documents/{parent_type}/{parent_id}/{document_id}'
        });
    }
    
}

export class EchoService {
    /**
     * Send Echo Message
     * Sends echo back to user.
     *
     * :param incoming_message: incoming message.
     * :returns: message same as the incoming.
     */
    public static sendEchoMessage<ThrowOnError extends boolean = false>(options: Options<SendEchoMessageData, ThrowOnError>) {
        return (options?.client ?? client).post<SendEchoMessageResponse, SendEchoMessageError, ThrowOnError>({
            ...options,
            url: '/api/echo/'
        });
    }
    
}

export class FinalSupplyEquipmentsService {
    /**
     * Get Fse Options
     */
    public static getFseOptions<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetFseOptionsResponse, GetFseOptionsError, ThrowOnError>({
            ...options,
            url: '/api/final-supply-equipments/table-options'
        });
    }
    
    /**
     * Get Final Supply Equipments
     * Endpoint to get list of final supply equipments for a compliance report
     */
    public static getFinalSupplyEquipments<ThrowOnError extends boolean = false>(options: Options<GetFinalSupplyEquipmentsData, ThrowOnError>) {
        return (options?.client ?? client).post<GetFinalSupplyEquipmentsResponse, GetFinalSupplyEquipmentsError, ThrowOnError>({
            ...options,
            url: '/api/final-supply-equipments/list-all'
        });
    }
    
    /**
     * Save Final Supply Equipment Row
     * Endpoint to save single final supply equipment row
     */
    public static saveFinalSupplyEquipmentRow<ThrowOnError extends boolean = false>(options: Options<SaveFinalSupplyEquipmentRowData, ThrowOnError>) {
        return (options?.client ?? client).post<SaveFinalSupplyEquipmentRowResponse, SaveFinalSupplyEquipmentRowError, ThrowOnError>({
            ...options,
            url: '/api/final-supply-equipments/save'
        });
    }
    
    /**
     * Search Table Options
     * Endpoint to search table options strings
     */
    public static searchTableOptions<ThrowOnError extends boolean = false>(options?: Options<SearchTableOptionsData, ThrowOnError>) {
        return (options?.client ?? client).get<SearchTableOptionsResponse, SearchTableOptionsError, ThrowOnError>({
            ...options,
            url: '/api/final-supply-equipments/search'
        });
    }
    
}

export class FuelCodesService {
    /**
     * Get Fuel Code Table Options
     * Endpoint to retrieve table options related to fuel codes
     */
    public static getFuelCodeTableOptions<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetFuelCodeTableOptionsResponse, GetFuelCodeTableOptionsError, ThrowOnError>({
            ...options,
            url: '/api/fuel-codes/table-options'
        });
    }
    
    /**
     * Search Fuel Code Table Options Strings
     * Endpoint to search fuel codes based on a query string
     */
    public static searchFuelCodeTableOptionsStrings<ThrowOnError extends boolean = false>(options?: Options<SearchFuelCodeTableOptionsStringsData, ThrowOnError>) {
        return (options?.client ?? client).get<SearchFuelCodeTableOptionsStringsResponse, SearchFuelCodeTableOptionsStringsError, ThrowOnError>({
            ...options,
            url: '/api/fuel-codes/search'
        });
    }
    
    /**
     * Get Fuel Codes
     * Endpoint to get list of fuel codes with pagination options
     */
    public static getFuelCodes<ThrowOnError extends boolean = false>(options: Options<GetFuelCodesData, ThrowOnError>) {
        return (options?.client ?? client).post<GetFuelCodesResponse, GetFuelCodesError, ThrowOnError>({
            ...options,
            url: '/api/fuel-codes/list'
        });
    }
    
    /**
     * Get Fuel Code
     */
    public static getFuelCode<ThrowOnError extends boolean = false>(options: Options<GetFuelCodeData, ThrowOnError>) {
        return (options?.client ?? client).get<GetFuelCodeResponse, GetFuelCodeError, ThrowOnError>({
            ...options,
            url: '/api/fuel-codes/{fuel_code_id}'
        });
    }
    
    /**
     * Update Fuel Code
     */
    public static updateFuelCode<ThrowOnError extends boolean = false>(options: Options<UpdateFuelCodeData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateFuelCodeResponse, UpdateFuelCodeError, ThrowOnError>({
            ...options,
            url: '/api/fuel-codes/{fuel_code_id}'
        });
    }
    
    /**
     * Delete Fuel Code
     */
    public static deleteFuelCode<ThrowOnError extends boolean = false>(options: Options<DeleteFuelCodeData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteFuelCodeResponse, DeleteFuelCodeError, ThrowOnError>({
            ...options,
            url: '/api/fuel-codes/{fuel_code_id}'
        });
    }
    
    /**
     * Save Fuel Code Row
     * Endpoint to save a single fuel code row
     */
    public static saveFuelCodeRow<ThrowOnError extends boolean = false>(options: Options<SaveFuelCodeRowData, ThrowOnError>) {
        return (options?.client ?? client).post<SaveFuelCodeRowResponse, SaveFuelCodeRowError, ThrowOnError>({
            ...options,
            url: '/api/fuel-codes/save'
        });
    }
    
}

export class FuelExportsService {
    /**
     * Get Fuel Export Table Options
     */
    public static getFuelExportTableOptions<ThrowOnError extends boolean = false>(options: Options<GetFuelExportTableOptionsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetFuelExportTableOptionsResponse, GetFuelExportTableOptionsError, ThrowOnError>({
            ...options,
            url: '/api/fuel-exports/table-options'
        });
    }
    
    /**
     * Get Fuel Exports
     * Endpoint to get list of fuel supplied list for a compliance report
     */
    public static getFuelExports<ThrowOnError extends boolean = false>(options: Options<GetFuelExportsData, ThrowOnError>) {
        return (options?.client ?? client).post<GetFuelExportsResponse, GetFuelExportsError, ThrowOnError>({
            ...options,
            url: '/api/fuel-exports/list-all'
        });
    }
    
    /**
     * Save Fuel Export Row
     * Endpoint to save single fuel export row
     */
    public static saveFuelExportRow<ThrowOnError extends boolean = false>(options: Options<SaveFuelExportRowData, ThrowOnError>) {
        return (options?.client ?? client).post<SaveFuelExportRowResponse, SaveFuelExportRowError, ThrowOnError>({
            ...options,
            url: '/api/fuel-exports/save'
        });
    }
    
}

export class FuelSuppliesService {
    /**
     * Get Fs Table Options
     */
    public static getFsTableOptions<ThrowOnError extends boolean = false>(options: Options<GetFsTableOptionsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetFsTableOptionsResponse, GetFsTableOptionsError, ThrowOnError>({
            ...options,
            url: '/api/fuel-supply/table-options'
        });
    }
    
    /**
     * Get Fuel Supply
     * Endpoint to get list of fuel supplied list for a compliance report
     */
    public static getFuelSupply<ThrowOnError extends boolean = false>(options: Options<GetFuelSupplyData, ThrowOnError>) {
        return (options?.client ?? client).post<GetFuelSupplyResponse, GetFuelSupplyError, ThrowOnError>({
            ...options,
            url: '/api/fuel-supply/list-all'
        });
    }
    
    /**
     * Save Fuel Supply Row
     * Endpoint to save single fuel supply row
     */
    public static saveFuelSupplyRow<ThrowOnError extends boolean = false>(options: Options<SaveFuelSupplyRowData, ThrowOnError>) {
        return (options?.client ?? client).post<SaveFuelSupplyRowResponse, SaveFuelSupplyRowError, ThrowOnError>({
            ...options,
            url: '/api/fuel-supply/save'
        });
    }
    
}

export class FuelTypeService {
    /**
     * Get Fuel Type Others
     * Endpoint to get list of fuel type others
     */
    public static getFuelTypeOthers<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetFuelTypeOthersResponse, GetFuelTypeOthersError, ThrowOnError>({
            ...options,
            url: '/api/fuel-type/others/list'
        });
    }
    
}

export class InitiativeAgreementsService {
    /**
     * Get Initiative Agreement
     * Endpoint to fetch an initiative agreement by its ID.
     */
    public static getInitiativeAgreement<ThrowOnError extends boolean = false>(options: Options<GetInitiativeAgreementData, ThrowOnError>) {
        return (options?.client ?? client).get<GetInitiativeAgreementResponse, GetInitiativeAgreementError, ThrowOnError>({
            ...options,
            url: '/api/initiative-agreements/{initiative_agreement_id}'
        });
    }
    
    /**
     * Update Initiative Agreement
     * Endpoint to update an existing initiative agreement.
     */
    public static updateInitiativeAgreement<ThrowOnError extends boolean = false>(options: Options<UpdateInitiativeAgreementData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateInitiativeAgreementResponse, UpdateInitiativeAgreementError, ThrowOnError>({
            ...options,
            url: '/api/initiative-agreements/'
        });
    }
    
    /**
     * Create Initiative Agreement
     * Endpoint to create a new initiative agreement.
     */
    public static createInitiativeAgreement<ThrowOnError extends boolean = false>(options: Options<CreateInitiativeAgreementData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateInitiativeAgreementResponse, CreateInitiativeAgreementError, ThrowOnError>({
            ...options,
            url: '/api/initiative-agreements/'
        });
    }
    
}

export class InternalCommentsService {
    /**
     * Create Comment
     * API endpoint to create a new internal comment. Requires the user to have the 'Government' role.
     *
     * Args:
     * request (Request): The request object.
     * comment_data (InternalCommentCreateSchema): The schema containing the data for the new comment.
     * service (InternalCommentService, optional): The service handling the internal comment logic.
     *
     * Returns:
     * InternalCommentResponseSchema: The created internal comment.
     */
    public static createComment<ThrowOnError extends boolean = false>(options: Options<CreateCommentData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateCommentResponse, CreateCommentError, ThrowOnError>({
            ...options,
            url: '/api/internal_comments/'
        });
    }
    
    /**
     * Get Comments
     * Retrieves all internal comments associated with a specified entity type and ID. Requires 'Government' role.
     *
     * Args:
     * request (Request): The request object.
     * entity_type (str): The type of the entity.
     * entity_id (int): The ID of the entity.
     * service (InternalCommentService, optional): The service handling the internal comment logic.
     *
     * Returns:
     * List[InternalCommentResponseSchema]: A list of internal comments associated with the entity.
     */
    public static getComments<ThrowOnError extends boolean = false>(options: Options<GetCommentsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetCommentsResponse, GetCommentsError, ThrowOnError>({
            ...options,
            url: '/api/internal_comments/{entity_type}/{entity_id}'
        });
    }
    
    /**
     * Update Comment
     * Updates the text of an existing internal comment. Requires the user to have the 'Government' role.
     *
     * Args:
     * request (Request): The request object.
     * internal_comment_id (int): The ID of the internal comment to be updated.
     * comment_data (InternalCommentUpdateSchema): The schema with the new comment text.
     * service (InternalCommentService, optional): The service handling the internal comment logic.
     *
     * Returns:
     * InternalCommentResponseSchema: The updated internal comment.
     */
    public static updateComment<ThrowOnError extends boolean = false>(options: Options<UpdateCommentData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateCommentResponse, UpdateCommentError, ThrowOnError>({
            ...options,
            url: '/api/internal_comments/{internal_comment_id}'
        });
    }
    
}

export class MonitoringService {
    /**
     * Health Check
     * Checks the health of a project.
     *
     * It returns 200 if the project is healthy.
     */
    public static healthCheck<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<HealthCheckResponse, HealthCheckError, ThrowOnError>({
            ...options,
            url: '/api/health'
        });
    }
    
}

export class NotificationsService {
    /**
     * Get Notifications Channel Subscriptions
     */
    public static getNotificationsChannelSubscriptions<ThrowOnError extends boolean = false>(options: Options<GetNotificationsChannelSubscriptionsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetNotificationsChannelSubscriptionsResponse, GetNotificationsChannelSubscriptionsError, ThrowOnError>({
            ...options,
            url: '/api/notifications/'
        });
    }
    
    /**
     * Get Notification
     */
    public static getNotification<ThrowOnError extends boolean = false>(options: Options<GetNotificationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetNotificationResponse, GetNotificationError, ThrowOnError>({
            ...options,
            url: '/api/notifications/{notification_id}'
        });
    }
    
    /**
     * Update Notification
     */
    public static updateNotification<ThrowOnError extends boolean = false>(options: Options<UpdateNotificationData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateNotificationResponse, UpdateNotificationError, ThrowOnError>({
            ...options,
            url: '/api/notifications/{notification_id}'
        });
    }
    
    /**
     * Get Notification Channel Subscription
     */
    public static getNotificationChannelSubscription<ThrowOnError extends boolean = false>(options: Options<GetNotificationChannelSubscriptionData, ThrowOnError>) {
        return (options?.client ?? client).get<GetNotificationChannelSubscriptionResponse, GetNotificationChannelSubscriptionError, ThrowOnError>({
            ...options,
            url: '/api/notifications/{notification_channel_subscription_id}'
        });
    }
    
    /**
     * Update Notification Channel Subscription
     */
    public static updateNotificationChannelSubscription<ThrowOnError extends boolean = false>(options: Options<UpdateNotificationChannelSubscriptionData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateNotificationChannelSubscriptionResponse, UpdateNotificationChannelSubscriptionError, ThrowOnError>({
            ...options,
            url: '/api/notifications/{notification_channel_subscription_id}'
        });
    }
    
    /**
     * Delete Notification Channel Subscription
     */
    public static deleteNotificationChannelSubscription<ThrowOnError extends boolean = false>(options: Options<DeleteNotificationChannelSubscriptionData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteNotificationChannelSubscriptionResponse, DeleteNotificationChannelSubscriptionError, ThrowOnError>({
            ...options,
            url: '/api/notifications/{notification_channel_subscription_id}'
        });
    }
    
}

export class NotionalTransfersService {
    /**
     * Get Notional Transfer Table Options
     * Endpoint to retrieve table options related to notional transfers
     */
    public static getNotionalTransferTableOptions<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetNotionalTransferTableOptionsResponse, GetNotionalTransferTableOptionsError, ThrowOnError>({
            ...options,
            url: '/api/notional-transfers/table-options'
        });
    }
    
    /**
     * Get Notional Transfers
     * Endpoint to get list of notional transfers for a compliance report
     */
    public static getNotionalTransfers<ThrowOnError extends boolean = false>(options: Options<GetNotionalTransfersData, ThrowOnError>) {
        return (options?.client ?? client).post<GetNotionalTransfersResponse, GetNotionalTransfersError, ThrowOnError>({
            ...options,
            url: '/api/notional-transfers/list-all'
        });
    }
    
    /**
     * Get Notional Transfers Paginated
     */
    public static getNotionalTransfersPaginated<ThrowOnError extends boolean = false>(options: Options<GetNotionalTransfersPaginatedData, ThrowOnError>) {
        return (options?.client ?? client).post<GetNotionalTransfersPaginatedResponse, GetNotionalTransfersPaginatedError, ThrowOnError>({
            ...options,
            url: '/api/notional-transfers/list'
        });
    }
    
    /**
     * Get Notional Transfer
     */
    public static getNotionalTransfer<ThrowOnError extends boolean = false>(options: Options<GetNotionalTransferData, ThrowOnError>) {
        return (options?.client ?? client).get<GetNotionalTransferResponse, GetNotionalTransferError, ThrowOnError>({
            ...options,
            url: '/api/notional-transfers/{notional_transfer_id}'
        });
    }
    
    /**
     * Save Notional Transfer Row
     * Endpoint to save a single notional transfer row
     */
    public static saveNotionalTransferRow<ThrowOnError extends boolean = false>(options: Options<SaveNotionalTransferRowData, ThrowOnError>) {
        return (options?.client ?? client).post<SaveNotionalTransferRowResponse, SaveNotionalTransferRowError, ThrowOnError>({
            ...options,
            url: '/api/notional-transfers/save'
        });
    }
    
}

export class OrganizationService {
    /**
     * Get Org Users
     * Enpoint to get information of all users related to organization for ag-grid in the UI
     *
     * Pagination Request Schema:
     * - page: offset/ page indicates the pagination of rows for the users list
     * - size: size indicates the number of rows per page for the users list
     * - sortOrders: sortOrders is an array of objects that specify the sorting criteria for the users list.
     * Each object has the following properties:
     * - field: the name of the field to sort by
     * - direction: the sorting direction ('asc' or 'desc')
     * - filterModel: filterModel is an array of objects that specifies the filtering criteria for the users list.
     * It has the following properties:
     * - filter_type: the type of filtering to perform ('text', 'number', 'date', 'boolean')
     * - type: the type of filter to apply ('equals', 'notEquals', 'contains', 'notContains', 'startsWith', 'endsWith')
     * - filter: the actual filter value
     * - field: Database Field that needs filtering.
     */
    public static getOrgUsers<ThrowOnError extends boolean = false>(options: Options<GetOrgUsersData, ThrowOnError>) {
        return (options?.client ?? client).post<GetOrgUsersResponse, GetOrgUsersError, ThrowOnError>({
            ...options,
            url: '/api/organization/{organization_id}/users/list'
        });
    }
    
    /**
     * Get Org User By Id
     * Endpoint to get information of a user by ID
     * This endpoint returns the information of a user by ID, including their roles and organization.
     */
    public static getOrgUserById<ThrowOnError extends boolean = false>(options: Options<GetOrgUserByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOrgUserByIdResponse, GetOrgUserByIdError, ThrowOnError>({
            ...options,
            url: '/api/organization/{organization_id}/users/{user_id}'
        });
    }
    
    /**
     * Update Org User
     * Endpoint to update a user
     * This endpoint updates a user and returns the information of the updated user.
     */
    public static updateOrgUser<ThrowOnError extends boolean = false>(options: Options<UpdateOrgUserData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateOrgUserResponse, UpdateOrgUserError, ThrowOnError>({
            ...options,
            url: '/api/organization/{organization_id}/users/{user_id}'
        });
    }
    
    /**
     * Create Org User
     * Endpoint to create a new user
     * This endpoint creates a new user and returns the information of the created user.
     */
    public static createOrgUser<ThrowOnError extends boolean = false>(options: Options<CreateOrgUserData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOrgUserResponse, CreateOrgUserError, ThrowOnError>({
            ...options,
            url: '/api/organization/{organization_id}/users'
        });
    }
    
    /**
     * Get Transactions Paginated For Org
     * Fetches a combined list of Issuances and Transfers, sorted by create_date, with pagination.
     */
    public static getTransactionsPaginatedForOrg<ThrowOnError extends boolean = false>(options: Options<GetTransactionsPaginatedForOrgData, ThrowOnError>) {
        return (options?.client ?? client).post<GetTransactionsPaginatedForOrgResponse, GetTransactionsPaginatedForOrgError, ThrowOnError>({
            ...options,
            url: '/api/organization/transactions'
        });
    }
    
    /**
     * Export Transactions For Org
     * Endpoint to export information of all transactions for a specific organization
     */
    public static exportTransactionsForOrg<ThrowOnError extends boolean = false>(options?: Options<ExportTransactionsForOrgData, ThrowOnError>) {
        return (options?.client ?? client).get<ExportTransactionsForOrgResponse, ExportTransactionsForOrgError, ThrowOnError>({
            ...options,
            url: '/api/organization/transactions/export'
        });
    }
    
    /**
     * Create Transfer
     * Endpoint to create a new transfer
     * This endpoint creates a new transfer and returns the information of the created transfer.
     */
    public static createTransfer<ThrowOnError extends boolean = false>(options: Options<CreateTransferData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateTransferResponse, CreateTransferError, ThrowOnError>({
            ...options,
            url: '/api/organization/{organization_id}/transfers'
        });
    }
    
    /**
     * Update Transfer
     * Endpoint to create a new transfer
     * This endpoint creates a new transfer and returns the information of the created transfer.
     */
    public static updateTransfer<ThrowOnError extends boolean = false>(options: Options<UpdateTransferData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateTransferResponse, UpdateTransferError, ThrowOnError>({
            ...options,
            url: '/api/organization/{organization_id}/transfers/{transfer_id}'
        });
    }
    
    /**
     * Create Compliance Report
     */
    public static createComplianceReport<ThrowOnError extends boolean = false>(options: Options<CreateComplianceReportData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateComplianceReportResponse, CreateComplianceReportError, ThrowOnError>({
            ...options,
            url: '/api/organization/{organization_id}/reports'
        });
    }
    
    /**
     * Get Org Compliance Reports
     */
    public static getOrgComplianceReports<ThrowOnError extends boolean = false>(options: Options<GetOrgComplianceReportsData, ThrowOnError>) {
        return (options?.client ?? client).post<GetOrgComplianceReportsResponse, GetOrgComplianceReportsError, ThrowOnError>({
            ...options,
            url: '/api/organization/{organization_id}/reports/list'
        });
    }
    
    /**
     * Get All Org Reported Years
     * Gets all compliance report years that an organization has reported
     */
    public static getAllOrgReportedYears<ThrowOnError extends boolean = false>(options: Options<GetAllOrgReportedYearsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllOrgReportedYearsResponse, GetAllOrgReportedYearsError, ThrowOnError>({
            ...options,
            url: '/api/organization/{organization_id}/reports/reported-years'
        });
    }
    
    /**
     * Get Org Compliance Report By Id
     * Endpoint to get information of a user by ID
     * This endpoint returns the information of a user by ID, including their roles and organization.
     */
    public static getOrgComplianceReportById<ThrowOnError extends boolean = false>(options: Options<GetOrgComplianceReportByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOrgComplianceReportByIdResponse, GetOrgComplianceReportByIdError, ThrowOnError>({
            ...options,
            url: '/api/organization/{organization_id}/reports/{report_id}'
        });
    }
    
}

export class OrganizationsService {
    /**
     * Export Organizations
     * Endpoint to export information of all organizations
     *
     * This endpoint can support exporting data in different file formats (xls, xlsx, csv)
     * as specified by the 'export_format' and 'media_type' variables.
     * - 'export_format' specifies the file format: options are 'xls', 'xlsx', and 'csv'.
     * - 'media_type' sets the appropriate MIME type based on 'export_format':
     * 'application/vnd.ms-excel' for 'xls',
     * 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' for 'xlsx',
     * 'text/csv' for 'csv'.
     *
     * The SpreadsheetBuilder class is used for building the spreadsheet.
     * It allows adding multiple sheets with custom styling options and exports them as a byte stream.
     * Also, an example of how to use the SpreadsheetBuilder is provided in its class documentation.
     *
     * Note: Only the first sheet data is used for the CSV format,
     * as CSV files do not support multiple sheets.
     */
    public static exportOrganizations<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<ExportOrganizationsResponse, ExportOrganizationsError, ThrowOnError>({
            ...options,
            url: '/api/organizations/export'
        });
    }
    
    /**
     * Create Organization
     * Endpoint to create a new organization. This includes processing the provided
     * organization details along with associated addresses.
     */
    public static createOrganization<ThrowOnError extends boolean = false>(options: Options<CreateOrganizationData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOrganizationResponse, CreateOrganizationError, ThrowOnError>({
            ...options,
            url: '/api/organizations/create'
        });
    }
    
    /**
     * Search Organizations
     * Search for organizations based on a query string.
     * Returns a list of organizations with their names and formatted addresses.
     */
    public static searchOrganizations<ThrowOnError extends boolean = false>(options: Options<SearchOrganizationsData, ThrowOnError>) {
        return (options?.client ?? client).get<SearchOrganizationsResponse, SearchOrganizationsError, ThrowOnError>({
            ...options,
            url: '/api/organizations/search'
        });
    }
    
    /**
     * Get Organization
     * Fetch a single organization by id
     */
    public static getOrganization<ThrowOnError extends boolean = false>(options: Options<GetOrganizationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOrganizationResponse, GetOrganizationError, ThrowOnError>({
            ...options,
            url: '/api/organizations/{organization_id}'
        });
    }
    
    /**
     * Update Organization
     * Update an organizations data by id
     */
    public static updateOrganization<ThrowOnError extends boolean = false>(options: Options<UpdateOrganizationData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateOrganizationResponse, UpdateOrganizationError, ThrowOnError>({
            ...options,
            url: '/api/organizations/{organization_id}'
        });
    }
    
    /**
     * Get Organizations
     * Fetch a list of organizations
     */
    public static getOrganizations<ThrowOnError extends boolean = false>(options: Options<GetOrganizationsData, ThrowOnError>) {
        return (options?.client ?? client).post<GetOrganizationsResponse, GetOrganizationsError, ThrowOnError>({
            ...options,
            url: '/api/organizations/'
        });
    }
    
    /**
     * Get Organization Statuses
     * Fetch all organization statuses
     */
    public static getOrganizationStatuses<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetOrganizationStatusesResponse, GetOrganizationStatusesError, ThrowOnError>({
            ...options,
            url: '/api/organizations/statuses/'
        });
    }
    
    /**
     * Get Organization Types
     * Fetch all organization types
     */
    public static getOrganizationTypes<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetOrganizationTypesResponse, GetOrganizationTypesError, ThrowOnError>({
            ...options,
            url: '/api/organizations/types/'
        });
    }
    
    /**
     * Get Organization Names
     * Fetch all organization names
     */
    public static getOrganizationNames<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetOrganizationNamesResponse, GetOrganizationNamesError, ThrowOnError>({
            ...options,
            url: '/api/organizations/names/'
        });
    }
    
    /**
     * Get Externally Registered Organizations
     * Retrieve a list of registered organizations, excluding the specified organization.
     *
     * Args:
     * org_id (int): The ID of the organization to be excluded from the list.
     *
     * Returns:
     * List[OrganizationSummaryResponseSchema]: A list of OrganizationSummaryResponseSchema objects
     * representing registered organizations, excluding the specified organization.
     *
     * Raises:
     * Exception: If an error occurs during the database query.
     */
    public static getExternallyRegisteredOrganizations<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetExternallyRegisteredOrganizationsResponse, GetExternallyRegisteredOrganizationsError, ThrowOnError>({
            ...options,
            url: '/api/organizations/registered/external'
        });
    }
    
    /**
     * Get Balances By Org Id
     * Retrieve the total and reserved balances for a specific organization identified by its ID.
     */
    public static getBalancesByOrgId<ThrowOnError extends boolean = false>(options: Options<GetBalancesByOrgIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetBalancesByOrgIdResponse, GetBalancesByOrgIdError, ThrowOnError>({
            ...options,
            url: '/api/organizations/balances/{organization_id}'
        });
    }
    
    /**
     * Get Balances
     * Retrieve the total and reserved balances for a specific organization identified by its ID.
     */
    public static getBalances<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetBalancesResponse, GetBalancesError, ThrowOnError>({
            ...options,
            url: '/api/organizations/current/balances'
        });
    }
    
}

export class OtherUsesService {
    /**
     * Get Other Uses Table Options
     * Endpoint to retrieve table options related to other uses
     */
    public static getOtherUsesTableOptions<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetOtherUsesTableOptionsResponse, GetOtherUsesTableOptionsError, ThrowOnError>({
            ...options,
            url: '/api/other-uses/table-options'
        });
    }
    
    /**
     * Get Other Uses
     * Endpoint to get list of other uses for a compliance report
     */
    public static getOtherUses<ThrowOnError extends boolean = false>(options: Options<GetOtherUsesData, ThrowOnError>) {
        return (options?.client ?? client).post<GetOtherUsesResponse, GetOtherUsesError, ThrowOnError>({
            ...options,
            url: '/api/other-uses/list-all'
        });
    }
    
    /**
     * Get Other Uses Paginated
     */
    public static getOtherUsesPaginated<ThrowOnError extends boolean = false>(options: Options<GetOtherUsesPaginatedData, ThrowOnError>) {
        return (options?.client ?? client).post<GetOtherUsesPaginatedResponse, GetOtherUsesPaginatedError, ThrowOnError>({
            ...options,
            url: '/api/other-uses/list'
        });
    }
    
    /**
     * Save Other Uses Row
     * Endpoint to save a single other uses row
     */
    public static saveOtherUsesRow<ThrowOnError extends boolean = false>(options: Options<SaveOtherUsesRowData, ThrowOnError>) {
        return (options?.client ?? client).post<SaveOtherUsesRowResponse, SaveOtherUsesRowError, ThrowOnError>({
            ...options,
            url: '/api/other-uses/save'
        });
    }
    
}

export class RedisService {
    /**
     * Get Redis Value
     * Get value from redis.
     *
     * :param key: redis key, to get data from.
     * :param redis_pool: redis connection pool.
     * :returns: information from redis.
     */
    public static getRedisValue<ThrowOnError extends boolean = false>(options: Options<GetRedisValueData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRedisValueResponse, GetRedisValueError, ThrowOnError>({
            ...options,
            url: '/api/redis/'
        });
    }
    
    /**
     * Set Redis Value
     * Set value in redis.
     *
     * :param redis_value: new value data.
     * :param redis_pool: redis connection pool.
     */
    public static setRedisValue<ThrowOnError extends boolean = false>(options: Options<SetRedisValueData, ThrowOnError>) {
        return (options?.client ?? client).put<SetRedisValueResponse, SetRedisValueError, ThrowOnError>({
            ...options,
            url: '/api/redis/'
        });
    }
    
}

export class RolesService {
    /**
     * Get Roles
     */
    public static getRoles<ThrowOnError extends boolean = false>(options?: Options<GetRolesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRolesResponse, GetRolesError, ThrowOnError>({
            ...options,
            url: '/api/roles/'
        });
    }
    
}

export class TransactionsService {
    /**
     * Get Transactions Paginated By Org
     * Fetches a combined list of Issuances and Transfers for a specific organization, sorted by create_date, with pagination.
     */
    public static getTransactionsPaginatedByOrg<ThrowOnError extends boolean = false>(options: Options<GetTransactionsPaginatedByOrgData, ThrowOnError>) {
        return (options?.client ?? client).post<GetTransactionsPaginatedByOrgResponse, GetTransactionsPaginatedByOrgError, ThrowOnError>({
            ...options,
            url: '/api/transactions/{organization_id}'
        });
    }
    
    /**
     * Export Transactions By Org
     * Endpoint to export information of all transactions for a specific organization
     */
    public static exportTransactionsByOrg<ThrowOnError extends boolean = false>(options: Options<ExportTransactionsByOrgData, ThrowOnError>) {
        return (options?.client ?? client).get<ExportTransactionsByOrgResponse, ExportTransactionsByOrgError, ThrowOnError>({
            ...options,
            url: '/api/transactions/{organization_id}/export'
        });
    }
    
    /**
     * Get Transactions Paginated
     * Fetches a combined list of Issuances and Transfers, sorted by create_date, with pagination.
     */
    public static getTransactionsPaginated<ThrowOnError extends boolean = false>(options: Options<GetTransactionsPaginatedData, ThrowOnError>) {
        return (options?.client ?? client).post<GetTransactionsPaginatedResponse, GetTransactionsPaginatedError, ThrowOnError>({
            ...options,
            url: '/api/transactions/'
        });
    }
    
    /**
     * Export Transactions
     * Endpoint to export information of all transactions
     */
    public static exportTransactions<ThrowOnError extends boolean = false>(options?: Options<ExportTransactionsData, ThrowOnError>) {
        return (options?.client ?? client).get<ExportTransactionsResponse, ExportTransactionsError, ThrowOnError>({
            ...options,
            url: '/api/transactions/export'
        });
    }
    
    /**
     * Get Transaction Statuses
     * Fetch all transaction statuses
     */
    public static getTransactionStatuses<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetTransactionStatusesResponse, GetTransactionStatusesError, ThrowOnError>({
            ...options,
            url: '/api/transactions/statuses/'
        });
    }
    
}

export class TransfersService {
    /**
     * Get All Transfers
     * Endpoint to fetch all transfers.
     */
    public static getAllTransfers<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllTransfersResponse, GetAllTransfersError, ThrowOnError>({
            ...options,
            url: '/api/transfers/'
        });
    }
    
    /**
     * Get Transfer
     * Endpoint to fetch a transfer by its ID.
     */
    public static getTransfer<ThrowOnError extends boolean = false>(options: Options<GetTransferData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTransferResponse, GetTransferError, ThrowOnError>({
            ...options,
            url: '/api/transfers/{transfer_id}'
        });
    }
    
    /**
     * Government Update Transfer
     * Endpoint to set an existing transfers status to 'Deleted'.
     */
    public static governmentUpdateTransfer<ThrowOnError extends boolean = false>(options: Options<GovernmentUpdateTransferData, ThrowOnError>) {
        return (options?.client ?? client).put<GovernmentUpdateTransferResponse, GovernmentUpdateTransferError, ThrowOnError>({
            ...options,
            url: '/api/transfers/{transfer_id}'
        });
    }
    
    /**
     * Update Category
     */
    public static updateCategory<ThrowOnError extends boolean = false>(options: Options<UpdateCategoryData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateCategoryResponse, UpdateCategoryError, ThrowOnError>({
            ...options,
            url: '/api/transfers/{transfer_id}/category'
        });
    }
    
}

export class UsersService {
    /**
     * Export Users
     * Endpoint to export information of all users
     *
     * This endpoint can support exporting data in different file formats (xls, xlsx, csv)
     * as specified by the 'format' and 'media_type' variables.
     * - 'format' specifies the file format: options are 'xls', 'xlsx', and 'csv'.
     * - 'media_type' sets the appropriate MIME type based on 'format':
     * 'application/vnd.ms-excel' for 'xls',
     * 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' for 'xlsx',
     * 'text/csv' for 'csv'.
     *
     * The SpreadsheetBuilder class is used for building the spreadsheet.
     * It allows adding multiple sheets with custom styling options and exports them as a byte stream.
     * Also, an example of how to use the SpreadsheetBuilder is provided in its class documentation.
     *
     * Note: Only the first sheet data is used for the CSV format,
     * as CSV files do not support multiple sheets.
     */
    public static exportUsers<ThrowOnError extends boolean = false>(options?: Options<ExportUsersData, ThrowOnError>) {
        return (options?.client ?? client).get<ExportUsersResponse, ExportUsersError, ThrowOnError>({
            ...options,
            url: '/api/users/export'
        });
    }
    
    /**
     * Get Users
     * Endpoint to get information of all users for ag-grid in the UI
     *
     * Pagination Request Schema:
     * - page: offset/ page indicates the pagination of rows for the users list
     * - size: size indicates the number of rows per page for the users list
     * - sortOrders: sortOrders is an array of objects that specify the sorting criteria for the users list.
     * Each object has the following properties:
     * - field: the name of the field to sort by
     * - direction: the sorting direction ('asc' or 'desc')
     * - filterModel: filterModel is an array of objects that specifies the filtering criteria for the users list.
     * It has the following properties:
     * - filter_type: the type of filtering to perform ('text', 'number', 'date', 'boolean')
     * - type: the type of filter to apply ('equals', 'notEquals', 'contains', 'notContains', 'startsWith', 'endsWith')
     * - filter: the actual filter value
     * - field: Database Field that needs filtering.
     */
    public static getUsers<ThrowOnError extends boolean = false>(options: Options<GetUsersData, ThrowOnError>) {
        return (options?.client ?? client).post<GetUsersResponse, GetUsersError, ThrowOnError>({
            ...options,
            url: '/api/users/list'
        });
    }
    
    /**
     * Get Current User
     * Endpoint to get information of the current user
     *
     * This endpoint returns the information of the current user, including their roles and organization.
     */
    public static getCurrentUser<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetCurrentUserResponse, GetCurrentUserError, ThrowOnError>({
            ...options,
            url: '/api/users/current'
        });
    }
    
    /**
     * Get User By Id
     * Endpoint to get information of a user by ID
     * This endpoint returns the information of a user by ID, including their roles and organization.
     */
    public static getUserById<ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserByIdResponse, GetUserByIdError, ThrowOnError>({
            ...options,
            url: '/api/users/{user_id}'
        });
    }
    
    /**
     * Update User
     * Endpoint to update a user
     * This endpoint updates a user and returns the information of the updated user.
     */
    public static updateUser<ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateUserResponse, UpdateUserError, ThrowOnError>({
            ...options,
            url: '/api/users/{user_id}'
        });
    }
    
    /**
     * Delete User
     * Endpoint to delete a user
     * This endpoint deletes a user, if the user had never logged in before.
     */
    public static deleteUser<ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
            ...options,
            url: '/api/users/{user_id}'
        });
    }
    
    /**
     * Create User
     * Endpoint to create a new user
     * This endpoint creates a new user and returns the information of the created user.
     */
    public static createUser<ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateUserResponse, CreateUserError, ThrowOnError>({
            ...options,
            url: '/api/users'
        });
    }
    
    /**
     * Get User Roles
     * Endpoint to get the roles of a user
     */
    public static getUserRoles<ThrowOnError extends boolean = false>(options: Options<GetUserRolesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserRolesResponse, GetUserRolesError, ThrowOnError>({
            ...options,
            url: '/api/users/{user_id}/roles'
        });
    }
    
    /**
     * Get User Activities
     * Get activities of a specific user.
     *
     * Permissions:
     * - Government users with 'ADMINISTRATOR' role can access any user's activities.
     * - Supplier users with 'MANAGE_USERS' role can access activities of users within
     * their own organization.
     */
    public static getUserActivities<ThrowOnError extends boolean = false>(options: Options<GetUserActivitiesData, ThrowOnError>) {
        return (options?.client ?? client).post<GetUserActivitiesResponse, GetUserActivitiesError, ThrowOnError>({
            ...options,
            url: '/api/users/{user_id}/activity'
        });
    }
    
    /**
     * Get All User Activities
     * Get activities of all users.
     */
    public static getAllUserActivities<ThrowOnError extends boolean = false>(options: Options<GetAllUserActivitiesData, ThrowOnError>) {
        return (options?.client ?? client).post<GetAllUserActivitiesResponse, GetAllUserActivitiesError, ThrowOnError>({
            ...options,
            url: '/api/users/activities/all'
        });
    }
    
    /**
     * Get All User Login History
     * Get users login history.
     */
    public static getAllUserLoginHistory<ThrowOnError extends boolean = false>(options: Options<GetAllUserLoginHistoryData, ThrowOnError>) {
        return (options?.client ?? client).post<GetAllUserLoginHistoryResponse, GetAllUserLoginHistoryError, ThrowOnError>({
            ...options,
            url: '/api/users/login-history'
        });
    }
    
}