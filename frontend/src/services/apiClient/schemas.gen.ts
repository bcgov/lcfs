// This file is auto-generated by @hey-api/openapi-ts

export const AdminAdjustmentCreateSchemaSchema = {
    properties: {
        complianceUnits: {
            type: 'integer',
            title: 'Complianceunits'
        },
        currentStatus: {
            type: 'string',
            title: 'Currentstatus'
        },
        transactionEffectiveDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transactioneffectivedate'
        },
        toOrganizationId: {
            type: 'integer',
            title: 'Toorganizationid'
        },
        govComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Govcomment'
        },
        internalComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Internalcomment'
        }
    },
    type: 'object',
    required: ['complianceUnits', 'currentStatus', 'toOrganizationId'],
    title: 'AdminAdjustmentCreateSchema'
} as const;

export const AdminAdjustmentHistorySchemaSchema = {
    properties: {
        createDate: {
            type: 'string',
            format: 'date-time',
            title: 'Createdate'
        },
        adminAdjustmentStatus: {
            '$ref': '#/components/schemas/AdminAdjustmentStatusSchema'
        },
        userProfile: {
            '$ref': '#/components/schemas/HistoryUserSchema'
        }
    },
    type: 'object',
    required: ['createDate', 'adminAdjustmentStatus', 'userProfile'],
    title: 'AdminAdjustmentHistorySchema'
} as const;

export const AdminAdjustmentSchemaSchema = {
    properties: {
        complianceUnits: {
            type: 'integer',
            title: 'Complianceunits'
        },
        currentStatus: {
            '$ref': '#/components/schemas/AdminAdjustmentStatusSchema'
        },
        transactionEffectiveDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transactioneffectivedate'
        },
        toOrganizationId: {
            type: 'integer',
            title: 'Toorganizationid'
        },
        govComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Govcomment'
        },
        internalComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Internalcomment'
        },
        adminAdjustmentId: {
            type: 'integer',
            title: 'Adminadjustmentid'
        },
        toOrganization: {
            '$ref': '#/components/schemas/lcfs__web__api__admin_adjustment__schema__OrganizationSchema'
        },
        history: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/AdminAdjustmentHistorySchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'History'
        },
        returned: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Returned',
            default: false
        },
        createDate: {
            type: 'string',
            format: 'date-time',
            title: 'Createdate'
        }
    },
    type: 'object',
    required: ['complianceUnits', 'currentStatus', 'toOrganizationId', 'adminAdjustmentId', 'toOrganization', 'history', 'createDate'],
    title: 'AdminAdjustmentSchema'
} as const;

export const AdminAdjustmentStatusSchemaSchema = {
    properties: {
        adminAdjustmentStatusId: {
            type: 'integer',
            title: 'Adminadjustmentstatusid'
        },
        status: {
            type: 'string',
            title: 'Status'
        }
    },
    type: 'object',
    required: ['adminAdjustmentStatusId', 'status'],
    title: 'AdminAdjustmentStatusSchema'
} as const;

export const AdminAdjustmentUpdateSchemaSchema = {
    properties: {
        complianceUnits: {
            type: 'integer',
            title: 'Complianceunits'
        },
        currentStatus: {
            type: 'string',
            title: 'Currentstatus'
        },
        transactionEffectiveDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transactioneffectivedate'
        },
        toOrganizationId: {
            type: 'integer',
            title: 'Toorganizationid'
        },
        govComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Govcomment'
        },
        internalComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Internalcomment'
        },
        adminAdjustmentId: {
            type: 'integer',
            title: 'Adminadjustmentid'
        }
    },
    type: 'object',
    required: ['complianceUnits', 'currentStatus', 'toOrganizationId', 'adminAdjustmentId'],
    title: 'AdminAdjustmentUpdateSchema'
} as const;

export const AllocationAgreementAllSchemaSchema = {
    properties: {
        allocationAgreements: {
            items: {
                '$ref': '#/components/schemas/AllocationAgreementSchema'
            },
            type: 'array',
            title: 'Allocationagreements'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationResponseSchema'
                },
                {
                    type: 'null'
                }
            ],
            default: {}
        }
    },
    type: 'object',
    required: ['allocationAgreements'],
    title: 'AllocationAgreementAllSchema'
} as const;

export const AllocationAgreementCreateSchemaSchema = {
    properties: {
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        allocationAgreementId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Allocationagreementid'
        },
        transactionPartner: {
            type: 'string',
            title: 'Transactionpartner'
        },
        postalAddress: {
            type: 'string',
            title: 'Postaladdress'
        },
        transactionPartnerEmail: {
            type: 'string',
            title: 'Transactionpartneremail'
        },
        transactionPartnerPhone: {
            type: 'string',
            title: 'Transactionpartnerphone'
        },
        fuelType: {
            type: 'string',
            title: 'Fueltype'
        },
        fuelTypeOther: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fueltypeother'
        },
        ciOfFuel: {
            type: 'number',
            title: 'Cioffuel'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity'
        },
        units: {
            type: 'string',
            title: 'Units'
        },
        allocationTransactionType: {
            type: 'string',
            title: 'Allocationtransactiontype'
        },
        fuelCategory: {
            type: 'string',
            title: 'Fuelcategory'
        },
        provisionOfTheAct: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provisionoftheact'
        },
        fuelCode: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcode'
        },
        deleted: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deleted'
        }
    },
    type: 'object',
    required: ['complianceReportId', 'transactionPartner', 'postalAddress', 'transactionPartnerEmail', 'transactionPartnerPhone', 'fuelType', 'ciOfFuel', 'quantity', 'units', 'allocationTransactionType', 'fuelCategory'],
    title: 'AllocationAgreementCreateSchema'
} as const;

export const AllocationAgreementListSchemaSchema = {
    properties: {
        allocationAgreements: {
            items: {
                '$ref': '#/components/schemas/AllocationAgreementSchema'
            },
            type: 'array',
            title: 'Allocationagreements'
        },
        pagination: {
            '$ref': '#/components/schemas/PaginationResponseSchema'
        }
    },
    type: 'object',
    required: ['allocationAgreements', 'pagination'],
    title: 'AllocationAgreementListSchema'
} as const;

export const AllocationAgreementSchemaSchema = {
    properties: {
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        allocationAgreementId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Allocationagreementid'
        },
        transactionPartner: {
            type: 'string',
            title: 'Transactionpartner'
        },
        postalAddress: {
            type: 'string',
            title: 'Postaladdress'
        },
        transactionPartnerEmail: {
            type: 'string',
            title: 'Transactionpartneremail'
        },
        transactionPartnerPhone: {
            type: 'string',
            title: 'Transactionpartnerphone'
        },
        fuelType: {
            type: 'string',
            title: 'Fueltype'
        },
        fuelTypeOther: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fueltypeother'
        },
        ciOfFuel: {
            type: 'number',
            title: 'Cioffuel'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity'
        },
        units: {
            type: 'string',
            title: 'Units'
        },
        allocationTransactionType: {
            type: 'string',
            title: 'Allocationtransactiontype'
        },
        fuelCategory: {
            type: 'string',
            title: 'Fuelcategory'
        },
        provisionOfTheAct: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provisionoftheact'
        },
        fuelCode: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcode'
        },
        deleted: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deleted'
        }
    },
    type: 'object',
    required: ['complianceReportId', 'transactionPartner', 'postalAddress', 'transactionPartnerEmail', 'transactionPartnerPhone', 'fuelType', 'ciOfFuel', 'quantity', 'units', 'allocationTransactionType', 'fuelCategory'],
    title: 'AllocationAgreementSchema'
} as const;

export const AllocationAgreementTableOptionsSchemaSchema = {
    properties: {
        allocationTransactionTypes: {
            items: {
                '$ref': '#/components/schemas/AllocationTransactionTypeSchema'
            },
            type: 'array',
            title: 'Allocationtransactiontypes'
        },
        fuelTypes: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__allocation_agreement__schema__FuelTypeSchema'
            },
            type: 'array',
            title: 'Fueltypes'
        },
        provisionsOfTheAct: {
            items: {
                '$ref': '#/components/schemas/ProvisionOfTheActSchema'
            },
            type: 'array',
            title: 'Provisionsoftheact'
        },
        fuelCodes: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__allocation_agreement__schema__FuelCodeSchema'
            },
            type: 'array',
            title: 'Fuelcodes'
        },
        unitsOfMeasure: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Unitsofmeasure'
        }
    },
    type: 'object',
    required: ['allocationTransactionTypes', 'fuelTypes', 'provisionsOfTheAct', 'fuelCodes', 'unitsOfMeasure'],
    title: 'AllocationAgreementTableOptionsSchema'
} as const;

export const AllocationTransactionTypeSchemaSchema = {
    properties: {
        allocationTransactionTypeId: {
            type: 'integer',
            title: 'Allocationtransactiontypeid'
        },
        type: {
            type: 'string',
            title: 'Type'
        }
    },
    type: 'object',
    required: ['allocationTransactionTypeId', 'type'],
    title: 'AllocationTransactionTypeSchema'
} as const;

export const AudienceScopeEnumSchema = {
    type: 'string',
    enum: ['Compliance Manager', 'Director', 'Analyst'],
    title: 'AudienceScopeEnum'
} as const;

export const AuditLogListItemSchemaSchema = {
    properties: {
        auditLogId: {
            type: 'integer',
            title: 'Auditlogid'
        },
        tableName: {
            type: 'string',
            title: 'Tablename'
        },
        operation: {
            '$ref': '#/components/schemas/AuditLogOperationEnum'
        },
        rowId: {
            type: 'integer',
            title: 'Rowid'
        },
        changedFields: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Changedfields'
        },
        createDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createdate'
        },
        createUser: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createuser'
        }
    },
    type: 'object',
    required: ['auditLogId', 'tableName', 'operation', 'rowId'],
    title: 'AuditLogListItemSchema'
} as const;

export const AuditLogListSchemaSchema = {
    properties: {
        pagination: {
            '$ref': '#/components/schemas/PaginationResponseSchema'
        },
        auditLogs: {
            items: {
                '$ref': '#/components/schemas/AuditLogListItemSchema'
            },
            type: 'array',
            title: 'Auditlogs'
        }
    },
    type: 'object',
    required: ['pagination', 'auditLogs'],
    title: 'AuditLogListSchema'
} as const;

export const AuditLogOperationEnumSchema = {
    type: 'string',
    enum: ['INSERT', 'UPDATE', 'DELETE'],
    title: 'AuditLogOperationEnum'
} as const;

export const AuditLogSchemaSchema = {
    properties: {
        auditLogId: {
            type: 'integer',
            title: 'Auditlogid'
        },
        tableName: {
            type: 'string',
            title: 'Tablename'
        },
        operation: {
            '$ref': '#/components/schemas/AuditLogOperationEnum'
        },
        rowId: {
            type: 'integer',
            title: 'Rowid'
        },
        oldValues: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Oldvalues'
        },
        newValues: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Newvalues'
        },
        delta: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Delta'
        },
        createDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createdate'
        },
        createUser: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createuser'
        },
        updateDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedate'
        },
        updateUser: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updateuser'
        }
    },
    type: 'object',
    required: ['auditLogId', 'tableName', 'operation', 'rowId'],
    title: 'AuditLogSchema'
} as const;

export const Body_uploadFileSchema = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_uploadFile'
} as const;

export const CommonPaginatedReportRequestSchemaSchema = {
    properties: {
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        filters: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FilterModel'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Filters'
        },
        page: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        sortOrders: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SortOrder'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sortorders'
        }
    },
    type: 'object',
    required: ['complianceReportId'],
    title: 'CommonPaginatedReportRequestSchema'
} as const;

export const CompliancePeriodSchemaSchema = {
    properties: {
        compliancePeriodId: {
            type: 'integer',
            title: 'Complianceperiodid'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        effectiveDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Effectivedate'
        },
        expirationDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expirationdate'
        },
        displayOrder: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Displayorder'
        }
    },
    type: 'object',
    required: ['compliancePeriodId', 'description'],
    title: 'CompliancePeriodSchema'
} as const;

export const ComplianceReportBaseSchemaSchema = {
    properties: {
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        complianceReportGroupUuid: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Compliancereportgroupuuid'
        },
        version: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version'
        },
        supplementalInitiator: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SupplementalInitiatorType'
                },
                {
                    type: 'null'
                }
            ]
        },
        compliancePeriodId: {
            type: 'integer',
            title: 'Complianceperiodid'
        },
        compliancePeriod: {
            '$ref': '#/components/schemas/CompliancePeriodSchema'
        },
        organizationId: {
            type: 'integer',
            title: 'Organizationid'
        },
        organization: {
            '$ref': '#/components/schemas/ComplianceReportOrganizationSchema'
        },
        summary: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SummarySchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        currentStatusId: {
            type: 'integer',
            title: 'Currentstatusid'
        },
        currentStatus: {
            '$ref': '#/components/schemas/ComplianceReportStatusSchema'
        },
        transactionId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transactionid'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        },
        supplementalNote: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Supplementalnote'
        },
        reportingFrequency: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ReportingFrequency'
                },
                {
                    type: 'null'
                }
            ]
        },
        updateDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedate'
        },
        history: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/ComplianceReportHistorySchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'History'
        },
        hasSupplemental: {
            type: 'boolean',
            title: 'Hassupplemental'
        }
    },
    type: 'object',
    required: ['complianceReportId', 'complianceReportGroupUuid', 'version', 'supplementalInitiator', 'compliancePeriodId', 'compliancePeriod', 'organizationId', 'organization', 'summary', 'currentStatusId', 'currentStatus', 'hasSupplemental'],
    title: 'ComplianceReportBaseSchema'
} as const;

export const ComplianceReportCreateSchemaSchema = {
    properties: {
        compliancePeriod: {
            type: 'string',
            title: 'Complianceperiod'
        },
        organizationId: {
            type: 'integer',
            title: 'Organizationid'
        },
        status: {
            type: 'string',
            title: 'Status'
        }
    },
    type: 'object',
    required: ['compliancePeriod', 'organizationId', 'status'],
    title: 'ComplianceReportCreateSchema'
} as const;

export const ComplianceReportHistorySchemaSchema = {
    properties: {
        complianceReportHistoryId: {
            type: 'integer',
            title: 'Compliancereporthistoryid'
        },
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        status: {
            '$ref': '#/components/schemas/ComplianceReportStatusSchema'
        },
        userProfile: {
            '$ref': '#/components/schemas/ComplianceReportUserSchema'
        },
        createDate: {
            type: 'string',
            format: 'date-time',
            title: 'Createdate'
        }
    },
    type: 'object',
    required: ['complianceReportHistoryId', 'complianceReportId', 'status', 'userProfile', 'createDate'],
    title: 'ComplianceReportHistorySchema'
} as const;

export const ComplianceReportListSchemaSchema = {
    properties: {
        pagination: {
            '$ref': '#/components/schemas/PaginationResponseSchema'
        },
        reports: {
            items: {
                '$ref': '#/components/schemas/ComplianceReportBaseSchema'
            },
            type: 'array',
            title: 'Reports'
        }
    },
    type: 'object',
    required: ['pagination', 'reports'],
    title: 'ComplianceReportListSchema'
} as const;

export const ComplianceReportOrganizationSchemaSchema = {
    properties: {
        organizationId: {
            type: 'integer',
            title: 'Organizationid'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['organizationId', 'name'],
    title: 'ComplianceReportOrganizationSchema'
} as const;

export const ComplianceReportRequestSchemaSchema = {
    properties: {
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        }
    },
    type: 'object',
    required: ['complianceReportId'],
    title: 'ComplianceReportRequestSchema'
} as const;

export const ComplianceReportStatusSchemaSchema = {
    properties: {
        complianceReportStatusId: {
            type: 'integer',
            title: 'Compliancereportstatusid'
        },
        status: {
            type: 'string',
            title: 'Status'
        }
    },
    type: 'object',
    required: ['complianceReportStatusId', 'status'],
    title: 'ComplianceReportStatusSchema'
} as const;

export const ComplianceReportSummaryRowSchemaSchema = {
    properties: {
        line: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Line',
            default: ''
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            default: ''
        },
        field: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Field',
            default: ''
        },
        gasoline: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Gasoline',
            default: 0
        },
        diesel: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Diesel',
            default: 0
        },
        jetFuel: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Jetfuel',
            default: 0
        },
        value: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value',
            default: 0
        },
        totalValue: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Totalvalue',
            default: 0
        },
        format: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Format',
            default: ''
        }
    },
    type: 'object',
    title: 'ComplianceReportSummaryRowSchema'
} as const;

export const ComplianceReportSummarySchemaSchema = {
    properties: {
        renewableFuelTargetSummary: {
            items: {
                '$ref': '#/components/schemas/ComplianceReportSummaryRowSchema'
            },
            type: 'array',
            title: 'Renewablefueltargetsummary'
        },
        lowCarbonFuelTargetSummary: {
            items: {
                '$ref': '#/components/schemas/ComplianceReportSummaryRowSchema'
            },
            type: 'array',
            title: 'Lowcarbonfueltargetsummary'
        },
        nonCompliancePenaltySummary: {
            items: {
                '$ref': '#/components/schemas/ComplianceReportSummaryRowSchema'
            },
            type: 'array',
            title: 'Noncompliancepenaltysummary'
        },
        canSign: {
            type: 'boolean',
            title: 'Cansign',
            default: false
        },
        summaryId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Summaryid'
        },
        complianceReportId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Compliancereportid'
        },
        version: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version'
        },
        isLocked: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Islocked',
            default: false
        },
        quarter: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Quarter'
        }
    },
    type: 'object',
    required: ['renewableFuelTargetSummary', 'lowCarbonFuelTargetSummary', 'nonCompliancePenaltySummary'],
    title: 'ComplianceReportSummarySchema'
} as const;

export const ComplianceReportSummaryUpdateSchemaSchema = {
    properties: {
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        renewableFuelTargetSummary: {
            items: {
                '$ref': '#/components/schemas/ComplianceReportSummaryRowSchema'
            },
            type: 'array',
            title: 'Renewablefueltargetsummary'
        },
        lowCarbonFuelTargetSummary: {
            items: {
                '$ref': '#/components/schemas/ComplianceReportSummaryRowSchema'
            },
            type: 'array',
            title: 'Lowcarbonfueltargetsummary'
        },
        nonCompliancePenaltySummary: {
            items: {
                '$ref': '#/components/schemas/ComplianceReportSummaryRowSchema'
            },
            type: 'array',
            title: 'Noncompliancepenaltysummary'
        },
        summaryId: {
            type: 'integer',
            title: 'Summaryid'
        }
    },
    type: 'object',
    required: ['complianceReportId', 'renewableFuelTargetSummary', 'lowCarbonFuelTargetSummary', 'nonCompliancePenaltySummary', 'summaryId'],
    title: 'ComplianceReportSummaryUpdateSchema'
} as const;

export const ComplianceReportUpdateSchemaSchema = {
    properties: {
        status: {
            type: 'string',
            title: 'Status'
        },
        supplementalNote: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Supplementalnote'
        }
    },
    type: 'object',
    required: ['status'],
    title: 'ComplianceReportUpdateSchema'
} as const;

export const ComplianceReportUserSchemaSchema = {
    properties: {
        firstName: {
            type: 'string',
            title: 'Firstname'
        },
        lastName: {
            type: 'string',
            title: 'Lastname'
        },
        organization: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ComplianceReportOrganizationSchema'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['firstName', 'lastName'],
    title: 'ComplianceReportUserSchema'
} as const;

export const DeleteAllocationAgreementResponseSchemaSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'DeleteAllocationAgreementResponseSchema'
} as const;

export const DeleteFinalSupplyEquipmentResponseSchemaSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'DeleteFinalSupplyEquipmentResponseSchema'
} as const;

export const DeleteFuelCodeResponseSchemaSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'DeleteFuelCodeResponseSchema'
} as const;

export const DeleteFuelExportResponseSchemaSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success', 'message'],
    title: 'DeleteFuelExportResponseSchema'
} as const;

export const DeleteFuelSupplyResponseSchemaSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success', 'message'],
    title: 'DeleteFuelSupplyResponseSchema'
} as const;

export const DeleteNotionalTransferResponseSchemaSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'DeleteNotionalTransferResponseSchema'
} as const;

export const DeleteOtherUsesResponseSchemaSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'DeleteOtherUsesResponseSchema'
} as const;

export const DirectorReviewCountsSchemaSchema = {
    properties: {
        transfers: {
            type: 'integer',
            title: 'Transfers'
        },
        complianceReports: {
            type: 'integer',
            title: 'Compliancereports'
        },
        initiativeAgreements: {
            type: 'integer',
            title: 'Initiativeagreements'
        },
        adminAdjustments: {
            type: 'integer',
            title: 'Adminadjustments'
        }
    },
    type: 'object',
    required: ['transfers', 'complianceReports', 'initiativeAgreements', 'adminAdjustments'],
    title: 'DirectorReviewCountsSchema'
} as const;

export const EndUseTypeSchemaSchema = {
    properties: {
        endUseTypeId: {
            type: 'integer',
            title: 'Endusetypeid'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        subType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Subtype'
        }
    },
    type: 'object',
    required: ['endUseTypeId', 'type'],
    title: 'EndUseTypeSchema'
} as const;

export const EndUserTypeSchemaSchema = {
    properties: {
        endUserTypeId: {
            type: 'integer',
            title: 'Endusertypeid'
        },
        typeName: {
            type: 'string',
            title: 'Typename'
        }
    },
    type: 'object',
    required: ['endUserTypeId', 'typeName'],
    title: 'EndUserTypeSchema'
} as const;

export const EnergyDensitySchemaSchema = {
    properties: {
        energyDensityId: {
            type: 'integer',
            title: 'Energydensityid'
        },
        energyDensity: {
            type: 'number',
            title: 'Energydensity'
        },
        unit: {
            '$ref': '#/components/schemas/UnitOfMeasureSchema'
        }
    },
    type: 'object',
    required: ['energyDensityId', 'energyDensity', 'unit'],
    title: 'EnergyDensitySchema'
} as const;

export const EntityResponseSchema = {
    properties: {
        status: {
            type: 'integer',
            title: 'Status'
        },
        message: {
            type: 'string',
            title: 'Message'
        },
        error: {
            type: 'object',
            title: 'Error',
            default: {}
        },
        total: {
            type: 'integer',
            title: 'Total',
            default: 0
        },
        size: {
            type: 'integer',
            title: 'Size',
            default: 10
        },
        page: {
            type: 'integer',
            title: 'Page',
            default: 1
        },
        total_pages: {
            type: 'integer',
            title: 'Total Pages',
            default: 1
        },
        data: {
            title: 'Data',
            default: {}
        }
    },
    type: 'object',
    required: ['status', 'message'],
    title: 'EntityResponse',
    deprecated: true,
    example: {
        data: [],
        error: {},
        message: 'Success',
        page: 1,
        size: 10,
        status: 200,
        total: 0,
        total_pages: 1
    }
} as const;

export const EntityTypeEnumSchema = {
    type: 'string',
    enum: ['Transfer', 'initiativeAgreement', 'administrativeAdjustment', 'Assessment', 'complianceReport'],
    title: 'EntityTypeEnum'
} as const;

export const ExpectedUseTypeSchemaSchema = {
    properties: {
        expectedUseTypeId: {
            type: 'integer',
            title: 'Expectedusetypeid'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['expectedUseTypeId', 'name'],
    title: 'ExpectedUseTypeSchema'
} as const;

export const FPLocationsSchemaSchema = {
    properties: {
        fuelProductionFacilityCity: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelproductionfacilitycity'
        },
        fuelProductionFacilityProvinceState: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelproductionfacilityprovincestate'
        },
        fuelProductionFacilityCountry: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelproductionfacilitycountry'
        }
    },
    type: 'object',
    title: 'FPLocationsSchema'
} as const;

export const FSEOptionsSchemaSchema = {
    properties: {
        intendedUseTypes: {
            items: {
                '$ref': '#/components/schemas/EndUseTypeSchema'
            },
            type: 'array',
            title: 'Intendedusetypes'
        },
        fuelMeasurementTypes: {
            items: {
                '$ref': '#/components/schemas/FuelMeasurementTypeSchema'
            },
            type: 'array',
            title: 'Fuelmeasurementtypes'
        },
        levelsOfEquipment: {
            items: {
                '$ref': '#/components/schemas/LevelOfEquipmentSchema'
            },
            type: 'array',
            title: 'Levelsofequipment'
        },
        intendedUserTypes: {
            items: {
                '$ref': '#/components/schemas/EndUserTypeSchema'
            },
            type: 'array',
            title: 'Intendedusertypes'
        },
        ports: {
            items: {
                '$ref': '#/components/schemas/PortsEnum'
            },
            type: 'array',
            title: 'Ports'
        }
    },
    type: 'object',
    required: ['intendedUseTypes', 'fuelMeasurementTypes', 'levelsOfEquipment', 'intendedUserTypes', 'ports'],
    title: 'FSEOptionsSchema'
} as const;

export const FeedstockFuelTransportModeSchemaSchema = {
    properties: {
        feedstockFuelTransportModeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedstockfueltransportmodeid'
        },
        fuelCodeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodeid'
        },
        transportModeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transportmodeid'
        },
        feedstockFuelTransportMode: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TransportModeSchema'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'FeedstockFuelTransportModeSchema'
} as const;

export const FieldOptionsSchema = {
    properties: {
        company: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Company'
        },
        feedstock: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Feedstock'
        },
        feedstockLocation: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Feedstocklocation'
        },
        feedstockMisc: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Feedstockmisc'
        },
        formerCompany: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Formercompany'
        },
        contactName: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Contactname'
        },
        contactEmail: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Contactemail'
        }
    },
    type: 'object',
    required: ['company', 'feedstock', 'feedstockLocation', 'feedstockMisc', 'formerCompany', 'contactName', 'contactEmail'],
    title: 'FieldOptions'
} as const;

export const FileResponseSchemaSchema = {
    properties: {
        documentId: {
            type: 'integer',
            title: 'Documentid'
        },
        fileName: {
            type: 'string',
            title: 'Filename'
        },
        fileSize: {
            type: 'integer',
            title: 'Filesize'
        }
    },
    type: 'object',
    required: ['documentId', 'fileName', 'fileSize'],
    title: 'FileResponseSchema'
} as const;

export const FilterModelSchema = {
    properties: {
        filterType: {
            type: 'string',
            title: 'Filtertype'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        filter: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Filter'
        },
        field: {
            type: 'string',
            title: 'Field'
        },
        dateFrom: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Datefrom'
        },
        dateTo: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Dateto'
        }
    },
    type: 'object',
    title: 'FilterModel'
} as const;

export const FinalSupplyEquipmentCreateSchemaSchema = {
    properties: {
        finalSupplyEquipmentId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Finalsupplyequipmentid'
        },
        complianceReportId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Compliancereportid'
        },
        supplyFromDate: {
            type: 'string',
            format: 'date',
            title: 'Supplyfromdate'
        },
        supplyToDate: {
            type: 'string',
            format: 'date',
            title: 'Supplytodate'
        },
        kwhUsage: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Kwhusage'
        },
        serialNbr: {
            type: 'string',
            title: 'Serialnbr'
        },
        manufacturer: {
            type: 'string',
            title: 'Manufacturer'
        },
        model: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model'
        },
        levelOfEquipment: {
            type: 'string',
            title: 'Levelofequipment'
        },
        ports: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PortsEnum'
                },
                {
                    type: 'null'
                }
            ]
        },
        fuelMeasurementType: {
            type: 'string',
            title: 'Fuelmeasurementtype'
        },
        intendedUses: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Intendeduses'
        },
        intendedUsers: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Intendedusers'
        },
        streetAddress: {
            type: 'string',
            title: 'Streetaddress'
        },
        city: {
            type: 'string',
            title: 'City'
        },
        postalCode: {
            type: 'string',
            pattern: '^[A-Za-z]\\d[A-Za-z] \\d[A-Za-z]\\d$',
            title: 'Postalcode'
        },
        latitude: {
            type: 'number',
            title: 'Latitude'
        },
        longitude: {
            type: 'number',
            title: 'Longitude'
        },
        notes: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notes'
        },
        deleted: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deleted'
        }
    },
    type: 'object',
    required: ['supplyFromDate', 'supplyToDate', 'serialNbr', 'manufacturer', 'levelOfEquipment', 'fuelMeasurementType', 'intendedUses', 'intendedUsers', 'streetAddress', 'city', 'postalCode', 'latitude', 'longitude'],
    title: 'FinalSupplyEquipmentCreateSchema'
} as const;

export const FinalSupplyEquipmentSchemaSchema = {
    properties: {
        finalSupplyEquipmentId: {
            type: 'integer',
            title: 'Finalsupplyequipmentid'
        },
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        supplyFromDate: {
            type: 'string',
            format: 'date',
            title: 'Supplyfromdate'
        },
        supplyToDate: {
            type: 'string',
            format: 'date',
            title: 'Supplytodate'
        },
        registrationNbr: {
            type: 'string',
            title: 'Registrationnbr'
        },
        kwhUsage: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Kwhusage'
        },
        serialNbr: {
            type: 'string',
            title: 'Serialnbr'
        },
        manufacturer: {
            type: 'string',
            title: 'Manufacturer'
        },
        model: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model'
        },
        levelOfEquipment: {
            '$ref': '#/components/schemas/LevelOfEquipmentSchema'
        },
        fuelMeasurementType: {
            '$ref': '#/components/schemas/FuelMeasurementTypeSchema'
        },
        ports: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PortsEnum'
                },
                {
                    type: 'null'
                }
            ]
        },
        intendedUseTypes: {
            items: {
                '$ref': '#/components/schemas/EndUseTypeSchema'
            },
            type: 'array',
            title: 'Intendedusetypes'
        },
        intendedUserTypes: {
            items: {
                '$ref': '#/components/schemas/EndUserTypeSchema'
            },
            type: 'array',
            title: 'Intendedusertypes'
        },
        streetAddress: {
            type: 'string',
            title: 'Streetaddress'
        },
        city: {
            type: 'string',
            title: 'City'
        },
        postalCode: {
            type: 'string',
            title: 'Postalcode'
        },
        latitude: {
            type: 'number',
            title: 'Latitude'
        },
        longitude: {
            type: 'number',
            title: 'Longitude'
        },
        notes: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notes'
        }
    },
    type: 'object',
    required: ['finalSupplyEquipmentId', 'complianceReportId', 'supplyFromDate', 'supplyToDate', 'registrationNbr', 'serialNbr', 'manufacturer', 'levelOfEquipment', 'fuelMeasurementType', 'intendedUseTypes', 'intendedUserTypes', 'streetAddress', 'city', 'postalCode', 'latitude', 'longitude'],
    title: 'FinalSupplyEquipmentSchema'
} as const;

export const FinalSupplyEquipmentsSchemaSchema = {
    properties: {
        finalSupplyEquipments: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FinalSupplyEquipmentSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Finalsupplyequipments',
            default: []
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationResponseSchema'
                },
                {
                    type: 'null'
                }
            ],
            default: {}
        }
    },
    type: 'object',
    title: 'FinalSupplyEquipmentsSchema'
} as const;

export const FinishedFuelTransportModeSchemaSchema = {
    properties: {
        finishedFuelTransportModeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Finishedfueltransportmodeid'
        },
        fuelCodeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodeid'
        },
        transportModeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transportmodeid'
        },
        finishedFuelTransportMode: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TransportModeSchema'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'FinishedFuelTransportModeSchema'
} as const;

export const FuelCategoryResponseSchemaSchema = {
    properties: {
        fuelCategoryId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcategoryid'
        },
        category: {
            type: 'string',
            title: 'Category'
        }
    },
    type: 'object',
    required: ['category'],
    title: 'FuelCategoryResponseSchema'
} as const;

export const FuelCodeCloneSchemaSchema = {
    properties: {
        fuelCodeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodeid'
        },
        fuelStatusId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelstatusid'
        },
        prefixId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Prefixid'
        },
        fuelSuffix: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelsuffix'
        },
        company: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Company'
        },
        contactName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Contactname'
        },
        contactEmail: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Contactemail'
        },
        carbonIntensity: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Carbonintensity'
        },
        edrms: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Edrms'
        },
        lastUpdated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lastupdated'
        },
        applicationDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Applicationdate'
        },
        approvalDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Approvaldate'
        },
        effectiveDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Effectivedate'
        },
        expirationDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expirationdate'
        },
        fuelTypeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fueltypeid'
        },
        feedstock: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedstock'
        },
        feedstockLocation: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedstocklocation'
        },
        feedstockMisc: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedstockmisc'
        },
        fuelProductionFacilityCity: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelproductionfacilitycity'
        },
        fuelProductionFacilityProvinceState: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelproductionfacilityprovincestate'
        },
        fuelProductionFacilityCountry: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelproductionfacilitycountry'
        },
        facilityNameplateCapacity: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Facilitynameplatecapacity'
        },
        facilityNameplateCapacityUnit: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FuelTypeQuantityUnitsEnumSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        formerCompany: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Formercompany'
        },
        notes: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notes'
        },
        fuelCodeStatus: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/lcfs__web__api__fuel_code__schema__FuelCodeStatusSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        fuelCodePrefix: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FuelCodePrefixSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        fuelCodeType: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/lcfs__web__api__fuel_code__schema__FuelTypeSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        feedstockFuelTransportModes: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FeedstockFuelTransportModeSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedstockfueltransportmodes'
        },
        finishedFuelTransportModes: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FinishedFuelTransportModeSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Finishedfueltransportmodes'
        }
    },
    type: 'object',
    title: 'FuelCodeCloneSchema'
} as const;

export const FuelCodeCreateSchemaSchema = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        fuelCodeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodeid'
        },
        status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Status'
        },
        prefix: {
            type: 'string',
            title: 'Prefix'
        },
        prefixId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Prefixid'
        },
        fuelSuffix: {
            type: 'string',
            title: 'Fuelsuffix'
        },
        carbonIntensity: {
            type: 'number',
            title: 'Carbonintensity'
        },
        edrms: {
            type: 'string',
            title: 'Edrms'
        },
        company: {
            type: 'string',
            title: 'Company'
        },
        lastUpdated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lastupdated'
        },
        contactName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Contactname'
        },
        contactEmail: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Contactemail'
        },
        applicationDate: {
            type: 'string',
            format: 'date',
            title: 'Applicationdate'
        },
        approvalDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Approvaldate'
        },
        effectiveDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Effectivedate'
        },
        expirationDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expirationdate'
        },
        fuel: {
            type: 'string',
            title: 'Fuel'
        },
        fuelTypeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fueltypeid'
        },
        feedstock: {
            type: 'string',
            title: 'Feedstock'
        },
        feedstockLocation: {
            type: 'string',
            title: 'Feedstocklocation'
        },
        feedstockMisc: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedstockmisc'
        },
        fuelProductionFacilityCity: {
            type: 'string',
            title: 'Fuelproductionfacilitycity'
        },
        fuelProductionFacilityProvinceState: {
            type: 'string',
            title: 'Fuelproductionfacilityprovincestate'
        },
        fuelProductionFacilityCountry: {
            type: 'string',
            title: 'Fuelproductionfacilitycountry'
        },
        facilityNameplateCapacity: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Facilitynameplatecapacity'
        },
        facilityNameplateCapacityUnit: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FuelTypeQuantityUnitsEnumSchema'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Facilitynameplatecapacityunit'
        },
        feedstockFuelTransportMode: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedstockfueltransportmode'
        },
        finishedFuelTransportMode: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Finishedfueltransportmode'
        },
        feedstockFuelTransportModes: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FeedstockFuelTransportModeSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedstockfueltransportmodes'
        },
        finishedFuelTransportModes: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FinishedFuelTransportModeSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Finishedfueltransportmodes'
        },
        formerCompany: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Formercompany'
        },
        notes: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notes'
        },
        isValid: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Isvalid',
            default: false
        },
        validationMsg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Validationmsg'
        },
        deleted: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deleted'
        }
    },
    type: 'object',
    required: ['prefix', 'fuelSuffix', 'carbonIntensity', 'edrms', 'company', 'applicationDate', 'fuel', 'feedstock', 'feedstockLocation', 'fuelProductionFacilityCity', 'fuelProductionFacilityProvinceState', 'fuelProductionFacilityCountry'],
    title: 'FuelCodeCreateSchema'
} as const;

export const FuelCodePrefixSchemaSchema = {
    properties: {
        fuelCodePrefixId: {
            type: 'integer',
            title: 'Fuelcodeprefixid'
        },
        nextFuelCode: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nextfuelcode'
        },
        prefix: {
            type: 'string',
            title: 'Prefix'
        }
    },
    type: 'object',
    required: ['fuelCodePrefixId', 'prefix'],
    title: 'FuelCodePrefixSchema'
} as const;

export const FuelCodeStatusEnumSchemaSchema = {
    type: 'string',
    enum: ['Draft', 'Approved', 'Deleted'],
    title: 'FuelCodeStatusEnumSchema'
} as const;

export const FuelCodesSchemaSchema = {
    properties: {
        fuelCodes: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__fuel_code__schema__FuelCodeSchema'
            },
            type: 'array',
            title: 'Fuelcodes'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationResponseSchema'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['fuelCodes'],
    title: 'FuelCodesSchema'
} as const;

export const FuelExportCreateUpdateSchemaSchema = {
    properties: {
        fuelExportId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelexportid'
        },
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        groupUuid: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Groupuuid'
        },
        version: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version'
        },
        userType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Usertype'
        },
        actionType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Actiontype'
        },
        compliancePeriod: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Complianceperiod'
        },
        fuelTypeOther: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fueltypeother'
        },
        fuelTypeId: {
            type: 'integer',
            title: 'Fueltypeid'
        },
        fuelCategoryId: {
            type: 'integer',
            title: 'Fuelcategoryid'
        },
        endUseId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Enduseid'
        },
        provisionOfTheActId: {
            type: 'integer',
            title: 'Provisionoftheactid'
        },
        fuelCodeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodeid'
        },
        quantity: {
            type: 'integer',
            exclusiveMinimum: 0,
            title: 'Quantity'
        },
        units: {
            type: 'string',
            title: 'Units'
        },
        exportDate: {
            type: 'string',
            format: 'date',
            title: 'Exportdate'
        },
        complianceUnits: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Complianceunits',
            default: 0
        },
        targetCi: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Targetci',
            default: 0
        },
        ciOfFuel: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cioffuel',
            default: 0
        },
        energyDensity: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Energydensity',
            default: 0
        },
        eer: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eer',
            default: 0
        },
        energy: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Energy',
            default: 0
        },
        deleted: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deleted'
        }
    },
    type: 'object',
    required: ['complianceReportId', 'fuelTypeId', 'fuelCategoryId', 'provisionOfTheActId', 'quantity', 'units', 'exportDate'],
    title: 'FuelExportCreateUpdateSchema'
} as const;

export const FuelExportSchemaSchema = {
    properties: {
        fuelExportId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelexportid'
        },
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        groupUuid: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Groupuuid'
        },
        version: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version'
        },
        userType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Usertype'
        },
        actionType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Actiontype'
        },
        compliancePeriod: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Complianceperiod'
        },
        fuelTypeId: {
            type: 'integer',
            title: 'Fueltypeid'
        },
        fuelType: {
            '$ref': '#/components/schemas/lcfs__web__api__fuel_export__schema__FuelTypeSchema'
        },
        fuelTypeOther: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fueltypeother'
        },
        quantity: {
            type: 'integer',
            exclusiveMinimum: 0,
            title: 'Quantity'
        },
        units: {
            type: 'string',
            title: 'Units'
        },
        exportDate: {
            type: 'string',
            format: 'date',
            title: 'Exportdate'
        },
        complianceUnits: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Complianceunits',
            default: 0
        },
        targetCi: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Targetci'
        },
        ciOfFuel: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cioffuel'
        },
        energyDensity: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Energydensity'
        },
        eer: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eer'
        },
        energy: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Energy'
        },
        fuelCategoryId: {
            type: 'integer',
            title: 'Fuelcategoryid'
        },
        fuelCategory: {
            '$ref': '#/components/schemas/FuelCategoryResponseSchema'
        },
        fuelCodeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodeid'
        },
        fuelCode: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/lcfs__web__api__fuel_export__schema__FuelCodeResponseSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        provisionOfTheActId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provisionoftheactid'
        },
        provisionOfTheAct: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProvisionOfTheActSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        endUseId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Enduseid'
        },
        endUseType: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EndUseTypeSchema'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['complianceReportId', 'fuelTypeId', 'fuelType', 'quantity', 'units', 'exportDate', 'fuelCategoryId', 'fuelCategory'],
    title: 'FuelExportSchema'
} as const;

export const FuelExportsSchemaSchema = {
    properties: {
        fuelExports: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FuelExportSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelexports',
            default: []
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationResponseSchema'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'FuelExportsSchema'
} as const;

export const FuelMeasurementTypeSchemaSchema = {
    properties: {
        fuelMeasurementTypeId: {
            type: 'integer',
            title: 'Fuelmeasurementtypeid'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        displayOrder: {
            type: 'integer',
            title: 'Displayorder'
        }
    },
    type: 'object',
    required: ['fuelMeasurementTypeId', 'type', 'displayOrder'],
    title: 'FuelMeasurementTypeSchema'
} as const;

export const FuelSuppliesSchemaSchema = {
    properties: {
        fuelSupplies: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FuelSupplyResponseSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelsupplies',
            default: []
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationResponseSchema'
                },
                {
                    type: 'null'
                }
            ],
            default: {}
        }
    },
    type: 'object',
    title: 'FuelSuppliesSchema'
} as const;

export const FuelSupplyCreateUpdateSchemaSchema = {
    properties: {
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        fuelSupplyId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelsupplyid'
        },
        groupUuid: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Groupuuid'
        },
        version: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version'
        },
        compliancePeriod: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Complianceperiod'
        },
        fuelTypeId: {
            type: 'integer',
            title: 'Fueltypeid'
        },
        fuelCategoryId: {
            type: 'integer',
            title: 'Fuelcategoryid'
        },
        endUseId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Enduseid'
        },
        provisionOfTheActId: {
            type: 'integer',
            title: 'Provisionoftheactid'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity'
        },
        units: {
            type: 'string',
            title: 'Units'
        },
        fuelTypeOther: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fueltypeother'
        },
        fuelCodeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodeid'
        },
        targetCi: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Targetci'
        },
        ciOfFuel: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cioffuel'
        },
        energyDensity: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Energydensity'
        },
        eer: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eer'
        },
        energy: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Energy'
        },
        deleted: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deleted'
        }
    },
    type: 'object',
    required: ['complianceReportId', 'fuelTypeId', 'fuelCategoryId', 'provisionOfTheActId', 'quantity', 'units'],
    title: 'FuelSupplyCreateUpdateSchema'
} as const;

export const FuelSupplyResponseSchemaSchema = {
    properties: {
        fuelSupplyId: {
            type: 'integer',
            title: 'Fuelsupplyid'
        },
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        groupUuid: {
            type: 'string',
            title: 'Groupuuid'
        },
        version: {
            type: 'integer',
            title: 'Version'
        },
        userType: {
            type: 'string',
            title: 'Usertype'
        },
        actionType: {
            type: 'string',
            title: 'Actiontype'
        },
        fuelTypeId: {
            type: 'integer',
            title: 'Fueltypeid'
        },
        fuelType: {
            '$ref': '#/components/schemas/lcfs__web__api__fuel_supply__schema__FuelTypeSchema'
        },
        compliancePeriod: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Complianceperiod'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity'
        },
        units: {
            type: 'string',
            title: 'Units'
        },
        complianceUnits: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Complianceunits'
        },
        targetCi: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Targetci'
        },
        ciOfFuel: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cioffuel'
        },
        energyDensity: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Energydensity'
        },
        eer: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eer'
        },
        energy: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Energy'
        },
        fuelCategoryId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcategoryid'
        },
        fuelCategory: {
            '$ref': '#/components/schemas/FuelCategoryResponseSchema'
        },
        fuelCodeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodeid'
        },
        fuelCode: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/lcfs__web__api__fuel_supply__schema__FuelCodeResponseSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        provisionOfTheActId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provisionoftheactid'
        },
        provisionOfTheAct: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProvisionOfTheActSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        endUseId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Enduseid'
        },
        endUseType: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EndUseTypeSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        fuelTypeOther: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fueltypeother'
        }
    },
    type: 'object',
    required: ['fuelSupplyId', 'complianceReportId', 'groupUuid', 'version', 'userType', 'actionType', 'fuelTypeId', 'fuelType', 'quantity', 'units', 'fuelCategory'],
    title: 'FuelSupplyResponseSchema'
} as const;

export const FuelTypeQuantityUnitsEnumSchemaSchema = {
    type: 'string',
    enum: ['L', 'kg', 'kWh', 'm3'],
    title: 'FuelTypeQuantityUnitsEnumSchema'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const HistoryUserSchemaSchema = {
    properties: {
        firstName: {
            type: 'string',
            title: 'Firstname'
        },
        lastName: {
            type: 'string',
            title: 'Lastname'
        }
    },
    type: 'object',
    required: ['firstName', 'lastName'],
    title: 'HistoryUserSchema'
} as const;

export const InitiativeAgreementCreateSchemaSchema = {
    properties: {
        complianceUnits: {
            type: 'integer',
            title: 'Complianceunits'
        },
        currentStatus: {
            type: 'string',
            title: 'Currentstatus'
        },
        transactionEffectiveDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transactioneffectivedate'
        },
        toOrganizationId: {
            type: 'integer',
            title: 'Toorganizationid'
        },
        govComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Govcomment'
        },
        internalComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Internalcomment'
        }
    },
    type: 'object',
    required: ['complianceUnits', 'currentStatus', 'toOrganizationId'],
    title: 'InitiativeAgreementCreateSchema'
} as const;

export const InitiativeAgreementHistorySchemaSchema = {
    properties: {
        createDate: {
            type: 'string',
            format: 'date-time',
            title: 'Createdate'
        },
        initiativeAgreementStatus: {
            '$ref': '#/components/schemas/InitiativeAgreementStatusSchema'
        },
        userProfile: {
            '$ref': '#/components/schemas/HistoryUserSchema'
        }
    },
    type: 'object',
    required: ['createDate', 'initiativeAgreementStatus', 'userProfile'],
    title: 'InitiativeAgreementHistorySchema'
} as const;

export const InitiativeAgreementSchemaSchema = {
    properties: {
        complianceUnits: {
            type: 'integer',
            title: 'Complianceunits'
        },
        currentStatus: {
            '$ref': '#/components/schemas/InitiativeAgreementStatusSchema'
        },
        transactionEffectiveDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transactioneffectivedate'
        },
        toOrganizationId: {
            type: 'integer',
            title: 'Toorganizationid'
        },
        govComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Govcomment'
        },
        internalComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Internalcomment'
        },
        initiativeAgreementId: {
            type: 'integer',
            title: 'Initiativeagreementid'
        },
        toOrganization: {
            '$ref': '#/components/schemas/lcfs__web__api__initiative_agreement__schema__OrganizationSchema'
        },
        history: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/InitiativeAgreementHistorySchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'History'
        },
        returned: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Returned',
            default: false
        },
        createDate: {
            type: 'string',
            format: 'date-time',
            title: 'Createdate'
        }
    },
    type: 'object',
    required: ['complianceUnits', 'currentStatus', 'toOrganizationId', 'initiativeAgreementId', 'toOrganization', 'history', 'createDate'],
    title: 'InitiativeAgreementSchema'
} as const;

export const InitiativeAgreementStatusSchemaSchema = {
    properties: {
        initiativeAgreementStatusId: {
            type: 'integer',
            title: 'Initiativeagreementstatusid'
        },
        status: {
            type: 'string',
            title: 'Status'
        }
    },
    type: 'object',
    required: ['initiativeAgreementStatusId', 'status'],
    title: 'InitiativeAgreementStatusSchema'
} as const;

export const InitiativeAgreementUpdateSchemaSchema = {
    properties: {
        complianceUnits: {
            type: 'integer',
            title: 'Complianceunits'
        },
        currentStatus: {
            type: 'string',
            title: 'Currentstatus'
        },
        transactionEffectiveDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transactioneffectivedate'
        },
        toOrganizationId: {
            type: 'integer',
            title: 'Toorganizationid'
        },
        govComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Govcomment'
        },
        internalComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Internalcomment'
        },
        initiativeAgreementId: {
            type: 'integer',
            title: 'Initiativeagreementid'
        }
    },
    type: 'object',
    required: ['complianceUnits', 'currentStatus', 'toOrganizationId', 'initiativeAgreementId'],
    title: 'InitiativeAgreementUpdateSchema'
} as const;

export const InternalCommentCreateSchemaSchema = {
    properties: {
        entityType: {
            '$ref': '#/components/schemas/EntityTypeEnum'
        },
        entityId: {
            type: 'integer',
            title: 'Entityid'
        },
        comment: {
            type: 'string',
            title: 'Comment'
        },
        audienceScope: {
            '$ref': '#/components/schemas/AudienceScopeEnum'
        }
    },
    type: 'object',
    required: ['entityType', 'entityId', 'comment', 'audienceScope'],
    title: 'InternalCommentCreateSchema'
} as const;

export const InternalCommentResponseSchemaSchema = {
    properties: {
        internalCommentId: {
            type: 'integer',
            title: 'Internalcommentid'
        },
        comment: {
            type: 'string',
            title: 'Comment'
        },
        audienceScope: {
            '$ref': '#/components/schemas/AudienceScopeEnum'
        },
        createUser: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createuser'
        },
        createDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createdate'
        },
        updateDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedate'
        },
        fullName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fullname'
        }
    },
    type: 'object',
    required: ['internalCommentId', 'comment', 'audienceScope'],
    title: 'InternalCommentResponseSchema'
} as const;

export const InternalCommentUpdateSchemaSchema = {
    properties: {
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        }
    },
    type: 'object',
    title: 'InternalCommentUpdateSchema'
} as const;

export const LevelOfEquipmentSchemaSchema = {
    properties: {
        levelOfEquipmentId: {
            type: 'integer',
            title: 'Levelofequipmentid'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        displayOrder: {
            type: 'integer',
            title: 'Displayorder'
        }
    },
    type: 'object',
    required: ['levelOfEquipmentId', 'name', 'displayOrder'],
    title: 'LevelOfEquipmentSchema'
} as const;

export const MessageSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'Message',
    description: 'Simple message model.'
} as const;

export const NotificationChannelSubscriptionRequestSchema = {
    properties: {
        isEnabled: {
            type: 'boolean',
            title: 'Isenabled'
        },
        channelId: {
            type: 'integer',
            title: 'Channelid'
        },
        notificationTypeId: {
            type: 'integer',
            title: 'Notificationtypeid'
        }
    },
    type: 'object',
    required: ['isEnabled', 'channelId', 'notificationTypeId'],
    title: 'NotificationChannelSubscriptionRequest'
} as const;

export const NotificationMessageRequestSchema = {
    properties: {
        isRead: {
            type: 'boolean',
            title: 'Isread'
        },
        isArchived: {
            type: 'boolean',
            title: 'Isarchived'
        }
    },
    type: 'object',
    required: ['isRead', 'isArchived'],
    title: 'NotificationMessageRequest'
} as const;

export const NotionalTransferCreateSchemaSchema = {
    properties: {
        legalName: {
            type: 'string',
            title: 'Legalname'
        },
        addressForService: {
            type: 'string',
            title: 'Addressforservice'
        },
        fuelCategory: {
            type: 'string',
            title: 'Fuelcategory'
        },
        receivedOrTransferred: {
            '$ref': '#/components/schemas/ReceivedOrTransferredEnumSchema'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity'
        },
        notionalTransferId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notionaltransferid'
        },
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        deleted: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deleted'
        }
    },
    type: 'object',
    required: ['legalName', 'addressForService', 'fuelCategory', 'receivedOrTransferred', 'quantity', 'complianceReportId'],
    title: 'NotionalTransferCreateSchema'
} as const;

export const NotionalTransferFuelCategorySchemaSchema = {
    properties: {
        fuelCategoryId: {
            type: 'integer',
            title: 'Fuelcategoryid'
        },
        category: {
            type: 'string',
            title: 'Category'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['fuelCategoryId', 'category'],
    title: 'NotionalTransferFuelCategorySchema'
} as const;

export const NotionalTransferSchemaSchema = {
    properties: {
        legalName: {
            type: 'string',
            title: 'Legalname'
        },
        addressForService: {
            type: 'string',
            title: 'Addressforservice'
        },
        fuelCategory: {
            type: 'string',
            title: 'Fuelcategory'
        },
        receivedOrTransferred: {
            '$ref': '#/components/schemas/ReceivedOrTransferredEnumSchema'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity'
        },
        notionalTransferId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notionaltransferid'
        },
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        deleted: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deleted'
        }
    },
    type: 'object',
    required: ['legalName', 'addressForService', 'fuelCategory', 'receivedOrTransferred', 'quantity', 'complianceReportId'],
    title: 'NotionalTransferSchema'
} as const;

export const NotionalTransferTableOptionsSchemaSchema = {
    properties: {
        fuelCategories: {
            items: {
                '$ref': '#/components/schemas/NotionalTransferFuelCategorySchema'
            },
            type: 'array',
            title: 'Fuelcategories'
        },
        receivedOrTransferred: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Receivedortransferred'
        }
    },
    type: 'object',
    required: ['fuelCategories', 'receivedOrTransferred'],
    title: 'NotionalTransferTableOptionsSchema'
} as const;

export const NotionalTransfersAllSchemaSchema = {
    items: {
        '$ref': '#/components/schemas/NotionalTransferSchema'
    },
    type: 'array',
    title: 'NotionalTransfersAllSchema'
} as const;

export const NotionalTransfersSchemaSchema = {
    properties: {
        notionalTransfers: {
            items: {
                '$ref': '#/components/schemas/NotionalTransferSchema'
            },
            type: 'array',
            title: 'Notionaltransfers'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationResponseSchema'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['notionalTransfers'],
    title: 'NotionalTransfersSchema'
} as const;

export const OrgComplianceReportCountsSchemaSchema = {
    properties: {
        inProgress: {
            type: 'integer',
            title: 'Inprogress'
        },
        awaitingGovReview: {
            type: 'integer',
            title: 'Awaitinggovreview'
        }
    },
    type: 'object',
    required: ['inProgress', 'awaitingGovReview'],
    title: 'OrgComplianceReportCountsSchema'
} as const;

export const OrganizarionTransactionCountsSchemaSchema = {
    properties: {
        transfers: {
            type: 'integer',
            title: 'Transfers'
        }
    },
    type: 'object',
    required: ['transfers'],
    title: 'OrganizarionTransactionCountsSchema'
} as const;

export const OrganizationAddressCreateSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        streetAddress: {
            type: 'string',
            title: 'Streetaddress'
        },
        addressOther: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Addressother'
        },
        city: {
            type: 'string',
            title: 'City'
        },
        provinceState: {
            type: 'string',
            title: 'Provincestate'
        },
        country: {
            type: 'string',
            title: 'Country'
        },
        postalcodeZipcode: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Postalcodezipcode'
        }
    },
    type: 'object',
    required: ['name', 'streetAddress', 'city', 'provinceState', 'country'],
    title: 'OrganizationAddressCreateSchema'
} as const;

export const OrganizationAddressSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        streetAddress: {
            type: 'string',
            title: 'Streetaddress'
        },
        addressOther: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Addressother'
        },
        city: {
            type: 'string',
            title: 'City'
        },
        provinceState: {
            type: 'string',
            title: 'Provincestate'
        },
        country: {
            type: 'string',
            title: 'Country'
        },
        postalcodeZipcode: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Postalcodezipcode'
        },
        organizationId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Organizationid'
        }
    },
    type: 'object',
    required: ['name', 'streetAddress', 'city', 'provinceState', 'country'],
    title: 'OrganizationAddressSchema'
} as const;

export const OrganizationAttorneyAddressCreateSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        streetAddress: {
            type: 'string',
            title: 'Streetaddress'
        },
        addressOther: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Addressother'
        },
        city: {
            type: 'string',
            title: 'City'
        },
        provinceState: {
            type: 'string',
            title: 'Provincestate'
        },
        country: {
            type: 'string',
            title: 'Country'
        },
        postalcodeZipcode: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Postalcodezipcode'
        }
    },
    type: 'object',
    required: ['name', 'streetAddress', 'city', 'provinceState', 'country'],
    title: 'OrganizationAttorneyAddressCreateSchema'
} as const;

export const OrganizationAttorneyAddressSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        streetAddress: {
            type: 'string',
            title: 'Streetaddress'
        },
        addressOther: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Addressother'
        },
        city: {
            type: 'string',
            title: 'City'
        },
        provinceState: {
            type: 'string',
            title: 'Provincestate'
        },
        country: {
            type: 'string',
            title: 'Country'
        },
        postalcodeZipcode: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Postalcodezipcode'
        },
        organizationId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Organizationid'
        }
    },
    type: 'object',
    required: ['name', 'streetAddress', 'city', 'provinceState', 'country'],
    title: 'OrganizationAttorneyAddressSchema'
} as const;

export const OrganizationBalanceResponseSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        registered: {
            type: 'boolean',
            title: 'Registered'
        },
        organizationId: {
            type: 'integer',
            title: 'Organizationid'
        },
        totalBalance: {
            type: 'integer',
            title: 'Totalbalance'
        },
        reservedBalance: {
            type: 'integer',
            title: 'Reservedbalance'
        }
    },
    type: 'object',
    required: ['name', 'registered', 'organizationId', 'totalBalance', 'reservedBalance'],
    title: 'OrganizationBalanceResponseSchema'
} as const;

export const OrganizationCreateSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        operatingName: {
            type: 'string',
            title: 'Operatingname'
        },
        email: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        edrmsRecord: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Edrmsrecord'
        },
        organizationStatusId: {
            type: 'integer',
            title: 'Organizationstatusid'
        },
        organizationTypeId: {
            type: 'integer',
            title: 'Organizationtypeid'
        },
        address: {
            '$ref': '#/components/schemas/OrganizationAddressCreateSchema'
        },
        attorneyAddress: {
            '$ref': '#/components/schemas/OrganizationAttorneyAddressCreateSchema'
        }
    },
    type: 'object',
    required: ['name', 'operatingName', 'organizationStatusId', 'organizationTypeId', 'address', 'attorneyAddress'],
    title: 'OrganizationCreateSchema'
} as const;

export const OrganizationDetailsSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        address: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Address'
        },
        email: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        }
    },
    type: 'object',
    required: ['name', 'address', 'email', 'phone'],
    title: 'OrganizationDetailsSchema'
} as const;

export const OrganizationListSchemaSchema = {
    properties: {
        pagination: {
            '$ref': '#/components/schemas/PaginationResponseSchema'
        },
        organizations: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__organizations__schema__OrganizationSchema'
            },
            type: 'array',
            title: 'Organizations'
        }
    },
    type: 'object',
    required: ['pagination', 'organizations'],
    title: 'OrganizationListSchema'
} as const;

export const OrganizationResponseSchemaSchema = {
    properties: {
        organizationId: {
            type: 'integer',
            title: 'Organizationid'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        operatingName: {
            type: 'string',
            title: 'Operatingname'
        },
        email: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        edrmsRecord: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Edrmsrecord'
        },
        orgStatus: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrganizationStatusSchema'
                },
                {
                    type: 'null'
                }
            ],
            default: []
        },
        orgAddress: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrganizationAddressSchema'
                },
                {
                    type: 'null'
                }
            ],
            default: []
        },
        orgAttorneyAddress: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrganizationAttorneyAddressSchema'
                },
                {
                    type: 'null'
                }
            ],
            default: []
        }
    },
    type: 'object',
    required: ['organizationId', 'name', 'operatingName'],
    title: 'OrganizationResponseSchema'
} as const;

export const OrganizationStatusEnumSchema = {
    type: 'string',
    enum: ['Unregistered', 'Registered', 'Suspended', 'Canceled'],
    title: 'OrganizationStatusEnum'
} as const;

export const OrganizationStatusSchemaSchema = {
    properties: {
        organizationStatusId: {
            type: 'integer',
            title: 'Organizationstatusid'
        },
        status: {
            '$ref': '#/components/schemas/OrganizationStatusEnum'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['organizationStatusId', 'status'],
    title: 'OrganizationStatusSchema'
} as const;

export const OrganizationSummaryResponseSchema_InputSchema = {
    properties: {
        organizationId: {
            type: 'integer',
            title: 'Organizationid'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        operatingName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Operatingname'
        },
        totalBalance: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Totalbalance'
        },
        reservedBalance: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reservedbalance'
        },
        orgStatus: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrganizationStatusSchema'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['organizationId'],
    title: 'OrganizationSummaryResponseSchema'
} as const;

export const OrganizationSummaryResponseSchema_OutputSchema = {
    properties: {
        organizationId: {
            type: 'integer',
            title: 'Organizationid'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        operatingName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Operatingname'
        },
        totalBalance: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Totalbalance'
        },
        reservedBalance: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reservedbalance'
        },
        orgStatus: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrganizationStatusSchema'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['organizationId'],
    title: 'OrganizationSummaryResponseSchema'
} as const;

export const OrganizationTypeEnumSchema = {
    type: 'string',
    enum: ['Fuel Supplier', 'Electricity Supplier', 'Broker', 'Utilities (local or public)'],
    title: 'OrganizationTypeEnum'
} as const;

export const OrganizationTypeSchemaSchema = {
    properties: {
        organizationTypeId: {
            type: 'integer',
            title: 'Organizationtypeid'
        },
        orgType: {
            '$ref': '#/components/schemas/OrganizationTypeEnum'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['organizationTypeId', 'orgType'],
    title: 'OrganizationTypeSchema'
} as const;

export const OrganizationUpdateSchemaSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        operatingName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Operatingname'
        },
        email: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        edrmsRecord: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Edrmsrecord'
        },
        organizationStatusId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Organizationstatusid'
        },
        organizationTypeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Organizationtypeid'
        },
        address: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrganizationAddressCreateSchema'
                },
                {
                    type: 'null'
                }
            ],
            default: []
        },
        attorneyAddress: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrganizationAttorneyAddressCreateSchema'
                },
                {
                    type: 'null'
                }
            ],
            default: []
        }
    },
    type: 'object',
    title: 'OrganizationUpdateSchema'
} as const;

export const OtherUsesAllSchemaSchema = {
    properties: {
        otherUses: {
            items: {
                '$ref': '#/components/schemas/OtherUsesSchema'
            },
            type: 'array',
            title: 'Otheruses'
        }
    },
    type: 'object',
    required: ['otherUses'],
    title: 'OtherUsesAllSchema'
} as const;

export const OtherUsesCreateSchemaSchema = {
    properties: {
        otherUsesId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Otherusesid'
        },
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        quantitySupplied: {
            type: 'integer',
            title: 'Quantitysupplied'
        },
        fuelType: {
            type: 'string',
            title: 'Fueltype'
        },
        fuelCategory: {
            type: 'string',
            title: 'Fuelcategory'
        },
        expectedUse: {
            type: 'string',
            title: 'Expecteduse'
        },
        units: {
            type: 'string',
            title: 'Units'
        },
        rationale: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Rationale'
        },
        deleted: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deleted'
        },
        groupUuid: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Groupuuid'
        },
        version: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version'
        },
        userType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Usertype'
        },
        actionType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Actiontype'
        }
    },
    type: 'object',
    required: ['complianceReportId', 'quantitySupplied', 'fuelType', 'fuelCategory', 'expectedUse', 'units'],
    title: 'OtherUsesCreateSchema'
} as const;

export const OtherUsesFuelCategorySchemaSchema = {
    properties: {
        fuelCategoryId: {
            type: 'integer',
            title: 'Fuelcategoryid'
        },
        category: {
            type: 'string',
            title: 'Category'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['fuelCategoryId', 'category'],
    title: 'OtherUsesFuelCategorySchema'
} as const;

export const OtherUsesListSchemaSchema = {
    properties: {
        otherUses: {
            items: {
                '$ref': '#/components/schemas/OtherUsesSchema'
            },
            type: 'array',
            title: 'Otheruses'
        },
        pagination: {
            '$ref': '#/components/schemas/PaginationResponseSchema'
        }
    },
    type: 'object',
    required: ['otherUses', 'pagination'],
    title: 'OtherUsesListSchema'
} as const;

export const OtherUsesSchemaSchema = {
    properties: {
        otherUsesId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Otherusesid'
        },
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        quantitySupplied: {
            type: 'integer',
            title: 'Quantitysupplied'
        },
        fuelType: {
            type: 'string',
            title: 'Fueltype'
        },
        fuelCategory: {
            type: 'string',
            title: 'Fuelcategory'
        },
        expectedUse: {
            type: 'string',
            title: 'Expecteduse'
        },
        units: {
            type: 'string',
            title: 'Units'
        },
        rationale: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Rationale'
        },
        deleted: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deleted'
        },
        groupUuid: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Groupuuid'
        },
        version: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version'
        },
        userType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Usertype'
        },
        actionType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Actiontype'
        }
    },
    type: 'object',
    required: ['complianceReportId', 'quantitySupplied', 'fuelType', 'fuelCategory', 'expectedUse', 'units'],
    title: 'OtherUsesSchema'
} as const;

export const OtherUsesTableOptionsSchemaSchema = {
    properties: {
        fuelCategories: {
            items: {
                '$ref': '#/components/schemas/OtherUsesFuelCategorySchema'
            },
            type: 'array',
            title: 'Fuelcategories'
        },
        fuelTypes: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__other_uses__schema__FuelTypeSchema'
            },
            type: 'array',
            title: 'Fueltypes'
        },
        unitsOfMeasure: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Unitsofmeasure'
        },
        expectedUses: {
            items: {
                '$ref': '#/components/schemas/ExpectedUseTypeSchema'
            },
            type: 'array',
            title: 'Expecteduses'
        }
    },
    type: 'object',
    required: ['fuelCategories', 'fuelTypes', 'unitsOfMeasure', 'expectedUses'],
    title: 'OtherUsesTableOptionsSchema'
} as const;

export const PaginatedAllocationAgreementRequestSchemaSchema = {
    properties: {
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        filters: {
            items: {
                '$ref': '#/components/schemas/FilterModel'
            },
            type: 'array',
            title: 'Filters'
        },
        page: {
            type: 'integer',
            title: 'Page'
        },
        size: {
            type: 'integer',
            title: 'Size'
        },
        sortOrders: {
            items: {
                '$ref': '#/components/schemas/SortOrder'
            },
            type: 'array',
            title: 'Sortorders'
        }
    },
    type: 'object',
    required: ['complianceReportId', 'filters', 'page', 'size', 'sortOrders'],
    title: 'PaginatedAllocationAgreementRequestSchema'
} as const;

export const PaginatedNotionalTransferRequestSchemaSchema = {
    properties: {
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        filters: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FilterModel'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Filters'
        },
        page: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        sortOrders: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SortOrder'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sortorders'
        }
    },
    type: 'object',
    required: ['complianceReportId'],
    title: 'PaginatedNotionalTransferRequestSchema'
} as const;

export const PaginatedOtherUsesRequestSchemaSchema = {
    properties: {
        complianceReportId: {
            type: 'integer',
            title: 'Compliancereportid'
        },
        filters: {
            items: {
                '$ref': '#/components/schemas/FilterModel'
            },
            type: 'array',
            title: 'Filters'
        },
        page: {
            type: 'integer',
            title: 'Page'
        },
        size: {
            type: 'integer',
            title: 'Size'
        },
        sortOrders: {
            items: {
                '$ref': '#/components/schemas/SortOrder'
            },
            type: 'array',
            title: 'Sortorders'
        }
    },
    type: 'object',
    required: ['complianceReportId', 'filters', 'page', 'size', 'sortOrders'],
    title: 'PaginatedOtherUsesRequestSchema'
} as const;

export const PaginationRequestSchemaSchema = {
    properties: {
        page: {
            type: 'integer',
            title: 'Page'
        },
        size: {
            type: 'integer',
            title: 'Size'
        },
        sortOrders: {
            items: {
                '$ref': '#/components/schemas/SortOrder'
            },
            type: 'array',
            title: 'Sortorders'
        },
        filters: {
            items: {
                '$ref': '#/components/schemas/FilterModel'
            },
            type: 'array',
            title: 'Filters'
        }
    },
    type: 'object',
    title: 'PaginationRequestSchema'
} as const;

export const PaginationResponseSchemaSchema = {
    properties: {
        total: {
            type: 'integer',
            title: 'Total'
        },
        page: {
            type: 'integer',
            title: 'Page'
        },
        size: {
            type: 'integer',
            title: 'Size'
        },
        totalPages: {
            type: 'integer',
            title: 'Totalpages'
        }
    },
    type: 'object',
    required: ['total', 'page', 'size', 'totalPages'],
    title: 'PaginationResponseSchema'
} as const;

export const PortsEnumSchema = {
    type: 'string',
    enum: ['Single port', 'Dual port'],
    title: 'PortsEnum'
} as const;

export const ProvisionOfTheActSchemaSchema = {
    properties: {
        provisionOfTheActId: {
            type: 'integer',
            title: 'Provisionoftheactid'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['provisionOfTheActId', 'name'],
    title: 'ProvisionOfTheActSchema'
} as const;

export const ReceivedOrTransferredEnumSchemaSchema = {
    type: 'string',
    enum: ['Received', 'Transferred'],
    title: 'ReceivedOrTransferredEnumSchema'
} as const;

export const RedisValueDTOSchema = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value'
        }
    },
    type: 'object',
    required: ['key'],
    title: 'RedisValueDTO',
    description: 'DTO for redis values.'
} as const;

export const ReportingFrequencySchema = {
    type: 'string',
    enum: ['Annual', 'Quarterly'],
    title: 'ReportingFrequency'
} as const;

export const RoleSchemaSchema = {
    properties: {
        roleId: {
            type: 'integer',
            title: 'Roleid'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        displayOrder: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Displayorder'
        },
        isGovernmentRole: {
            type: 'boolean',
            title: 'Isgovernmentrole'
        }
    },
    type: 'object',
    required: ['roleId', 'isGovernmentRole'],
    title: 'RoleSchema'
} as const;

export const SearchFuelCodeListSchema = {
    properties: {
        fuelCodes: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    items: {
                        '$ref': '#/components/schemas/FuelCodeCloneSchema'
                    },
                    type: 'array'
                }
            ],
            title: 'Fuelcodes'
        }
    },
    type: 'object',
    required: ['fuelCodes'],
    title: 'SearchFuelCodeList'
} as const;

export const SortOrderSchema = {
    properties: {
        field: {
            type: 'string',
            title: 'Field'
        },
        direction: {
            type: 'string',
            title: 'Direction'
        }
    },
    type: 'object',
    required: ['field', 'direction'],
    title: 'SortOrder'
} as const;

export const SummarySchemaSchema = {
    properties: {
        summaryId: {
            type: 'integer',
            title: 'Summaryid'
        },
        isLocked: {
            type: 'boolean',
            title: 'Islocked'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['summaryId', 'isLocked'],
    title: 'SummarySchema'
} as const;

export const SupplementalInitiatorTypeSchema = {
    type: 'string',
    enum: ['Supplier Supplemental', 'Government Reassessment'],
    title: 'SupplementalInitiatorType'
} as const;

export const TableOptionsSchemaSchema = {
    properties: {
        fuelTypes: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__fuel_code__schema__FuelTypeSchema'
            },
            type: 'array',
            title: 'Fueltypes'
        },
        transportModes: {
            items: {
                '$ref': '#/components/schemas/TransportModeSchema'
            },
            type: 'array',
            title: 'Transportmodes'
        },
        fuelCodePrefixes: {
            items: {
                '$ref': '#/components/schemas/FuelCodePrefixSchema'
            },
            type: 'array',
            title: 'Fuelcodeprefixes'
        },
        latestFuelCodes: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/lcfs__web__api__fuel_code__schema__FuelCodeSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Latestfuelcodes'
        },
        fieldOptions: {
            '$ref': '#/components/schemas/FieldOptions'
        },
        fpLocations: {
            items: {
                '$ref': '#/components/schemas/FPLocationsSchema'
            },
            type: 'array',
            title: 'Fplocations'
        },
        facilityNameplateCapacityUnits: {
            items: {
                '$ref': '#/components/schemas/FuelTypeQuantityUnitsEnumSchema'
            },
            type: 'array',
            title: 'Facilitynameplatecapacityunits'
        }
    },
    type: 'object',
    required: ['fuelTypes', 'transportModes', 'fuelCodePrefixes', 'latestFuelCodes', 'fieldOptions', 'fpLocations', 'facilityNameplateCapacityUnits'],
    title: 'TableOptionsSchema'
} as const;

export const TransactionCountsSchemaSchema = {
    properties: {
        transfers: {
            type: 'integer',
            title: 'Transfers'
        },
        initiativeAgreements: {
            type: 'integer',
            title: 'Initiativeagreements'
        },
        adminAdjustments: {
            type: 'integer',
            title: 'Adminadjustments'
        }
    },
    type: 'object',
    required: ['transfers', 'initiativeAgreements', 'adminAdjustments'],
    title: 'TransactionCountsSchema'
} as const;

export const TransactionListSchemaSchema = {
    properties: {
        pagination: {
            '$ref': '#/components/schemas/PaginationResponseSchema'
        },
        transactions: {
            items: {
                '$ref': '#/components/schemas/TransactionViewSchema'
            },
            type: 'array',
            title: 'Transactions'
        }
    },
    type: 'object',
    required: ['pagination', 'transactions'],
    title: 'TransactionListSchema'
} as const;

export const TransactionStatusEnumSchema = {
    type: 'string',
    enum: ['Draft', 'Recommended', 'Sent', 'Submitted', 'Approved', 'Recorded', 'Refused', 'Deleted', 'Declined', 'Rescinded'],
    title: 'TransactionStatusEnum'
} as const;

export const TransactionStatusSchemaSchema = {
    properties: {
        status: {
            '$ref': '#/components/schemas/TransactionStatusEnum'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['status'],
    title: 'TransactionStatusSchema'
} as const;

export const TransactionViewSchemaSchema = {
    properties: {
        transactionId: {
            type: 'integer',
            title: 'Transactionid'
        },
        transactionType: {
            type: 'string',
            title: 'Transactiontype'
        },
        fromOrganization: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fromorganization'
        },
        toOrganization: {
            type: 'string',
            title: 'Toorganization'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity'
        },
        pricePerUnit: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Priceperunit'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        createDate: {
            type: 'string',
            format: 'date-time',
            title: 'Createdate'
        },
        updateDate: {
            type: 'string',
            format: 'date-time',
            title: 'Updatedate'
        }
    },
    type: 'object',
    required: ['transactionId', 'transactionType', 'toOrganization', 'quantity', 'status', 'createDate', 'updateDate'],
    title: 'TransactionViewSchema'
} as const;

export const TransferCategorySchemaSchema = {
    properties: {
        transferCategoryId: {
            type: 'integer',
            title: 'Transfercategoryid'
        },
        category: {
            type: 'string',
            title: 'Category'
        }
    },
    type: 'object',
    required: ['transferCategoryId', 'category'],
    title: 'TransferCategorySchema'
} as const;

export const TransferCommentSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'TransferCommentSchema'
} as const;

export const TransferCreateSchemaSchema = {
    properties: {
        transferId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transferid'
        },
        fromOrganizationId: {
            type: 'integer',
            title: 'Fromorganizationid'
        },
        toOrganizationId: {
            type: 'integer',
            title: 'Toorganizationid'
        },
        fromTransactionId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fromtransactionid'
        },
        toTransactionId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Totransactionid'
        },
        agreementDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Agreementdate'
        },
        quantity: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Quantity'
        },
        pricePerUnit: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Priceperunit'
        },
        fromOrgComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fromorgcomment'
        },
        toOrgComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Toorgcomment'
        },
        govComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Govcomment'
        },
        transferCategoryId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transfercategoryid'
        },
        currentStatusId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Currentstatusid'
        },
        currentStatus: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TransferStatusEnum'
                },
                {
                    type: 'null'
                }
            ]
        },
        recommendation: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TransferRecommendationEnumSchema'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['fromOrganizationId', 'toOrganizationId'],
    title: 'TransferCreateSchema'
} as const;

export const TransferHistorySchemaSchema = {
    properties: {
        createDate: {
            type: 'string',
            format: 'date-time',
            title: 'Createdate'
        },
        transferStatus: {
            '$ref': '#/components/schemas/TransferStatusSchema'
        },
        userProfile: {
            '$ref': '#/components/schemas/TransferHistoryUserSchema'
        }
    },
    type: 'object',
    required: ['createDate', 'transferStatus', 'userProfile'],
    title: 'TransferHistorySchema'
} as const;

export const TransferHistoryUserSchemaSchema = {
    properties: {
        firstName: {
            type: 'string',
            title: 'Firstname'
        },
        lastName: {
            type: 'string',
            title: 'Lastname'
        },
        organization: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TransferOrganizationSchema'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['firstName', 'lastName'],
    title: 'TransferHistoryUserSchema'
} as const;

export const TransferOrganizationSchemaSchema = {
    properties: {
        organizationId: {
            type: 'integer',
            title: 'Organizationid'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['organizationId', 'name'],
    title: 'TransferOrganizationSchema'
} as const;

export const TransferRecommendationEnumSchemaSchema = {
    type: 'string',
    enum: ['Record', 'Refuse'],
    title: 'TransferRecommendationEnumSchema'
} as const;

export const TransferSchemaSchema = {
    properties: {
        transferId: {
            type: 'integer',
            title: 'Transferid'
        },
        fromOrganization: {
            '$ref': '#/components/schemas/TransferOrganizationSchema'
        },
        toOrganization: {
            '$ref': '#/components/schemas/TransferOrganizationSchema'
        },
        agreementDate: {
            type: 'string',
            format: 'date',
            title: 'Agreementdate'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity'
        },
        pricePerUnit: {
            type: 'number',
            title: 'Priceperunit'
        },
        comments: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/TransferCommentSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comments'
        },
        fromOrgComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fromorgcomment'
        },
        toOrgComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Toorgcomment'
        },
        govComment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Govcomment'
        },
        currentStatus: {
            '$ref': '#/components/schemas/TransferStatusSchema'
        },
        transferCategory: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TransferCategorySchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        transferHistory: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/TransferHistorySchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transferhistory'
        },
        recommendation: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TransferRecommendationEnumSchema'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['transferId', 'fromOrganization', 'toOrganization', 'agreementDate', 'quantity', 'pricePerUnit', 'currentStatus'],
    title: 'TransferSchema'
} as const;

export const TransferStatusEnumSchema = {
    type: 'string',
    enum: ['Draft', 'Deleted', 'Sent', 'Submitted', 'Recommended', 'Recorded', 'Refused', 'Declined', 'Rescinded'],
    title: 'TransferStatusEnum'
} as const;

export const TransferStatusSchemaSchema = {
    properties: {
        transferStatusId: {
            type: 'integer',
            title: 'Transferstatusid'
        },
        status: {
            type: 'string',
            title: 'Status'
        }
    },
    type: 'object',
    required: ['transferStatusId', 'status'],
    title: 'TransferStatusSchema'
} as const;

export const TransportModeSchemaSchema = {
    properties: {
        transportModeId: {
            type: 'integer',
            title: 'Transportmodeid'
        },
        transportMode: {
            type: 'string',
            title: 'Transportmode'
        }
    },
    type: 'object',
    required: ['transportModeId', 'transportMode'],
    title: 'TransportModeSchema'
} as const;

export const UnitOfMeasureSchemaSchema = {
    properties: {
        uomId: {
            type: 'integer',
            title: 'Uomid'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['uomId', 'name'],
    title: 'UnitOfMeasureSchema'
} as const;

export const UserActivitiesResponseSchemaSchema = {
    properties: {
        activities: {
            items: {
                '$ref': '#/components/schemas/UserActivitySchema'
            },
            type: 'array',
            title: 'Activities'
        },
        pagination: {
            '$ref': '#/components/schemas/PaginationResponseSchema'
        }
    },
    type: 'object',
    required: ['activities', 'pagination'],
    title: 'UserActivitiesResponseSchema'
} as const;

export const UserActivitySchemaSchema = {
    properties: {
        transactionId: {
            type: 'integer',
            title: 'Transactionid'
        },
        actionTaken: {
            type: 'string',
            title: 'Actiontaken'
        },
        transactionType: {
            type: 'string',
            title: 'Transactiontype'
        },
        createDate: {
            type: 'string',
            format: 'date-time',
            title: 'Createdate'
        },
        userId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Userid'
        }
    },
    type: 'object',
    required: ['transactionId', 'actionTaken', 'transactionType', 'createDate'],
    title: 'UserActivitySchema'
} as const;

export const UserBaseSchemaSchema = {
    properties: {
        userProfileId: {
            type: 'integer',
            title: 'Userprofileid'
        },
        keycloakUsername: {
            type: 'string',
            title: 'Keycloakusername'
        },
        keycloakEmail: {
            type: 'string',
            format: 'email',
            title: 'Keycloakemail'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        firstName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Firstname'
        },
        lastName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lastname'
        },
        isActive: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'string'
                }
            ],
            title: 'Isactive'
        },
        mobilePhone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Mobilephone'
        },
        organization: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrganizationSummaryResponseSchema-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        roles: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/RoleSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Roles'
        },
        isGovernmentUser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Isgovernmentuser'
        }
    },
    type: 'object',
    required: ['userProfileId', 'keycloakUsername', 'keycloakEmail', 'isActive'],
    title: 'UserBaseSchema',
    description: 'DTO for user values.'
} as const;

export const UserCreateSchemaSchema = {
    properties: {
        userProfileId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Userprofileid'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        keycloakUsername: {
            type: 'string',
            title: 'Keycloakusername'
        },
        keycloakEmail: {
            type: 'string',
            format: 'email',
            title: 'Keycloakemail'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email',
            default: ''
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        mobilePhone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Mobilephone'
        },
        firstName: {
            type: 'string',
            title: 'Firstname'
        },
        lastName: {
            type: 'string',
            title: 'Lastname'
        },
        isActive: {
            type: 'boolean',
            title: 'Isactive'
        },
        organizationId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Organizationid'
        },
        organization: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrganizationSummaryResponseSchema-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        roles: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Roles',
            default: []
        }
    },
    type: 'object',
    required: ['title', 'keycloakUsername', 'keycloakEmail', 'firstName', 'lastName', 'isActive'],
    title: 'UserCreateSchema'
} as const;

export const UserLoginHistoryResponseSchemaSchema = {
    properties: {
        histories: {
            items: {
                '$ref': '#/components/schemas/UserLoginHistorySchema'
            },
            type: 'array',
            title: 'Histories'
        },
        pagination: {
            '$ref': '#/components/schemas/PaginationResponseSchema'
        }
    },
    type: 'object',
    required: ['histories', 'pagination'],
    title: 'UserLoginHistoryResponseSchema'
} as const;

export const UserLoginHistorySchemaSchema = {
    properties: {
        userLoginHistoryId: {
            type: 'integer',
            title: 'Userloginhistoryid'
        },
        keycloakEmail: {
            type: 'string',
            title: 'Keycloakemail'
        },
        externalUsername: {
            type: 'string',
            title: 'Externalusername'
        },
        keycloakUserId: {
            type: 'string',
            title: 'Keycloakuserid'
        },
        isLoginSuccessful: {
            type: 'boolean',
            title: 'Isloginsuccessful'
        },
        loginErrorMessage: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Loginerrormessage'
        },
        createDate: {
            type: 'string',
            format: 'date-time',
            title: 'Createdate'
        }
    },
    type: 'object',
    required: ['userLoginHistoryId', 'keycloakEmail', 'externalUsername', 'keycloakUserId', 'isLoginSuccessful', 'createDate'],
    title: 'UserLoginHistorySchema'
} as const;

export const UsersSchemaSchema = {
    properties: {
        pagination: {
            '$ref': '#/components/schemas/PaginationResponseSchema'
        },
        users: {
            items: {
                '$ref': '#/components/schemas/UserBaseSchema'
            },
            type: 'array',
            title: 'Users'
        }
    },
    type: 'object',
    required: ['pagination', 'users'],
    title: 'UsersSchema'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const lcfs__web__api__admin_adjustment__schema__OrganizationSchemaSchema = {
    properties: {
        organizationId: {
            type: 'integer',
            title: 'Organizationid'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['organizationId', 'name'],
    title: 'OrganizationSchema'
} as const;

export const lcfs__web__api__allocation_agreement__schema__FuelCategorySchemaSchema = {
    properties: {
        fuelCategoryId: {
            type: 'integer',
            title: 'Fuelcategoryid'
        },
        category: {
            type: 'string',
            title: 'Category'
        },
        defaultAndPrescribedCi: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Defaultandprescribedci'
        }
    },
    type: 'object',
    required: ['fuelCategoryId', 'category'],
    title: 'FuelCategorySchema'
} as const;

export const lcfs__web__api__allocation_agreement__schema__FuelCodeSchemaSchema = {
    properties: {
        fuelCodeId: {
            type: 'integer',
            title: 'Fuelcodeid'
        },
        fuelCode: {
            type: 'string',
            title: 'Fuelcode'
        },
        carbonIntensity: {
            type: 'number',
            title: 'Carbonintensity'
        }
    },
    type: 'object',
    required: ['fuelCodeId', 'fuelCode', 'carbonIntensity'],
    title: 'FuelCodeSchema'
} as const;

export const lcfs__web__api__allocation_agreement__schema__FuelTypeSchemaSchema = {
    properties: {
        fuelTypeId: {
            type: 'integer',
            title: 'Fueltypeid'
        },
        fuelType: {
            type: 'string',
            title: 'Fueltype'
        },
        defaultCarbonIntensity: {
            type: 'number',
            title: 'Defaultcarbonintensity'
        },
        units: {
            type: 'string',
            title: 'Units'
        },
        unrecognized: {
            type: 'boolean',
            title: 'Unrecognized'
        },
        fuelCategories: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__allocation_agreement__schema__FuelCategorySchema'
            },
            type: 'array',
            title: 'Fuelcategories'
        },
        fuelCodes: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/lcfs__web__api__allocation_agreement__schema__FuelCodeSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodes',
            default: []
        },
        provisionOfTheAct: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/ProvisionOfTheActSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provisionoftheact',
            default: []
        }
    },
    type: 'object',
    required: ['fuelTypeId', 'fuelType', 'defaultCarbonIntensity', 'units', 'unrecognized', 'fuelCategories'],
    title: 'FuelTypeSchema'
} as const;

export const lcfs__web__api__fuel_code__schema__FuelCodeSchemaSchema = {
    properties: {
        fuelCodeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodeid'
        },
        fuelStatusId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelstatusid'
        },
        prefixId: {
            type: 'integer',
            title: 'Prefixid'
        },
        fuelSuffix: {
            type: 'string',
            title: 'Fuelsuffix'
        },
        company: {
            type: 'string',
            title: 'Company'
        },
        contactName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Contactname'
        },
        contactEmail: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Contactemail'
        },
        carbonIntensity: {
            type: 'number',
            title: 'Carbonintensity'
        },
        edrms: {
            type: 'string',
            title: 'Edrms'
        },
        lastUpdated: {
            type: 'string',
            format: 'date-time',
            title: 'Lastupdated'
        },
        applicationDate: {
            type: 'string',
            format: 'date',
            title: 'Applicationdate'
        },
        approvalDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Approvaldate'
        },
        effectiveDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Effectivedate'
        },
        expirationDate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Expirationdate'
        },
        fuelTypeId: {
            type: 'integer',
            title: 'Fueltypeid'
        },
        feedstock: {
            type: 'string',
            title: 'Feedstock'
        },
        feedstockLocation: {
            type: 'string',
            title: 'Feedstocklocation'
        },
        feedstockMisc: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedstockmisc'
        },
        fuelProductionFacilityCity: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelproductionfacilitycity'
        },
        fuelProductionFacilityProvinceState: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelproductionfacilityprovincestate'
        },
        fuelProductionFacilityCountry: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelproductionfacilitycountry'
        },
        facilityNameplateCapacity: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Facilitynameplatecapacity'
        },
        facilityNameplateCapacityUnit: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FuelTypeQuantityUnitsEnumSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        formerCompany: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Formercompany'
        },
        notes: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notes'
        },
        fuelCodeStatus: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/lcfs__web__api__fuel_code__schema__FuelCodeStatusSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        fuelCodePrefix: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FuelCodePrefixSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        fuelCodeType: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/lcfs__web__api__fuel_code__schema__FuelTypeSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        feedstockFuelTransportModes: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FeedstockFuelTransportModeSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedstockfueltransportmodes'
        },
        finishedFuelTransportModes: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FinishedFuelTransportModeSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Finishedfueltransportmodes'
        }
    },
    type: 'object',
    required: ['prefixId', 'fuelSuffix', 'company', 'carbonIntensity', 'edrms', 'lastUpdated', 'applicationDate', 'fuelTypeId', 'feedstock', 'feedstockLocation'],
    title: 'FuelCodeSchema'
} as const;

export const lcfs__web__api__fuel_code__schema__FuelCodeStatusSchemaSchema = {
    properties: {
        fuelCodeStatusId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodestatusid'
        },
        status: {
            '$ref': '#/components/schemas/FuelCodeStatusEnumSchema'
        }
    },
    type: 'object',
    required: ['status'],
    title: 'FuelCodeStatusSchema'
} as const;

export const lcfs__web__api__fuel_code__schema__FuelTypeSchemaSchema = {
    properties: {
        fuelTypeId: {
            type: 'integer',
            title: 'Fueltypeid'
        },
        fuelType: {
            type: 'string',
            title: 'Fueltype'
        },
        fossilDerived: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fossilderived'
        },
        provision1Id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provision1Id'
        },
        provision2Id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provision2Id'
        },
        defaultCarbonIntensity: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Defaultcarbonintensity'
        },
        provision1: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProvisionOfTheActSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        provision2: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProvisionOfTheActSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        units: {
            '$ref': '#/components/schemas/FuelTypeQuantityUnitsEnumSchema'
        }
    },
    type: 'object',
    required: ['fuelTypeId', 'fuelType', 'units'],
    title: 'FuelTypeSchema'
} as const;

export const lcfs__web__api__fuel_export__schema__EnergyEffectivenessRatioSchemaSchema = {
    properties: {
        eerId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eerid'
        },
        fuelCategory: {
            '$ref': '#/components/schemas/lcfs__web__api__fuel_export__schema__FuelCategorySchema'
        },
        endUseType: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EndUseTypeSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        energyEffectivenessRatio: {
            type: 'number',
            title: 'Energyeffectivenessratio'
        }
    },
    type: 'object',
    required: ['eerId', 'fuelCategory', 'endUseType', 'energyEffectivenessRatio'],
    title: 'EnergyEffectivenessRatioSchema'
} as const;

export const lcfs__web__api__fuel_export__schema__FuelCategorySchemaSchema = {
    properties: {
        fuelCategoryId: {
            type: 'integer',
            title: 'Fuelcategoryid'
        },
        fuelCategory: {
            type: 'string',
            title: 'Fuelcategory'
        },
        defaultAndPrescribedCi: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Defaultandprescribedci'
        }
    },
    type: 'object',
    required: ['fuelCategoryId', 'fuelCategory'],
    title: 'FuelCategorySchema'
} as const;

export const lcfs__web__api__fuel_export__schema__FuelCodeResponseSchemaSchema = {
    properties: {
        fuelCodeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodeid'
        },
        fuelStatusId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelstatusid'
        },
        fuelStatus: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/lcfs__web__api__fuel_export__schema__FuelCodeStatusSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        prefixId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Prefixid'
        },
        fuelCode: {
            type: 'string',
            title: 'Fuelcode'
        },
        carbonIntensity: {
            type: 'number',
            title: 'Carbonintensity'
        }
    },
    type: 'object',
    required: ['fuelCode', 'carbonIntensity'],
    title: 'FuelCodeResponseSchema'
} as const;

export const lcfs__web__api__fuel_export__schema__FuelCodeSchemaSchema = {
    properties: {
        fuelCodeId: {
            type: 'integer',
            title: 'Fuelcodeid'
        },
        fuelCodePrefixId: {
            type: 'integer',
            title: 'Fuelcodeprefixid'
        },
        fuelCode: {
            type: 'string',
            title: 'Fuelcode'
        },
        fuelCodeCarbonIntensity: {
            type: 'number',
            title: 'Fuelcodecarbonintensity'
        }
    },
    type: 'object',
    required: ['fuelCodeId', 'fuelCodePrefixId', 'fuelCode', 'fuelCodeCarbonIntensity'],
    title: 'FuelCodeSchema'
} as const;

export const lcfs__web__api__fuel_export__schema__FuelCodeStatusSchemaSchema = {
    properties: {
        fuelCodeStatusId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodestatusid'
        },
        status: {
            type: 'string',
            title: 'Status'
        }
    },
    type: 'object',
    required: ['status'],
    title: 'FuelCodeStatusSchema'
} as const;

export const lcfs__web__api__fuel_export__schema__FuelTypeOptionsResponseSchema = {
    properties: {
        fuelTypes: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__fuel_export__schema__FuelTypeOptionsSchema'
            },
            type: 'array',
            title: 'Fueltypes'
        }
    },
    type: 'object',
    required: ['fuelTypes'],
    title: 'FuelTypeOptionsResponse'
} as const;

export const lcfs__web__api__fuel_export__schema__FuelTypeOptionsSchemaSchema = {
    properties: {
        fuelTypeId: {
            type: 'integer',
            title: 'Fueltypeid'
        },
        fuelType: {
            type: 'string',
            title: 'Fueltype'
        },
        fossilDerived: {
            type: 'boolean',
            title: 'Fossilderived'
        },
        defaultCarbonIntensity: {
            type: 'number',
            title: 'Defaultcarbonintensity'
        },
        unit: {
            type: 'string',
            title: 'Unit'
        },
        energyDensity: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EnergyDensitySchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        provisions: {
            items: {
                '$ref': '#/components/schemas/ProvisionOfTheActSchema'
            },
            type: 'array',
            title: 'Provisions'
        },
        fuelCategories: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__fuel_export__schema__FuelCategorySchema'
            },
            type: 'array',
            title: 'Fuelcategories'
        },
        eerRatios: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__fuel_export__schema__EnergyEffectivenessRatioSchema'
            },
            type: 'array',
            title: 'Eerratios'
        },
        targetCarbonIntensities: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__fuel_export__schema__TargetCarbonIntensitySchema'
            },
            type: 'array',
            title: 'Targetcarbonintensities'
        },
        fuelCodes: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/lcfs__web__api__fuel_export__schema__FuelCodeSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodes',
            default: []
        }
    },
    type: 'object',
    required: ['fuelTypeId', 'fuelType', 'fossilDerived', 'defaultCarbonIntensity', 'unit', 'energyDensity', 'provisions', 'fuelCategories', 'eerRatios', 'targetCarbonIntensities'],
    title: 'FuelTypeOptionsSchema'
} as const;

export const lcfs__web__api__fuel_export__schema__FuelTypeSchemaSchema = {
    properties: {
        fuelTypeId: {
            type: 'integer',
            title: 'Fueltypeid'
        },
        fuelType: {
            type: 'string',
            title: 'Fueltype'
        },
        fossilDerived: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fossilderived'
        },
        provision1Id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provision1Id'
        },
        provision2Id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provision2Id'
        },
        defaultCarbonIntensity: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Defaultcarbonintensity'
        },
        units: {
            '$ref': '#/components/schemas/FuelTypeQuantityUnitsEnumSchema'
        }
    },
    type: 'object',
    required: ['fuelTypeId', 'fuelType', 'units'],
    title: 'FuelTypeSchema'
} as const;

export const lcfs__web__api__fuel_export__schema__TargetCarbonIntensitySchemaSchema = {
    properties: {
        targetCarbonIntensityId: {
            type: 'integer',
            title: 'Targetcarbonintensityid'
        },
        targetCarbonIntensity: {
            type: 'number',
            title: 'Targetcarbonintensity'
        },
        reductionTargetPercentage: {
            type: 'number',
            title: 'Reductiontargetpercentage'
        },
        fuelCategory: {
            '$ref': '#/components/schemas/lcfs__web__api__fuel_export__schema__FuelCategorySchema'
        },
        compliancePeriod: {
            type: 'string',
            title: 'Complianceperiod'
        }
    },
    type: 'object',
    required: ['targetCarbonIntensityId', 'targetCarbonIntensity', 'reductionTargetPercentage', 'fuelCategory', 'compliancePeriod'],
    title: 'TargetCarbonIntensitySchema'
} as const;

export const lcfs__web__api__fuel_supply__schema__EnergyEffectivenessRatioSchemaSchema = {
    properties: {
        eerId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eerid'
        },
        fuelCategory: {
            '$ref': '#/components/schemas/lcfs__web__api__fuel_supply__schema__FuelCategorySchema'
        },
        endUseType: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EndUseTypeSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        energyEffectivenessRatio: {
            type: 'number',
            title: 'Energyeffectivenessratio'
        }
    },
    type: 'object',
    required: ['eerId', 'fuelCategory', 'endUseType', 'energyEffectivenessRatio'],
    title: 'EnergyEffectivenessRatioSchema'
} as const;

export const lcfs__web__api__fuel_supply__schema__FuelCategorySchemaSchema = {
    properties: {
        fuelCategoryId: {
            type: 'integer',
            title: 'Fuelcategoryid'
        },
        fuelCategory: {
            type: 'string',
            title: 'Fuelcategory'
        },
        defaultAndPrescribedCi: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Defaultandprescribedci'
        }
    },
    type: 'object',
    required: ['fuelCategoryId', 'fuelCategory'],
    title: 'FuelCategorySchema'
} as const;

export const lcfs__web__api__fuel_supply__schema__FuelCodeResponseSchemaSchema = {
    properties: {
        fuelCodeId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodeid'
        },
        fuelStatusId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelstatusid'
        },
        fuelStatus: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/lcfs__web__api__fuel_supply__schema__FuelCodeStatusSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        prefixId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Prefixid'
        },
        fuelCode: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcode'
        },
        carbonIntensity: {
            type: 'number',
            title: 'Carbonintensity'
        }
    },
    type: 'object',
    required: ['fuelCode', 'carbonIntensity'],
    title: 'FuelCodeResponseSchema'
} as const;

export const lcfs__web__api__fuel_supply__schema__FuelCodeSchemaSchema = {
    properties: {
        fuelCodeId: {
            type: 'integer',
            title: 'Fuelcodeid'
        },
        fuelCodePrefixId: {
            type: 'integer',
            title: 'Fuelcodeprefixid'
        },
        fuelCode: {
            type: 'string',
            title: 'Fuelcode'
        },
        fuelCodeCarbonIntensity: {
            type: 'number',
            title: 'Fuelcodecarbonintensity'
        }
    },
    type: 'object',
    required: ['fuelCodeId', 'fuelCodePrefixId', 'fuelCode', 'fuelCodeCarbonIntensity'],
    title: 'FuelCodeSchema'
} as const;

export const lcfs__web__api__fuel_supply__schema__FuelCodeStatusSchemaSchema = {
    properties: {
        fuelCodeStatusId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodestatusid'
        },
        status: {
            type: 'string',
            title: 'Status'
        }
    },
    type: 'object',
    required: ['status'],
    title: 'FuelCodeStatusSchema'
} as const;

export const lcfs__web__api__fuel_supply__schema__FuelTypeOptionsResponseSchema = {
    properties: {
        fuelTypes: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__fuel_supply__schema__FuelTypeOptionsSchema'
            },
            type: 'array',
            title: 'Fueltypes'
        }
    },
    type: 'object',
    required: ['fuelTypes'],
    title: 'FuelTypeOptionsResponse'
} as const;

export const lcfs__web__api__fuel_supply__schema__FuelTypeOptionsSchemaSchema = {
    properties: {
        fuelTypeId: {
            type: 'integer',
            title: 'Fueltypeid'
        },
        fuelType: {
            type: 'string',
            title: 'Fueltype'
        },
        fossilDerived: {
            type: 'boolean',
            title: 'Fossilderived'
        },
        defaultCarbonIntensity: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Defaultcarbonintensity'
        },
        unit: {
            type: 'string',
            title: 'Unit'
        },
        unrecognized: {
            type: 'boolean',
            title: 'Unrecognized'
        },
        energyDensity: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EnergyDensitySchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        provisions: {
            items: {
                '$ref': '#/components/schemas/ProvisionOfTheActSchema'
            },
            type: 'array',
            title: 'Provisions'
        },
        fuelCategories: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__fuel_supply__schema__FuelCategorySchema'
            },
            type: 'array',
            title: 'Fuelcategories'
        },
        eerRatios: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__fuel_supply__schema__EnergyEffectivenessRatioSchema'
            },
            type: 'array',
            title: 'Eerratios'
        },
        targetCarbonIntensities: {
            items: {
                '$ref': '#/components/schemas/lcfs__web__api__fuel_supply__schema__TargetCarbonIntensitySchema'
            },
            type: 'array',
            title: 'Targetcarbonintensities'
        },
        fuelCodes: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/lcfs__web__api__fuel_supply__schema__FuelCodeSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fuelcodes',
            default: []
        }
    },
    type: 'object',
    required: ['fuelTypeId', 'fuelType', 'fossilDerived', 'unit', 'unrecognized', 'energyDensity', 'provisions', 'fuelCategories', 'eerRatios', 'targetCarbonIntensities'],
    title: 'FuelTypeOptionsSchema'
} as const;

export const lcfs__web__api__fuel_supply__schema__FuelTypeSchemaSchema = {
    properties: {
        fuelTypeId: {
            type: 'integer',
            title: 'Fueltypeid'
        },
        fuelType: {
            type: 'string',
            title: 'Fueltype'
        },
        fossilDerived: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fossilderived'
        },
        provision1Id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provision1Id'
        },
        provision2Id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provision2Id'
        },
        defaultCarbonIntensity: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Defaultcarbonintensity'
        },
        units: {
            '$ref': '#/components/schemas/FuelTypeQuantityUnitsEnumSchema'
        }
    },
    type: 'object',
    required: ['fuelTypeId', 'fuelType', 'units'],
    title: 'FuelTypeSchema'
} as const;

export const lcfs__web__api__fuel_supply__schema__TargetCarbonIntensitySchemaSchema = {
    properties: {
        targetCarbonIntensityId: {
            type: 'integer',
            title: 'Targetcarbonintensityid'
        },
        targetCarbonIntensity: {
            type: 'number',
            title: 'Targetcarbonintensity'
        },
        reductionTargetPercentage: {
            type: 'number',
            title: 'Reductiontargetpercentage'
        },
        fuelCategory: {
            '$ref': '#/components/schemas/lcfs__web__api__fuel_supply__schema__FuelCategorySchema'
        },
        compliancePeriod: {
            type: 'string',
            title: 'Complianceperiod'
        }
    },
    type: 'object',
    required: ['targetCarbonIntensityId', 'targetCarbonIntensity', 'reductionTargetPercentage', 'fuelCategory', 'compliancePeriod'],
    title: 'TargetCarbonIntensitySchema'
} as const;

export const lcfs__web__api__initiative_agreement__schema__OrganizationSchemaSchema = {
    properties: {
        organizationId: {
            type: 'integer',
            title: 'Organizationid'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['organizationId', 'name'],
    title: 'OrganizationSchema'
} as const;

export const lcfs__web__api__organizations__schema__OrganizationSchemaSchema = {
    properties: {
        organizationId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Organizationid'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        operatingName: {
            type: 'string',
            title: 'Operatingname'
        },
        email: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        edrmsRecord: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Edrmsrecord'
        },
        totalBalance: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Totalbalance'
        },
        reservedBalance: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reservedbalance'
        },
        organizationStatusId: {
            type: 'integer',
            title: 'Organizationstatusid'
        },
        organizationTypeId: {
            type: 'integer',
            title: 'Organizationtypeid'
        },
        organizationAddressId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Organizationaddressid'
        },
        organizationAttorneyAddressId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Organizationattorneyaddressid'
        },
        orgType: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrganizationTypeSchema'
                },
                {
                    type: 'null'
                }
            ],
            default: []
        },
        orgStatus: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrganizationStatusSchema'
                },
                {
                    type: 'null'
                }
            ],
            default: []
        }
    },
    type: 'object',
    required: ['name', 'operatingName', 'organizationStatusId', 'organizationTypeId'],
    title: 'OrganizationSchema'
} as const;

export const lcfs__web__api__other_uses__schema__FuelTypeSchemaSchema = {
    properties: {
        fuelTypeId: {
            type: 'integer',
            title: 'Fueltypeid'
        },
        fuelType: {
            type: 'string',
            title: 'Fueltype'
        },
        fossilDerived: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fossilderived'
        },
        provision1Id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provision1Id'
        },
        provision2Id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provision2Id'
        },
        defaultCarbonIntensity: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Defaultcarbonintensity'
        },
        provision1: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProvisionOfTheActSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        provision2: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProvisionOfTheActSchema'
                },
                {
                    type: 'null'
                }
            ]
        },
        units: {
            '$ref': '#/components/schemas/FuelTypeQuantityUnitsEnumSchema'
        }
    },
    type: 'object',
    required: ['fuelTypeId', 'fuelType', 'units'],
    title: 'FuelTypeSchema'
} as const;