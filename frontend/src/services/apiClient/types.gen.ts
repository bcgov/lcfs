// This file is auto-generated by @hey-api/openapi-ts

export type AdminAdjustmentCreateSchema = {
    complianceUnits: number;
    currentStatus: string;
    transactionEffectiveDate?: (string | null);
    toOrganizationId: number;
    govComment?: (string | null);
    internalComment?: (string | null);
};

export type AdminAdjustmentHistorySchema = {
    createDate: string;
    adminAdjustmentStatus: AdminAdjustmentStatusSchema;
    userProfile: HistoryUserSchema;
};

export type AdminAdjustmentSchema = {
    complianceUnits: number;
    currentStatus: AdminAdjustmentStatusSchema;
    transactionEffectiveDate?: (string | null);
    toOrganizationId: number;
    govComment?: (string | null);
    internalComment?: (string | null);
    adminAdjustmentId: number;
    toOrganization: lcfs__web__api__admin_adjustment__schema__OrganizationSchema;
    history: (Array<AdminAdjustmentHistorySchema> | null);
    returned?: (boolean | null);
    createDate: string;
};

export type AdminAdjustmentStatusSchema = {
    adminAdjustmentStatusId: number;
    status: string;
};

export type AdminAdjustmentUpdateSchema = {
    complianceUnits: number;
    currentStatus: string;
    transactionEffectiveDate?: (string | null);
    toOrganizationId: number;
    govComment?: (string | null);
    internalComment?: (string | null);
    adminAdjustmentId: number;
};

export type AllocationAgreementAllSchema = {
    allocationAgreements: Array<AllocationAgreementSchema>;
    pagination?: (PaginationResponseSchema | null);
};

export type AllocationAgreementCreateSchema = {
    complianceReportId: number;
    allocationAgreementId?: (number | null);
    transactionPartner: string;
    postalAddress: string;
    transactionPartnerEmail: string;
    transactionPartnerPhone: string;
    fuelType: string;
    fuelTypeOther?: (string | null);
    ciOfFuel: number;
    quantity: number;
    units: string;
    allocationTransactionType: string;
    fuelCategory: string;
    provisionOfTheAct?: (string | null);
    fuelCode?: (string | null);
    deleted?: (boolean | null);
};

export type AllocationAgreementListSchema = {
    allocationAgreements: Array<AllocationAgreementSchema>;
    pagination: PaginationResponseSchema;
};

export type AllocationAgreementSchema = {
    complianceReportId: number;
    allocationAgreementId?: (number | null);
    transactionPartner: string;
    postalAddress: string;
    transactionPartnerEmail: string;
    transactionPartnerPhone: string;
    fuelType: string;
    fuelTypeOther?: (string | null);
    ciOfFuel: number;
    quantity: number;
    units: string;
    allocationTransactionType: string;
    fuelCategory: string;
    provisionOfTheAct?: (string | null);
    fuelCode?: (string | null);
    deleted?: (boolean | null);
};

export type AllocationAgreementTableOptionsSchema = {
    allocationTransactionTypes: Array<AllocationTransactionTypeSchema>;
    fuelTypes: Array<lcfs__web__api__allocation_agreement__schema__FuelTypeSchema>;
    provisionsOfTheAct: Array<ProvisionOfTheActSchema>;
    fuelCodes: Array<lcfs__web__api__allocation_agreement__schema__FuelCodeSchema>;
    unitsOfMeasure: Array<(string)>;
};

export type AllocationTransactionTypeSchema = {
    allocationTransactionTypeId: number;
    type: string;
};

export type AudienceScopeEnum = 'Compliance Manager' | 'Director' | 'Analyst';

export type AuditLogResponseSchema = {
    id: number;
    table_name: string;
    operation: string;
    row_id: number;
    old_values: ({
    [key: string]: unknown;
} | null);
    new_values: ({
    [key: string]: unknown;
} | null);
    delta: ({
    [key: string]: unknown;
} | null);
};

export type Body_uploadFile = {
    file: (Blob | File);
};

export type CommonPaginatedReportRequestSchema = {
    complianceReportId: number;
    filters?: (Array<FilterModel> | null);
    page?: (number | null);
    size?: (number | null);
    sortOrders?: (Array<SortOrder> | null);
};

export type CompliancePeriodSchema = {
    compliancePeriodId: number;
    description: string;
    effectiveDate?: (string | null);
    expirationDate?: (string | null);
    displayOrder?: (number | null);
};

export type ComplianceReportBaseSchema = {
    complianceReportId: number;
    complianceReportGroupUuid: (string | null);
    version: (number | null);
    supplementalInitiator: (SupplementalInitiatorType | null);
    compliancePeriodId: number;
    compliancePeriod: CompliancePeriodSchema;
    organizationId: number;
    organization: ComplianceReportOrganizationSchema;
    summary: (SummarySchema | null);
    currentStatusId: number;
    currentStatus: ComplianceReportStatusSchema;
    transactionId?: (number | null);
    nickname?: (string | null);
    supplementalNote?: (string | null);
    reportingFrequency?: (ReportingFrequency | null);
    updateDate?: (string | null);
    history?: (Array<ComplianceReportHistorySchema> | null);
    hasSupplemental: boolean;
};

export type ComplianceReportCreateSchema = {
    compliancePeriod: string;
    organizationId: number;
    status: string;
};

export type ComplianceReportHistorySchema = {
    complianceReportHistoryId: number;
    complianceReportId: number;
    status: ComplianceReportStatusSchema;
    userProfile: ComplianceReportUserSchema;
    createDate: string;
};

export type ComplianceReportListSchema = {
    pagination: PaginationResponseSchema;
    reports: Array<ComplianceReportBaseSchema>;
};

export type ComplianceReportOrganizationSchema = {
    organizationId: number;
    name: string;
};

export type ComplianceReportRequestSchema = {
    complianceReportId: number;
};

export type ComplianceReportStatusSchema = {
    complianceReportStatusId: number;
    status: string;
};

export type ComplianceReportSummaryRowSchema = {
    line?: (string | null);
    description?: (string | null);
    field?: (string | null);
    gasoline?: (number | null);
    diesel?: (number | null);
    jetFuel?: (number | null);
    value?: (number | null);
    totalValue?: (number | null);
    format?: (string | null);
};

export type ComplianceReportSummarySchema = {
    renewableFuelTargetSummary: Array<ComplianceReportSummaryRowSchema>;
    lowCarbonFuelTargetSummary: Array<ComplianceReportSummaryRowSchema>;
    nonCompliancePenaltySummary: Array<ComplianceReportSummaryRowSchema>;
    summaryId?: (number | null);
    complianceReportId?: (number | null);
    version?: (number | null);
    isLocked?: (boolean | null);
    quarter?: (number | null);
};

export type ComplianceReportUpdateSchema = {
    status: string;
    supplementalNote?: (string | null);
};

export type ComplianceReportUserSchema = {
    firstName: string;
    lastName: string;
    organization?: (ComplianceReportOrganizationSchema | null);
};

export type DeleteAllocationAgreementResponseSchema = {
    message: string;
};

export type DeleteFinalSupplyEquipmentResponseSchema = {
    message: string;
};

export type DeleteFuelCodeResponseSchema = {
    message: string;
};

export type DeleteFuelExportResponseSchema = {
    success: boolean;
    message: string;
};

export type DeleteFuelSupplyResponseSchema = {
    success: boolean;
    message: string;
};

export type DeleteNotionalTransferResponseSchema = {
    message: string;
};

export type DeleteOtherUsesResponseSchema = {
    message: string;
};

export type DirectorReviewCountsSchema = {
    transfers: number;
    complianceReports: number;
    initiativeAgreements: number;
    adminAdjustments: number;
};

export type EndUserTypeSchema = {
    endUserTypeId: number;
    typeName: string;
};

export type EndUseTypeSchema = {
    endUseTypeId: number;
    type: string;
    subType?: (string | null);
};

export type EnergyDensitySchema = {
    energyDensityId: number;
    energyDensity: number;
    unit: UnitOfMeasureSchema;
};

/**
 * @deprecated
 */
export type EntityResponse = {
    status: number;
    message: string;
    error?: {
        [key: string]: unknown;
    };
    total?: number;
    size?: number;
    page?: number;
    total_pages?: number;
    data?: unknown;
};

export type EntityTypeEnum = 'Transfer' | 'initiativeAgreement' | 'administrativeAdjustment' | 'Assessment' | 'complianceReport';

export type ExpectedUseTypeSchema = {
    expectedUseTypeId: number;
    name: string;
    description?: (string | null);
};

export type FeedstockFuelTransportModeSchema = {
    feedstockFuelTransportModeId?: (number | null);
    fuelCodeId?: (number | null);
    transportModeId?: (number | null);
    feedstockFuelTransportMode?: (TransportModeSchema | null);
};

export type FieldOptions = {
    company: Array<(string)>;
    feedstock: Array<(string)>;
    feedstockLocation: Array<(string)>;
    feedstockMisc: Array<(string)>;
    formerCompany: Array<(string)>;
    contactName: Array<(string)>;
    contactEmail: Array<(string)>;
};

export type FileResponseSchema = {
    documentId: number;
    fileName: string;
    fileSize: number;
};

export type FilterModel = {
    filterType?: string;
    type?: string;
    filter?: (unknown | null);
    field?: string;
    dateFrom?: (string | null);
    dateTo?: (string | null);
};

export type FinalSupplyEquipmentCreateSchema = {
    finalSupplyEquipmentId?: (number | null);
    complianceReportId?: (number | null);
    supplyFromDate: string;
    supplyToDate: string;
    kwhUsage?: (number | null);
    serialNbr: string;
    manufacturer: string;
    model?: (string | null);
    levelOfEquipment: string;
    ports?: (PortsEnum | null);
    fuelMeasurementType: string;
    intendedUses: Array<(string)>;
    intendedUsers: Array<(string)>;
    streetAddress: string;
    city: string;
    postalCode: string;
    latitude: number;
    longitude: number;
    notes?: (string | null);
    deleted?: (boolean | null);
};

export type FinalSupplyEquipmentSchema = {
    finalSupplyEquipmentId: number;
    complianceReportId: number;
    supplyFromDate: string;
    supplyToDate: string;
    registrationNbr: string;
    kwhUsage?: (number | null);
    serialNbr: string;
    manufacturer: string;
    model?: (string | null);
    levelOfEquipment: LevelOfEquipmentSchema;
    fuelMeasurementType: FuelMeasurementTypeSchema;
    ports?: (PortsEnum | null);
    intendedUseTypes: Array<EndUseTypeSchema>;
    intendedUserTypes: Array<EndUserTypeSchema>;
    streetAddress: string;
    city: string;
    postalCode: string;
    latitude: number;
    longitude: number;
    notes?: (string | null);
};

export type FinalSupplyEquipmentsSchema = {
    finalSupplyEquipments?: (Array<FinalSupplyEquipmentSchema> | null);
    pagination?: (PaginationResponseSchema | null);
};

export type FinishedFuelTransportModeSchema = {
    finishedFuelTransportModeId?: (number | null);
    fuelCodeId?: (number | null);
    transportModeId?: (number | null);
    finishedFuelTransportMode?: (TransportModeSchema | null);
};

export type FPLocationsSchema = {
    fuelProductionFacilityCity?: (string | null);
    fuelProductionFacilityProvinceState?: (string | null);
    fuelProductionFacilityCountry?: (string | null);
};

export type FSEOptionsSchema = {
    intendedUseTypes: Array<EndUseTypeSchema>;
    fuelMeasurementTypes: Array<FuelMeasurementTypeSchema>;
    levelsOfEquipment: Array<LevelOfEquipmentSchema>;
    intendedUserTypes: Array<EndUserTypeSchema>;
    ports: Array<PortsEnum>;
};

export type FuelCategoryResponseSchema = {
    fuelCategoryId?: (number | null);
    category: string;
};

export type FuelCodeCloneSchema = {
    fuelCodeId?: (number | null);
    fuelStatusId?: (number | null);
    prefixId?: (number | null);
    fuelSuffix?: (string | null);
    company?: (string | null);
    contactName?: (string | null);
    contactEmail?: (string | null);
    carbonIntensity?: (number | null);
    edrms?: (string | null);
    lastUpdated?: (string | null);
    applicationDate?: (string | null);
    approvalDate?: (string | null);
    effectiveDate?: (string | null);
    expirationDate?: (string | null);
    fuelTypeId?: (number | null);
    feedstock?: (string | null);
    feedstockLocation?: (string | null);
    feedstockMisc?: (string | null);
    fuelProductionFacilityCity?: (string | null);
    fuelProductionFacilityProvinceState?: (string | null);
    fuelProductionFacilityCountry?: (string | null);
    facilityNameplateCapacity?: (number | null);
    facilityNameplateCapacityUnit?: (FuelTypeQuantityUnitsEnumSchema | null);
    formerCompany?: (string | null);
    notes?: (string | null);
    fuelCodeStatus?: (lcfs__web__api__fuel_code__schema__FuelCodeStatusSchema | null);
    fuelCodePrefix?: (FuelCodePrefixSchema | null);
    fuelCodeType?: (lcfs__web__api__fuel_code__schema__FuelTypeSchema | null);
    feedstockFuelTransportModes?: (Array<FeedstockFuelTransportModeSchema> | null);
    finishedFuelTransportModes?: (Array<FinishedFuelTransportModeSchema> | null);
};

export type FuelCodeCreateSchema = {
    id?: (string | null);
    fuelCodeId?: (number | null);
    status?: (string | null);
    prefix: string;
    prefixId?: (number | null);
    fuelSuffix: string;
    carbonIntensity: number;
    edrms: string;
    company: string;
    lastUpdated?: (string | null);
    contactName?: (string | null);
    contactEmail?: (string | null);
    applicationDate: string;
    approvalDate?: (string | null);
    effectiveDate?: (string | null);
    expirationDate?: (string | null);
    fuel: string;
    fuelTypeId?: (number | null);
    feedstock: string;
    feedstockLocation: string;
    feedstockMisc?: (string | null);
    fuelProductionFacilityCity: string;
    fuelProductionFacilityProvinceState: string;
    fuelProductionFacilityCountry: string;
    facilityNameplateCapacity?: (number | null);
    facilityNameplateCapacityUnit?: (FuelTypeQuantityUnitsEnumSchema | string | null);
    feedstockFuelTransportMode?: (Array<(string)> | null);
    finishedFuelTransportMode?: (Array<(string)> | null);
    feedstockFuelTransportModes?: (Array<FeedstockFuelTransportModeSchema> | null);
    finishedFuelTransportModes?: (Array<FinishedFuelTransportModeSchema> | null);
    formerCompany?: (string | null);
    notes?: (string | null);
    isValid?: (boolean | null);
    validationMsg?: (string | null);
    deleted?: (boolean | null);
};

export type FuelCodePrefixSchema = {
    fuelCodePrefixId: number;
    nextFuelCode?: (string | null);
    prefix: string;
};

export type FuelCodeSchema_Input = {
    fuelCodeId: number;
    fuelCodePrefixId: number;
    fuelCode: string;
    fuelCodeCarbonIntensity: number;
};

export type FuelCodesSchema = {
    fuelCodes: Array<lcfs__web__api__fuel_code__schema__FuelCodeSchema>;
    pagination?: (PaginationResponseSchema | null);
};

export type FuelCodeStatusEnumSchema = 'Draft' | 'Approved' | 'Deleted';

export type FuelExportCreateUpdateSchema = {
    fuelExportId?: (number | null);
    complianceReportId: number;
    groupUuid?: (string | null);
    version?: (number | null);
    userType?: (string | null);
    actionType?: (string | null);
    compliancePeriod?: (string | null);
    fuelTypeOther?: (string | null);
    fuelType: (string | FuelTypeSchema_Input);
    fuelTypeId: number;
    fuelCategory: (string | FuelCategoryResponseSchema);
    fuelCategoryId: number;
    endUseType?: (string | EndUseTypeSchema | null);
    endUseId?: (number | null);
    provisionOfTheAct: (string | ProvisionOfTheActSchema);
    provisionOfTheActId: number;
    fuelCode?: (string | FuelCodeSchema_Input | null);
    fuelCodeId?: (number | null);
    quantity: number;
    units: string;
    exportDate: string;
    complianceUnits?: (number | null);
    targetCi?: (number | null);
    ciOfFuel?: (number | null);
    energyDensity?: (number | null);
    eer?: (number | null);
    energy?: (number | null);
    deleted?: (boolean | null);
};

export type FuelExportSchema = {
    fuelExportId?: (number | null);
    complianceReportId: number;
    groupUuid?: (string | null);
    version?: (number | null);
    userType?: (string | null);
    actionType?: (string | null);
    compliancePeriod?: (string | null);
    fuelTypeId: number;
    fuelType: lcfs__web__api__fuel_export__schema__FuelTypeSchema;
    fuelTypeOther?: (string | null);
    quantity: number;
    units: string;
    exportDate: string;
    complianceUnits?: (number | null);
    targetCi?: (number | null);
    ciOfFuel?: (number | null);
    energyDensity?: (number | null);
    eer?: (number | null);
    energy?: (number | null);
    fuelCategoryId: number;
    fuelCategory: FuelCategoryResponseSchema;
    fuelCodeId?: (number | null);
    fuelCode?: (lcfs__web__api__fuel_export__schema__FuelCodeResponseSchema | null);
    provisionOfTheActId?: (number | null);
    provisionOfTheAct?: (ProvisionOfTheActSchema | null);
    endUseId?: (number | null);
    endUseType?: (EndUseTypeSchema | null);
};

export type FuelExportsSchema = {
    fuelExports?: (Array<FuelExportSchema> | null);
    pagination?: (PaginationResponseSchema | null);
};

export type FuelMeasurementTypeSchema = {
    fuelMeasurementTypeId: number;
    type: string;
    description?: (string | null);
    displayOrder: number;
};

export type FuelSuppliesSchema = {
    fuelSupplies?: (Array<FuelSupplyResponseSchema> | null);
    pagination?: (PaginationResponseSchema | null);
};

export type FuelSupplyCreateUpdateSchema = {
    complianceReportId: number;
    fuelSupplyId?: (number | null);
    groupUuid?: (string | null);
    version?: (number | null);
    fuelTypeId: number;
    fuelCategoryId: number;
    endUseId?: (number | null);
    provisionOfTheActId: number;
    quantity: number;
    units: string;
    fuelTypeOther?: (string | null);
    fuelCodeId?: (number | null);
    targetCi?: (number | null);
    ciOfFuel?: (number | null);
    energyDensity?: (number | null);
    eer?: (number | null);
    energy?: (number | null);
    deleted?: (boolean | null);
};

export type FuelSupplyResponseSchema = {
    fuelSupplyId: number;
    complianceReportId: number;
    groupUuid: string;
    version: number;
    userType: string;
    actionType: string;
    fuelTypeId: number;
    fuelType: lcfs__web__api__fuel_supply__schema__FuelTypeSchema;
    quantity: number;
    units: string;
    complianceUnits?: (number | null);
    targetCi?: (number | null);
    ciOfFuel?: (number | null);
    energyDensity?: (number | null);
    eer?: (number | null);
    energy?: (number | null);
    fuelCategoryId?: (number | null);
    fuelCategory: FuelCategoryResponseSchema;
    fuelCodeId?: (number | null);
    fuelCode?: (lcfs__web__api__fuel_supply__schema__FuelCodeResponseSchema | null);
    provisionOfTheActId?: (number | null);
    provisionOfTheAct?: (ProvisionOfTheActSchema | null);
    endUseId?: (number | null);
    endUseType?: (EndUseTypeSchema | null);
    fuelTypeOther?: (string | null);
};

export type FuelTypeQuantityUnitsEnumSchema = 'L' | 'kg' | 'kWh' | 'm3';

export type FuelTypeSchema_Input = {
    fuelTypeId: number;
    fuelType: string;
    fossilDerived?: (boolean | null);
    provision1Id?: (number | null);
    provision2Id?: (number | null);
    defaultCarbonIntensity?: (number | null);
    units: FuelTypeQuantityUnitsEnumSchema;
};

export type HistoryUserSchema = {
    firstName: string;
    lastName: string;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type InitiativeAgreementCreateSchema = {
    complianceUnits: number;
    currentStatus: string;
    transactionEffectiveDate?: (string | null);
    toOrganizationId: number;
    govComment?: (string | null);
    internalComment?: (string | null);
};

export type InitiativeAgreementHistorySchema = {
    createDate: string;
    initiativeAgreementStatus: InitiativeAgreementStatusSchema;
    userProfile: HistoryUserSchema;
};

export type InitiativeAgreementSchema = {
    complianceUnits: number;
    currentStatus: InitiativeAgreementStatusSchema;
    transactionEffectiveDate?: (string | null);
    toOrganizationId: number;
    govComment?: (string | null);
    internalComment?: (string | null);
    initiativeAgreementId: number;
    toOrganization: lcfs__web__api__initiative_agreement__schema__OrganizationSchema;
    history: (Array<InitiativeAgreementHistorySchema> | null);
    returned?: (boolean | null);
    createDate: string;
};

export type InitiativeAgreementStatusSchema = {
    initiativeAgreementStatusId: number;
    status: string;
};

export type InitiativeAgreementUpdateSchema = {
    complianceUnits: number;
    currentStatus: string;
    transactionEffectiveDate?: (string | null);
    toOrganizationId: number;
    govComment?: (string | null);
    internalComment?: (string | null);
    initiativeAgreementId: number;
};

export type InternalCommentCreateSchema = {
    entityType: EntityTypeEnum;
    entityId: number;
    comment: string;
    audienceScope: AudienceScopeEnum;
};

export type InternalCommentResponseSchema = {
    internalCommentId: number;
    comment: string;
    audienceScope: AudienceScopeEnum;
    createUser?: (string | null);
    createDate?: (string | null);
    updateDate?: (string | null);
    fullName?: (string | null);
};

export type InternalCommentUpdateSchema = {
    comment?: (string | null);
};

export type lcfs__web__api__admin_adjustment__schema__OrganizationSchema = {
    organizationId: number;
    name: string;
};

export type lcfs__web__api__allocation_agreement__schema__FuelCategorySchema = {
    fuelCategoryId: number;
    category: string;
    defaultAndPrescribedCi?: (number | null);
};

export type lcfs__web__api__allocation_agreement__schema__FuelCodeSchema = {
    fuelCodeId: number;
    fuelCode: string;
    carbonIntensity: number;
};

export type lcfs__web__api__allocation_agreement__schema__FuelTypeSchema = {
    fuelTypeId: number;
    fuelType: string;
    defaultCarbonIntensity: number;
    units: string;
    unrecognized: boolean;
    fuelCategories: Array<lcfs__web__api__allocation_agreement__schema__FuelCategorySchema>;
    fuelCodes?: (Array<lcfs__web__api__allocation_agreement__schema__FuelCodeSchema> | null);
    provisionOfTheAct?: (Array<ProvisionOfTheActSchema> | null);
};

export type lcfs__web__api__fuel_code__schema__FuelCodeSchema = {
    fuelCodeId?: (number | null);
    fuelStatusId?: (number | null);
    prefixId: number;
    fuelSuffix: string;
    company: string;
    contactName?: (string | null);
    contactEmail?: (string | null);
    carbonIntensity: number;
    edrms: string;
    lastUpdated: string;
    applicationDate: string;
    approvalDate?: (string | null);
    effectiveDate?: (string | null);
    expirationDate?: (string | null);
    fuelTypeId: number;
    feedstock: string;
    feedstockLocation: string;
    feedstockMisc?: (string | null);
    fuelProductionFacilityCity?: (string | null);
    fuelProductionFacilityProvinceState?: (string | null);
    fuelProductionFacilityCountry?: (string | null);
    facilityNameplateCapacity?: (number | null);
    facilityNameplateCapacityUnit?: (FuelTypeQuantityUnitsEnumSchema | null);
    formerCompany?: (string | null);
    notes?: (string | null);
    fuelCodeStatus?: (lcfs__web__api__fuel_code__schema__FuelCodeStatusSchema | null);
    fuelCodePrefix?: (FuelCodePrefixSchema | null);
    fuelCodeType?: (lcfs__web__api__fuel_code__schema__FuelTypeSchema | null);
    feedstockFuelTransportModes?: (Array<FeedstockFuelTransportModeSchema> | null);
    finishedFuelTransportModes?: (Array<FinishedFuelTransportModeSchema> | null);
};

export type lcfs__web__api__fuel_code__schema__FuelCodeStatusSchema = {
    fuelCodeStatusId?: (number | null);
    status: FuelCodeStatusEnumSchema;
};

export type lcfs__web__api__fuel_code__schema__FuelTypeSchema = {
    fuelTypeId: number;
    fuelType: string;
    fossilDerived?: (boolean | null);
    provision1Id?: (number | null);
    provision2Id?: (number | null);
    defaultCarbonIntensity?: (number | null);
    provision1?: (ProvisionOfTheActSchema | null);
    provision2?: (ProvisionOfTheActSchema | null);
    units: FuelTypeQuantityUnitsEnumSchema;
};

export type lcfs__web__api__fuel_export__schema__EnergyEffectivenessRatioSchema = {
    eerId: (number | null);
    fuelCategory: lcfs__web__api__fuel_export__schema__FuelCategorySchema;
    endUseType: (EndUseTypeSchema | null);
    energyEffectivenessRatio: number;
};

export type lcfs__web__api__fuel_export__schema__FuelCategorySchema = {
    fuelCategoryId: number;
    fuelCategory: string;
    defaultAndPrescribedCi?: (number | null);
};

export type lcfs__web__api__fuel_export__schema__FuelCodeResponseSchema = {
    fuelCodeId?: (number | null);
    fuelStatusId?: (number | null);
    fuelStatus?: (lcfs__web__api__fuel_export__schema__FuelCodeStatusSchema | null);
    prefixId?: (number | null);
    fuelCode: string;
    carbonIntensity: number;
};

export type lcfs__web__api__fuel_export__schema__FuelCodeSchema = {
    fuelCodeId: number;
    fuelCodePrefixId: number;
    fuelCode: string;
    fuelCodeCarbonIntensity: number;
};

export type lcfs__web__api__fuel_export__schema__FuelCodeStatusSchema = {
    fuelCodeStatusId?: (number | null);
    status: string;
};

export type lcfs__web__api__fuel_export__schema__FuelTypeOptionsResponse = {
    fuelTypes: Array<lcfs__web__api__fuel_export__schema__FuelTypeOptionsSchema>;
};

export type lcfs__web__api__fuel_export__schema__FuelTypeOptionsSchema = {
    fuelTypeId: number;
    fuelType: string;
    fossilDerived: boolean;
    defaultCarbonIntensity: number;
    unit: string;
    energyDensity: (EnergyDensitySchema | null);
    provisions: Array<ProvisionOfTheActSchema>;
    fuelCategories: Array<lcfs__web__api__fuel_export__schema__FuelCategorySchema>;
    eerRatios: Array<lcfs__web__api__fuel_export__schema__EnergyEffectivenessRatioSchema>;
    targetCarbonIntensities: Array<lcfs__web__api__fuel_export__schema__TargetCarbonIntensitySchema>;
    fuelCodes?: (Array<lcfs__web__api__fuel_export__schema__FuelCodeSchema> | null);
};

export type lcfs__web__api__fuel_export__schema__FuelTypeSchema = {
    fuelTypeId: number;
    fuelType: string;
    fossilDerived?: (boolean | null);
    provision1Id?: (number | null);
    provision2Id?: (number | null);
    defaultCarbonIntensity?: (number | null);
    units: FuelTypeQuantityUnitsEnumSchema;
};

export type lcfs__web__api__fuel_export__schema__TargetCarbonIntensitySchema = {
    targetCarbonIntensityId: number;
    targetCarbonIntensity: number;
    reductionTargetPercentage: number;
    fuelCategory: lcfs__web__api__fuel_export__schema__FuelCategorySchema;
    compliancePeriod: string;
};

export type lcfs__web__api__fuel_supply__schema__EnergyEffectivenessRatioSchema = {
    eerId: (number | null);
    fuelCategory: lcfs__web__api__fuel_supply__schema__FuelCategorySchema;
    endUseType: (EndUseTypeSchema | null);
    energyEffectivenessRatio: number;
};

export type lcfs__web__api__fuel_supply__schema__FuelCategorySchema = {
    fuelCategoryId: number;
    fuelCategory: string;
    defaultAndPrescribedCi?: (number | null);
};

export type lcfs__web__api__fuel_supply__schema__FuelCodeResponseSchema = {
    fuelCodeId?: (number | null);
    fuelStatusId?: (number | null);
    fuelStatus?: (lcfs__web__api__fuel_supply__schema__FuelCodeStatusSchema | null);
    prefixId?: (number | null);
    fuelCode: (string | null);
    carbonIntensity: number;
};

export type lcfs__web__api__fuel_supply__schema__FuelCodeSchema = {
    fuelCodeId: number;
    fuelCodePrefixId: number;
    fuelCode: string;
    fuelCodeCarbonIntensity: number;
};

export type lcfs__web__api__fuel_supply__schema__FuelCodeStatusSchema = {
    fuelCodeStatusId?: (number | null);
    status: string;
};

export type lcfs__web__api__fuel_supply__schema__FuelTypeOptionsResponse = {
    fuelTypes: Array<lcfs__web__api__fuel_supply__schema__FuelTypeOptionsSchema>;
};

export type lcfs__web__api__fuel_supply__schema__FuelTypeOptionsSchema = {
    fuelTypeId: number;
    fuelType: string;
    fossilDerived: boolean;
    defaultCarbonIntensity?: (number | null);
    unit: string;
    unrecognized: boolean;
    energyDensity: (EnergyDensitySchema | null);
    provisions: Array<ProvisionOfTheActSchema>;
    fuelCategories: Array<lcfs__web__api__fuel_supply__schema__FuelCategorySchema>;
    eerRatios: Array<lcfs__web__api__fuel_supply__schema__EnergyEffectivenessRatioSchema>;
    targetCarbonIntensities: Array<lcfs__web__api__fuel_supply__schema__TargetCarbonIntensitySchema>;
    fuelCodes?: (Array<lcfs__web__api__fuel_supply__schema__FuelCodeSchema> | null);
};

export type lcfs__web__api__fuel_supply__schema__FuelTypeSchema = {
    fuelTypeId: number;
    fuelType: string;
    fossilDerived?: (boolean | null);
    provision1Id?: (number | null);
    provision2Id?: (number | null);
    defaultCarbonIntensity?: (number | null);
    units: FuelTypeQuantityUnitsEnumSchema;
};

export type lcfs__web__api__fuel_supply__schema__TargetCarbonIntensitySchema = {
    targetCarbonIntensityId: number;
    targetCarbonIntensity: number;
    reductionTargetPercentage: number;
    fuelCategory: lcfs__web__api__fuel_supply__schema__FuelCategorySchema;
    compliancePeriod: string;
};

export type lcfs__web__api__initiative_agreement__schema__OrganizationSchema = {
    organizationId: number;
    name: string;
};

export type lcfs__web__api__organizations__schema__OrganizationSchema = {
    organizationId?: (number | null);
    name: string;
    operatingName: string;
    email?: (string | null);
    phone?: (string | null);
    edrmsRecord?: (string | null);
    totalBalance?: (number | null);
    reservedBalance?: (number | null);
    organizationStatusId: number;
    organizationTypeId: number;
    organizationAddressId?: (number | null);
    organizationAttorneyAddressId?: (number | null);
    orgType?: (OrganizationTypeSchema | null);
    orgStatus?: (OrganizationStatusSchema | null);
};

export type lcfs__web__api__other_uses__schema__FuelTypeSchema = {
    fuelTypeId: number;
    fuelType: string;
    fossilDerived?: (boolean | null);
    provision1Id?: (number | null);
    provision2Id?: (number | null);
    defaultCarbonIntensity?: (number | null);
    provision1?: (ProvisionOfTheActSchema | null);
    provision2?: (ProvisionOfTheActSchema | null);
    units: FuelTypeQuantityUnitsEnumSchema;
};

export type LevelOfEquipmentSchema = {
    levelOfEquipmentId: number;
    name: string;
    description?: (string | null);
    displayOrder: number;
};

/**
 * Simple message model.
 */
export type Message = {
    message: string;
};

export type NotificationChannelSubscriptionRequest = {
    isEnabled: boolean;
    channelId: number;
    notificationTypeId: number;
};

export type NotificationMessageRequest = {
    isRead: boolean;
    isArchived: boolean;
};

export type NotionalTransferCreateSchema = {
    legalName: string;
    addressForService: string;
    fuelCategory: string;
    receivedOrTransferred: ReceivedOrTransferredEnumSchema;
    quantity: number;
    notionalTransferId?: (number | null);
    complianceReportId: number;
    deleted?: (boolean | null);
};

export type NotionalTransferFuelCategorySchema = {
    fuelCategoryId: number;
    category: string;
    description?: (string | null);
};

export type NotionalTransfersAllSchema = {
    notionalTransfers: Array<NotionalTransferSchema>;
};

export type NotionalTransferSchema = {
    legalName: string;
    addressForService: string;
    fuelCategory: string;
    receivedOrTransferred: ReceivedOrTransferredEnumSchema;
    quantity: number;
    notionalTransferId?: (number | null);
    complianceReportId: number;
    deleted?: (boolean | null);
};

export type NotionalTransfersSchema = {
    notionalTransfers: Array<NotionalTransferSchema>;
    pagination?: (PaginationResponseSchema | null);
};

export type NotionalTransferTableOptionsSchema = {
    fuelCategories: Array<NotionalTransferFuelCategorySchema>;
    receivedOrTransferred: Array<(string)>;
};

export type OrganizarionTransactionCountsSchema = {
    transfers: number;
};

export type OrganizationAddressCreateSchema = {
    name: string;
    streetAddress: string;
    addressOther?: (string | null);
    city: string;
    provinceState: string;
    country: string;
    postalcodeZipcode?: (string | null);
};

export type OrganizationAddressSchema = {
    name: string;
    streetAddress: string;
    addressOther?: (string | null);
    city: string;
    provinceState: string;
    country: string;
    postalcodeZipcode?: (string | null);
    organizationId?: (number | null);
};

export type OrganizationAttorneyAddressCreateSchema = {
    name: string;
    streetAddress: string;
    addressOther?: (string | null);
    city: string;
    provinceState: string;
    country: string;
    postalcodeZipcode?: (string | null);
};

export type OrganizationAttorneyAddressSchema = {
    name: string;
    streetAddress: string;
    addressOther?: (string | null);
    city: string;
    provinceState: string;
    country: string;
    postalcodeZipcode?: (string | null);
    organizationId?: (number | null);
};

export type OrganizationBalanceResponseSchema = {
    name: string;
    registered: boolean;
    organizationId: number;
    totalBalance: number;
    reservedBalance: number;
};

export type OrganizationCreateSchema = {
    name: string;
    operatingName: string;
    email?: (string | null);
    phone?: (string | null);
    edrmsRecord?: (string | null);
    organizationStatusId: number;
    organizationTypeId: number;
    address: OrganizationAddressCreateSchema;
    attorneyAddress: OrganizationAttorneyAddressCreateSchema;
};

export type OrganizationDetailsSchema = {
    name: string;
    address: (string | null);
    email: (string | null);
    phone: (string | null);
};

export type OrganizationListSchema = {
    pagination: PaginationResponseSchema;
    organizations: Array<lcfs__web__api__organizations__schema__OrganizationSchema>;
};

export type OrganizationResponseSchema = {
    organizationId: number;
    name: string;
    operatingName: string;
    email?: (string | null);
    phone?: (string | null);
    edrmsRecord?: (string | null);
    orgStatus?: (OrganizationStatusSchema | null);
    orgAddress?: (OrganizationAddressSchema | null);
    orgAttorneyAddress?: (OrganizationAttorneyAddressSchema | null);
};

export type OrganizationStatusEnum = 'Unregistered' | 'Registered' | 'Suspended' | 'Canceled';

export type OrganizationStatusSchema = {
    organizationStatusId: number;
    status: OrganizationStatusEnum;
    description?: (string | null);
};

export type OrganizationSummaryResponseSchema_Input = {
    organizationId: number;
    name?: (string | null);
    operatingName?: (string | null);
    totalBalance?: (number | null);
    reservedBalance?: (number | null);
    orgStatus?: (OrganizationStatusSchema | null);
};

export type OrganizationSummaryResponseSchema_Output = {
    organizationId: number;
    name?: (string | null);
    operatingName?: (string | null);
    totalBalance?: (number | null);
    reservedBalance?: (number | null);
    orgStatus?: (OrganizationStatusSchema | null);
};

export type OrganizationTypeEnum = 'Fuel Supplier' | 'Electricity Supplier' | 'Broker' | 'Utilities (local or public)';

export type OrganizationTypeSchema = {
    organizationTypeId: number;
    orgType: OrganizationTypeEnum;
    description?: (string | null);
};

export type OrganizationUpdateSchema = {
    name?: (string | null);
    operatingName?: (string | null);
    email?: (string | null);
    phone?: (string | null);
    edrmsRecord?: (string | null);
    organizationStatusId?: (number | null);
    organizationTypeId?: (number | null);
    address?: (OrganizationAddressCreateSchema | null);
    attorneyAddress?: (OrganizationAttorneyAddressCreateSchema | null);
};

export type OrgComplianceReportCountsSchema = {
    inProgress: number;
    awaitingGovReview: number;
};

export type OtherUsesAllSchema = {
    otherUses: Array<OtherUsesSchema>;
};

export type OtherUsesCreateSchema = {
    otherUsesId?: (number | null);
    complianceReportId: number;
    quantitySupplied: number;
    fuelType: string;
    fuelCategory: string;
    expectedUse: string;
    units: string;
    rationale?: (string | null);
    deleted?: (boolean | null);
};

export type OtherUsesFuelCategorySchema = {
    fuelCategoryId: number;
    category: string;
    description?: (string | null);
};

export type OtherUsesListSchema = {
    otherUses: Array<OtherUsesSchema>;
    pagination: PaginationResponseSchema;
};

export type OtherUsesSchema = {
    otherUsesId?: (number | null);
    complianceReportId: number;
    quantitySupplied: number;
    fuelType: string;
    fuelCategory: string;
    expectedUse: string;
    units: string;
    rationale?: (string | null);
    deleted?: (boolean | null);
};

export type OtherUsesTableOptionsSchema = {
    fuelCategories: Array<OtherUsesFuelCategorySchema>;
    fuelTypes: Array<lcfs__web__api__other_uses__schema__FuelTypeSchema>;
    unitsOfMeasure: Array<(string)>;
    expectedUses: Array<ExpectedUseTypeSchema>;
};

export type PaginatedAllocationAgreementRequestSchema = {
    complianceReportId: number;
    filters: Array<FilterModel>;
    page: number;
    size: number;
    sortOrders: Array<SortOrder>;
};

export type PaginatedNotionalTransferRequestSchema = {
    complianceReportId: number;
    filters: Array<FilterModel>;
    page: number;
    size: number;
    sortOrders: Array<SortOrder>;
};

export type PaginatedOtherUsesRequestSchema = {
    complianceReportId: number;
    filters: Array<FilterModel>;
    page: number;
    size: number;
    sortOrders: Array<SortOrder>;
};

export type PaginationRequestSchema = {
    page?: number;
    size?: number;
    sortOrders?: Array<SortOrder>;
    filters?: Array<FilterModel>;
};

export type PaginationResponseSchema = {
    total: number;
    page: number;
    size: number;
    totalPages: number;
};

export type PortsEnum = 'Single port' | 'Dual port';

export type ProvisionOfTheActSchema = {
    provisionOfTheActId: number;
    name: string;
};

export type ReceivedOrTransferredEnumSchema = 'Received' | 'Transferred';

/**
 * DTO for redis values.
 */
export type RedisValueDTO = {
    key: string;
    value?: (string | null);
};

export type ReportingFrequency = 'Annual' | 'Quarterly';

export type RoleSchema = {
    roleId: number;
    name?: (string | null);
    description?: (string | null);
    displayOrder?: (number | null);
    isGovernmentRole: boolean;
};

export type SearchFuelCodeList = {
    fuelCodes: (Array<(string)> | Array<FuelCodeCloneSchema>);
};

export type SortOrder = {
    field: string;
    direction: string;
};

export type SummarySchema = {
    summaryId: number;
    isLocked: boolean;
    [key: string]: unknown | number | boolean;
};

export type SupplementalInitiatorType = 'Supplier Supplemental' | 'Government Reassessment';

export type TableOptionsSchema = {
    fuelTypes: Array<lcfs__web__api__fuel_code__schema__FuelTypeSchema>;
    transportModes: Array<TransportModeSchema>;
    fuelCodePrefixes: Array<FuelCodePrefixSchema>;
    latestFuelCodes: (Array<lcfs__web__api__fuel_code__schema__FuelCodeSchema> | null);
    fieldOptions: FieldOptions;
    fpLocations: Array<FPLocationsSchema>;
    facilityNameplateCapacityUnits: Array<FuelTypeQuantityUnitsEnumSchema>;
};

export type TransactionCountsSchema = {
    transfers: number;
    initiativeAgreements: number;
    adminAdjustments: number;
};

export type TransactionListSchema = {
    pagination: PaginationResponseSchema;
    transactions: Array<TransactionViewSchema>;
};

export type TransactionStatusEnum = 'Draft' | 'Recommended' | 'Sent' | 'Submitted' | 'Approved' | 'Recorded' | 'Refused' | 'Deleted' | 'Declined' | 'Rescinded';

export type TransactionStatusSchema = {
    status: TransactionStatusEnum;
    description?: (string | null);
};

export type TransactionViewSchema = {
    transactionId: number;
    transactionType: string;
    fromOrganization?: (string | null);
    toOrganization: string;
    quantity: number;
    pricePerUnit?: (number | null);
    status: string;
    createDate: string;
    updateDate: string;
};

export type TransferCategorySchema = {
    transferCategoryId: number;
    category: string;
};

export type TransferCommentSchema = {
    name: string;
    comment?: (string | null);
};

export type TransferCreateSchema = {
    transferId?: (number | null);
    fromOrganizationId: number;
    toOrganizationId: number;
    fromTransactionId?: (number | null);
    toTransactionId?: (number | null);
    agreementDate?: (string | null);
    quantity?: (number | null);
    pricePerUnit?: (number | null);
    fromOrgComment?: (string | null);
    toOrgComment?: (string | null);
    govComment?: (string | null);
    transferCategoryId?: (number | null);
    currentStatusId?: (number | null);
    currentStatus?: (TransferStatusEnum | null);
    recommendation?: (TransferRecommendationEnumSchema | null);
};

export type TransferHistorySchema = {
    createDate: string;
    transferStatus: TransferStatusSchema;
    userProfile: TransferHistoryUserSchema;
};

export type TransferHistoryUserSchema = {
    firstName: string;
    lastName: string;
    organization?: (TransferOrganizationSchema | null);
};

export type TransferOrganizationSchema = {
    organizationId: number;
    name: string;
};

export type TransferRecommendationEnumSchema = 'Record' | 'Refuse';

export type TransferSchema = {
    transferId: number;
    fromOrganization: TransferOrganizationSchema;
    toOrganization: TransferOrganizationSchema;
    agreementDate: string;
    quantity: number;
    pricePerUnit: number;
    comments?: (Array<TransferCommentSchema> | null);
    fromOrgComment?: (string | null);
    toOrgComment?: (string | null);
    govComment?: (string | null);
    currentStatus: TransferStatusSchema;
    transferCategory?: (TransferCategorySchema | null);
    transferHistory?: (Array<TransferHistorySchema> | null);
    recommendation?: (TransferRecommendationEnumSchema | null);
};

export type TransferStatusEnum = 'Draft' | 'Deleted' | 'Sent' | 'Submitted' | 'Recommended' | 'Recorded' | 'Refused' | 'Declined' | 'Rescinded';

export type TransferStatusSchema = {
    transferStatusId: number;
    status: string;
};

export type TransportModeSchema = {
    transportModeId: number;
    transportMode: string;
};

export type UnitOfMeasureSchema = {
    uomId: number;
    name: string;
};

export type UserActivitiesResponseSchema = {
    activities: Array<UserActivitySchema>;
    pagination: PaginationResponseSchema;
};

export type UserActivitySchema = {
    transactionId: number;
    actionTaken: string;
    transactionType: string;
    createDate: string;
    userId?: (number | null);
};

/**
 * DTO for user values.
 */
export type UserBaseSchema = {
    userProfileId: number;
    keycloakUsername: string;
    keycloakEmail: string;
    email?: (string | null);
    title?: (string | null);
    phone?: (string | null);
    firstName?: (string | null);
    lastName?: (string | null);
    isActive: (boolean | string);
    mobilePhone?: (string | null);
    organization?: (OrganizationSummaryResponseSchema_Output | null);
    roles?: (Array<RoleSchema> | null);
    isGovernmentUser?: (boolean | null);
};

export type UserCreateSchema = {
    userProfileId?: (number | null);
    title: string;
    keycloakUsername: string;
    keycloakEmail: string;
    email?: (string | null);
    phone?: (string | null);
    mobilePhone?: (string | null);
    firstName: string;
    lastName: string;
    isActive: boolean;
    organizationId?: (number | null);
    organization?: (OrganizationSummaryResponseSchema_Input | null);
    roles?: (Array<(string)> | null);
};

export type UserLoginHistoryResponseSchema = {
    histories: Array<UserLoginHistorySchema>;
    pagination: PaginationResponseSchema;
};

export type UserLoginHistorySchema = {
    userLoginHistoryId: number;
    keycloakEmail: string;
    externalUsername: string;
    keycloakUserId: string;
    isLoginSuccessful: boolean;
    loginErrorMessage?: (string | null);
    createDate: string;
};

export type UsersSchema = {
    pagination: PaginationResponseSchema;
    users: Array<UserBaseSchema>;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type GetAdminAdjustmentData = {
    path: {
        admin_adjustment_id: number;
    };
};

export type GetAdminAdjustmentResponse = (AdminAdjustmentSchema);

export type GetAdminAdjustmentError = (HTTPValidationError);

export type UpdateAdminAdjustmentData = {
    body: AdminAdjustmentUpdateSchema;
};

export type UpdateAdminAdjustmentResponse = (AdminAdjustmentSchema);

export type UpdateAdminAdjustmentError = (HTTPValidationError);

export type CreateAdminAdjustmentData = {
    body: AdminAdjustmentCreateSchema;
};

export type CreateAdminAdjustmentResponse = (AdminAdjustmentSchema);

export type CreateAdminAdjustmentError = (HTTPValidationError);

export type GetAllocationAgreementTableOptionsResponse = (AllocationAgreementTableOptionsSchema);

export type GetAllocationAgreementTableOptionsError = unknown;

export type GetAllocationAgreementsData = {
    body: ComplianceReportRequestSchema;
};

export type GetAllocationAgreementsResponse = (AllocationAgreementAllSchema);

export type GetAllocationAgreementsError = (HTTPValidationError);

export type GetAllocationAgreementsPaginatedData = {
    body: PaginatedAllocationAgreementRequestSchema;
};

export type GetAllocationAgreementsPaginatedResponse = (AllocationAgreementListSchema);

export type GetAllocationAgreementsPaginatedError = (HTTPValidationError);

export type SaveAllocationAgreementsRowData = {
    body: AllocationAgreementCreateSchema;
};

export type SaveAllocationAgreementsRowResponse = ((AllocationAgreementSchema | DeleteAllocationAgreementResponseSchema));

export type SaveAllocationAgreementsRowError = (HTTPValidationError);

export type SearchAllocationAgreementTableOptionsStringsData = {
    query?: {
        /**
         * Trading partner (company) for filtering options
         */
        transactionPartner?: (string | null);
    };
};

export type SearchAllocationAgreementTableOptionsStringsResponse = (Array<OrganizationDetailsSchema>);

export type SearchAllocationAgreementTableOptionsStringsError = (HTTPValidationError);

export type GetAuditLogData = {
    query?: {
        /**
         * Filter by operation
         */
        operation?: (string | null);
        /**
         * Filter by table name
         */
        table_name?: (string | null);
    };
};

export type GetAuditLogResponse = (AuditLogResponseSchema);

export type GetAuditLogError = (HTTPValidationError);

export type GetCompliancePeriodsResponse = (Array<CompliancePeriodSchema>);

export type GetCompliancePeriodsError = unknown;

export type GetComplianceReportsData = {
    body: PaginationRequestSchema;
};

export type GetComplianceReportsResponse = (ComplianceReportListSchema);

export type GetComplianceReportsError = (HTTPValidationError);

export type GetComplianceReportByIdData = {
    path: {
        report_id: number;
    };
};

export type GetComplianceReportByIdResponse = (ComplianceReportBaseSchema);

export type GetComplianceReportByIdError = (HTTPValidationError);

export type UpdateComplianceReportData = {
    body: ComplianceReportUpdateSchema;
    path: {
        report_id: number;
    };
};

export type UpdateComplianceReportResponse = (ComplianceReportBaseSchema);

export type UpdateComplianceReportError = (HTTPValidationError);

export type GetComplianceReportSummaryData = {
    path: {
        report_id: number;
    };
};

export type GetComplianceReportSummaryResponse = (ComplianceReportSummarySchema);

export type GetComplianceReportSummaryError = (HTTPValidationError);

export type UpdateComplianceReportSummaryData = {
    body: ComplianceReportSummarySchema;
    path: {
        report_id: number;
    };
};

export type UpdateComplianceReportSummaryResponse = (ComplianceReportSummarySchema);

export type UpdateComplianceReportSummaryError = (HTTPValidationError);

export type CreateSupplementalReportData = {
    path: {
        report_id: number;
    };
};

export type CreateSupplementalReportResponse = (ComplianceReportBaseSchema);

export type CreateSupplementalReportError = (HTTPValidationError);

export type GetDirectorReviewCountsResponse = (DirectorReviewCountsSchema);

export type GetDirectorReviewCountsError = unknown;

export type GetTransactionCountsResponse = (TransactionCountsSchema);

export type GetTransactionCountsError = unknown;

export type GetOrgTransactionCountsResponse = (OrganizarionTransactionCountsSchema);

export type GetOrgTransactionCountsError = unknown;

export type GetOrgComplianceReportCountsResponse = (OrgComplianceReportCountsSchema);

export type GetOrgComplianceReportCountsError = unknown;

export type MetricsResponse = (unknown);

export type MetricsError = unknown;

export type GetAllDocumentsData = {
    path: {
        parent_id: number;
        parent_type: string;
    };
};

export type GetAllDocumentsResponse = (Array<FileResponseSchema>);

export type GetAllDocumentsError = (HTTPValidationError);

export type UploadFileData = {
    body: Body_uploadFile;
    path: {
        parent_id: number;
        parent_type: string;
    };
};

export type UploadFileResponse = (FileResponseSchema);

export type UploadFileError = (HTTPValidationError);

export type StreamDocumentData = {
    path: {
        document_id: number;
        parent_id: number;
        parent_type: string;
    };
};

export type StreamDocumentResponse = (unknown);

export type StreamDocumentError = (HTTPValidationError);

export type DeleteFileData = {
    path: {
        document_id: number;
        parent_id: number;
        parent_type: string;
    };
};

export type DeleteFileResponse = (unknown);

export type DeleteFileError = (HTTPValidationError);

export type SendEchoMessageData = {
    body: Message;
};

export type SendEchoMessageResponse = (Message);

export type SendEchoMessageError = (HTTPValidationError);

export type GetFseOptionsResponse = (FSEOptionsSchema);

export type GetFseOptionsError = unknown;

export type GetFinalSupplyEquipmentsData = {
    body: CommonPaginatedReportRequestSchema;
};

export type GetFinalSupplyEquipmentsResponse = (FinalSupplyEquipmentsSchema);

export type GetFinalSupplyEquipmentsError = (HTTPValidationError);

export type SaveFinalSupplyEquipmentRowData = {
    body: FinalSupplyEquipmentCreateSchema;
};

export type SaveFinalSupplyEquipmentRowResponse = ((FinalSupplyEquipmentSchema | DeleteFinalSupplyEquipmentResponseSchema));

export type SaveFinalSupplyEquipmentRowError = (HTTPValidationError);

export type SearchTableOptionsData = {
    query?: {
        /**
         * Manfacturer for filtering options
         */
        manufacturer?: (string | null);
    };
};

export type SearchTableOptionsResponse = (Array<(string)>);

export type SearchTableOptionsError = (HTTPValidationError);

export type GetFuelCodeTableOptionsResponse = (TableOptionsSchema);

export type GetFuelCodeTableOptionsError = unknown;

export type SearchFuelCodeTableOptionsStringsData = {
    query?: {
        /**
         * Company for filtering options
         */
        company?: (string | null);
        /**
         * Contact email for filtering options
         */
        contactEmail?: (string | null);
        /**
         * Contact name for filtering options
         */
        contactName?: (string | null);
        /**
         * Based on flag retrieve entire row data or just the list of distinct values
         */
        distinctSearch?: (boolean | null);
        /**
         * Fuel code for filtering options
         */
        fuelCode?: (string | null);
        /**
         * Prefix for filtering options
         */
        prefix?: (string | null);
    };
};

export type SearchFuelCodeTableOptionsStringsResponse = ((SearchFuelCodeList | Array<(string)>));

export type SearchFuelCodeTableOptionsStringsError = (HTTPValidationError);

export type GetFuelCodesData = {
    body: PaginationRequestSchema;
};

export type GetFuelCodesResponse = (FuelCodesSchema);

export type GetFuelCodesError = (HTTPValidationError);

export type GetFuelCodeData = {
    path: {
        fuel_code_id: number;
    };
};

export type GetFuelCodeResponse = (lcfs__web__api__fuel_code__schema__FuelCodeSchema);

export type GetFuelCodeError = (HTTPValidationError);

export type UpdateFuelCodeData = {
    body: FuelCodeCreateSchema;
    path: {
        fuel_code_id: number;
    };
};

export type UpdateFuelCodeResponse = (unknown);

export type UpdateFuelCodeError = (HTTPValidationError);

export type DeleteFuelCodeData = {
    path: {
        fuel_code_id: number;
    };
};

export type DeleteFuelCodeResponse = (unknown);

export type DeleteFuelCodeError = (HTTPValidationError);

export type SaveFuelCodeRowData = {
    body: FuelCodeCreateSchema;
};

export type SaveFuelCodeRowResponse = ((lcfs__web__api__fuel_code__schema__FuelCodeSchema | DeleteFuelCodeResponseSchema));

export type SaveFuelCodeRowError = (HTTPValidationError);

export type GetFuelExportTableOptionsData = {
    query: {
        compliancePeriod: string;
    };
};

export type GetFuelExportTableOptionsResponse = (lcfs__web__api__fuel_export__schema__FuelTypeOptionsResponse);

export type GetFuelExportTableOptionsError = (HTTPValidationError);

export type GetFuelExportsData = {
    body: CommonPaginatedReportRequestSchema;
};

export type GetFuelExportsResponse = (FuelExportsSchema);

export type GetFuelExportsError = (HTTPValidationError);

export type SaveFuelExportRowData = {
    body: FuelExportCreateUpdateSchema;
};

export type SaveFuelExportRowResponse = ((FuelExportSchema | DeleteFuelExportResponseSchema));

export type SaveFuelExportRowError = (HTTPValidationError);

export type GetFsTableOptionsData = {
    query: {
        compliancePeriod: string;
    };
};

export type GetFsTableOptionsResponse = (lcfs__web__api__fuel_supply__schema__FuelTypeOptionsResponse);

export type GetFsTableOptionsError = (HTTPValidationError);

export type GetFuelSupplyData = {
    body: CommonPaginatedReportRequestSchema;
};

export type GetFuelSupplyResponse = (FuelSuppliesSchema);

export type GetFuelSupplyError = (HTTPValidationError);

export type SaveFuelSupplyRowData = {
    body: FuelSupplyCreateUpdateSchema;
};

export type SaveFuelSupplyRowResponse = ((FuelSupplyResponseSchema | DeleteFuelSupplyResponseSchema));

export type SaveFuelSupplyRowError = (HTTPValidationError);

export type GetFuelTypeOthersResponse = (Array<(string)>);

export type GetFuelTypeOthersError = unknown;

export type GetInitiativeAgreementData = {
    path: {
        initiative_agreement_id: number;
    };
};

export type GetInitiativeAgreementResponse = (InitiativeAgreementSchema);

export type GetInitiativeAgreementError = (HTTPValidationError);

export type UpdateInitiativeAgreementData = {
    body: InitiativeAgreementUpdateSchema;
};

export type UpdateInitiativeAgreementResponse = (InitiativeAgreementSchema);

export type UpdateInitiativeAgreementError = (HTTPValidationError);

export type CreateInitiativeAgreementData = {
    body: InitiativeAgreementCreateSchema;
};

export type CreateInitiativeAgreementResponse = (InitiativeAgreementSchema);

export type CreateInitiativeAgreementError = (HTTPValidationError);

export type CreateCommentData = {
    body: InternalCommentCreateSchema;
};

export type CreateCommentResponse = (InternalCommentResponseSchema);

export type CreateCommentError = (HTTPValidationError);

export type GetCommentsData = {
    path: {
        entity_id: number;
        entity_type: string;
    };
};

export type GetCommentsResponse = (Array<InternalCommentResponseSchema>);

export type GetCommentsError = (HTTPValidationError);

export type UpdateCommentData = {
    body: InternalCommentUpdateSchema;
    path: {
        internal_comment_id: number;
    };
};

export type UpdateCommentResponse = (InternalCommentResponseSchema);

export type UpdateCommentError = (HTTPValidationError);

export type HealthCheckResponse = (unknown);

export type HealthCheckError = unknown;

export type GetNotificationsChannelSubscriptionsData = {
    query: {
        response_model?: unknown;
        user: unknown;
    };
};

export type GetNotificationsChannelSubscriptionsResponse = (unknown);

export type GetNotificationsChannelSubscriptionsError = (HTTPValidationError);

export type GetNotificationData = {
    path: {
        notification_id: number;
    };
    query: {
        response_model?: unknown;
        user: unknown;
    };
};

export type GetNotificationResponse = (EntityResponse);

export type GetNotificationError = (HTTPValidationError);

export type UpdateNotificationData = {
    body: NotificationMessageRequest;
    path: {
        notification_id: number;
    };
    query: {
        response_model?: unknown;
        user: unknown;
    };
};

export type UpdateNotificationResponse = (void);

export type UpdateNotificationError = (HTTPValidationError);

export type GetNotificationChannelSubscriptionData = {
    path: {
        notification_channel_subscription_id: number;
    };
    query: {
        response_model?: unknown;
        user: unknown;
    };
};

export type GetNotificationChannelSubscriptionResponse = (EntityResponse);

export type GetNotificationChannelSubscriptionError = (HTTPValidationError);

export type UpdateNotificationChannelSubscriptionData = {
    body: NotificationChannelSubscriptionRequest;
    path: {
        notification_channel_subscription_id: number;
    };
    query: {
        response_model?: unknown;
        user: unknown;
    };
};

export type UpdateNotificationChannelSubscriptionResponse = (void);

export type UpdateNotificationChannelSubscriptionError = (HTTPValidationError);

export type DeleteNotificationChannelSubscriptionData = {
    path: {
        notification_channel_subscription_id: number;
    };
    query: {
        response_model?: unknown;
        user: unknown;
    };
};

export type DeleteNotificationChannelSubscriptionResponse = (void);

export type DeleteNotificationChannelSubscriptionError = (HTTPValidationError);

export type GetNotionalTransferTableOptionsResponse = (NotionalTransferTableOptionsSchema);

export type GetNotionalTransferTableOptionsError = unknown;

export type GetNotionalTransfersData = {
    body: ComplianceReportRequestSchema;
};

export type GetNotionalTransfersResponse = (NotionalTransfersAllSchema);

export type GetNotionalTransfersError = (HTTPValidationError);

export type GetNotionalTransfersPaginatedData = {
    body: PaginatedNotionalTransferRequestSchema;
};

export type GetNotionalTransfersPaginatedResponse = (NotionalTransfersSchema);

export type GetNotionalTransfersPaginatedError = (HTTPValidationError);

export type GetNotionalTransferData = {
    path: {
        notional_transfer_id: number;
    };
};

export type GetNotionalTransferResponse = (NotionalTransferSchema);

export type GetNotionalTransferError = (HTTPValidationError);

export type SaveNotionalTransferRowData = {
    body: NotionalTransferCreateSchema;
};

export type SaveNotionalTransferRowResponse = ((NotionalTransferSchema | DeleteNotionalTransferResponseSchema));

export type SaveNotionalTransferRowError = (HTTPValidationError);

export type GetOrgUsersData = {
    body: PaginationRequestSchema;
    path: {
        organization_id: number;
    };
    query?: {
        /**
         * Active or Inactive users list
         */
        status?: string;
    };
};

export type GetOrgUsersResponse = (UsersSchema);

export type GetOrgUsersError = (HTTPValidationError);

export type GetOrgUserByIdData = {
    path: {
        organization_id: number;
        user_id: number;
    };
};

export type GetOrgUserByIdResponse = (UserBaseSchema);

export type GetOrgUserByIdError = (HTTPValidationError);

export type UpdateOrgUserData = {
    body: UserCreateSchema;
    path: {
        organization_id: number;
        user_id: number;
    };
};

export type UpdateOrgUserResponse = (UserBaseSchema);

export type UpdateOrgUserError = (HTTPValidationError);

export type CreateOrgUserData = {
    body: UserCreateSchema;
    path: {
        organization_id: number;
    };
};

export type CreateOrgUserResponse = (unknown);

export type CreateOrgUserError = (HTTPValidationError);

export type GetTransactionsPaginatedForOrgData = {
    body: PaginationRequestSchema;
};

export type GetTransactionsPaginatedForOrgResponse = (TransactionListSchema);

export type GetTransactionsPaginatedForOrgError = (HTTPValidationError);

export type ExportTransactionsForOrgData = {
    query?: {
        /**
         * File export format
         */
        format?: string;
    };
};

export type ExportTransactionsForOrgResponse = (unknown);

export type ExportTransactionsForOrgError = (HTTPValidationError);

export type CreateTransferData = {
    body: TransferCreateSchema;
    path: {
        organization_id: number;
    };
};

export type CreateTransferResponse = (TransferSchema);

export type CreateTransferError = (HTTPValidationError);

export type UpdateTransferData = {
    body: TransferCreateSchema;
    path: {
        organization_id: number;
        transfer_id: number;
    };
};

export type UpdateTransferResponse = (TransferSchema);

export type UpdateTransferError = (HTTPValidationError);

export type CreateComplianceReportData = {
    body: ComplianceReportCreateSchema;
    path: {
        organization_id: number;
    };
};

export type CreateComplianceReportResponse = (ComplianceReportBaseSchema);

export type CreateComplianceReportError = (HTTPValidationError);

export type GetOrgComplianceReportsData = {
    body: PaginationRequestSchema;
    path: {
        organization_id: number;
    };
};

export type GetOrgComplianceReportsResponse = (ComplianceReportListSchema);

export type GetOrgComplianceReportsError = (HTTPValidationError);

export type GetAllOrgReportedYearsData = {
    path: {
        organization_id: number;
    };
};

export type GetAllOrgReportedYearsResponse = (Array<CompliancePeriodSchema>);

export type GetAllOrgReportedYearsError = (HTTPValidationError);

export type GetOrgComplianceReportByIdData = {
    path: {
        organization_id: number;
        report_id: number;
    };
};

export type GetOrgComplianceReportByIdResponse = (ComplianceReportBaseSchema);

export type GetOrgComplianceReportByIdError = (HTTPValidationError);

export type ExportOrganizationsResponse = (unknown);

export type ExportOrganizationsError = unknown;

export type CreateOrganizationData = {
    body: OrganizationCreateSchema;
};

export type CreateOrganizationResponse = (OrganizationResponseSchema);

export type CreateOrganizationError = (HTTPValidationError);

export type SearchOrganizationsData = {
    query: {
        /**
         * Company name or operating name
         */
        org_name: string;
    };
};

export type SearchOrganizationsResponse = (Array<OrganizationDetailsSchema>);

export type SearchOrganizationsError = (HTTPValidationError);

export type GetOrganizationData = {
    path: {
        organization_id: number;
    };
};

export type GetOrganizationResponse = (OrganizationResponseSchema);

export type GetOrganizationError = (HTTPValidationError);

export type UpdateOrganizationData = {
    body: OrganizationUpdateSchema;
    path: {
        organization_id: number;
    };
};

export type UpdateOrganizationResponse = (unknown);

export type UpdateOrganizationError = (HTTPValidationError);

export type GetOrganizationsData = {
    body: PaginationRequestSchema;
};

export type GetOrganizationsResponse = (OrganizationListSchema);

export type GetOrganizationsError = (HTTPValidationError);

export type GetOrganizationStatusesResponse = (Array<OrganizationStatusSchema>);

export type GetOrganizationStatusesError = unknown;

export type GetOrganizationTypesResponse = (Array<OrganizationTypeSchema>);

export type GetOrganizationTypesError = unknown;

export type GetOrganizationNamesResponse = (Array<OrganizationSummaryResponseSchema_Output>);

export type GetOrganizationNamesError = unknown;

export type GetExternallyRegisteredOrganizationsResponse = (Array<OrganizationSummaryResponseSchema_Output>);

export type GetExternallyRegisteredOrganizationsError = unknown;

export type GetBalancesByOrgIdData = {
    path: {
        organization_id: number;
    };
};

export type GetBalancesByOrgIdResponse = (OrganizationBalanceResponseSchema);

export type GetBalancesByOrgIdError = (HTTPValidationError);

export type GetBalancesResponse = (OrganizationBalanceResponseSchema);

export type GetBalancesError = unknown;

export type GetOtherUsesTableOptionsResponse = (OtherUsesTableOptionsSchema);

export type GetOtherUsesTableOptionsError = unknown;

export type GetOtherUsesData = {
    body: ComplianceReportRequestSchema;
};

export type GetOtherUsesResponse = (OtherUsesAllSchema);

export type GetOtherUsesError = (HTTPValidationError);

export type GetOtherUsesPaginatedData = {
    body: PaginatedOtherUsesRequestSchema;
};

export type GetOtherUsesPaginatedResponse = (OtherUsesListSchema);

export type GetOtherUsesPaginatedError = (HTTPValidationError);

export type SaveOtherUsesRowData = {
    body: OtherUsesCreateSchema;
};

export type SaveOtherUsesRowResponse = ((OtherUsesSchema | DeleteOtherUsesResponseSchema));

export type SaveOtherUsesRowError = (HTTPValidationError);

export type GetRedisValueData = {
    query: {
        key: string;
    };
};

export type GetRedisValueResponse = (RedisValueDTO);

export type GetRedisValueError = (HTTPValidationError);

export type SetRedisValueData = {
    body: RedisValueDTO;
};

export type SetRedisValueResponse = (unknown);

export type SetRedisValueError = (HTTPValidationError);

export type GetRolesData = {
    query?: {
        government_roles_only?: boolean;
    };
};

export type GetRolesResponse = (Array<RoleSchema>);

export type GetRolesError = (HTTPValidationError);

export type GetTransactionsPaginatedByOrgData = {
    body: PaginationRequestSchema;
    path: {
        organization_id: number;
    };
};

export type GetTransactionsPaginatedByOrgResponse = (TransactionListSchema);

export type GetTransactionsPaginatedByOrgError = (HTTPValidationError);

export type ExportTransactionsByOrgData = {
    path: {
        organization_id: number;
    };
    query?: {
        /**
         * File export format
         */
        format?: string;
    };
};

export type ExportTransactionsByOrgResponse = (unknown);

export type ExportTransactionsByOrgError = (HTTPValidationError);

export type GetTransactionsPaginatedData = {
    body: PaginationRequestSchema;
};

export type GetTransactionsPaginatedResponse = (TransactionListSchema);

export type GetTransactionsPaginatedError = (HTTPValidationError);

export type ExportTransactionsData = {
    query?: {
        /**
         * File export format
         */
        format?: string;
    };
};

export type ExportTransactionsResponse = (unknown);

export type ExportTransactionsError = (HTTPValidationError);

export type GetTransactionStatusesResponse = (Array<TransactionStatusSchema>);

export type GetTransactionStatusesError = unknown;

export type GetAllTransfersResponse = (Array<TransferSchema>);

export type GetAllTransfersError = unknown;

export type GetTransferData = {
    path: {
        transfer_id: number;
    };
};

export type GetTransferResponse = (TransferSchema);

export type GetTransferError = (HTTPValidationError);

export type GovernmentUpdateTransferData = {
    body: TransferCreateSchema;
    path: {
        transfer_id: number;
    };
};

export type GovernmentUpdateTransferResponse = (TransferSchema);

export type GovernmentUpdateTransferError = (HTTPValidationError);

export type UpdateCategoryData = {
    body?: string;
    path: {
        transfer_id: number;
    };
};

export type UpdateCategoryResponse = (TransferSchema);

export type UpdateCategoryError = (HTTPValidationError);

export type ExportUsersData = {
    query?: {
        /**
         * File export format
         */
        format?: string;
    };
};

export type ExportUsersResponse = (unknown);

export type ExportUsersError = (HTTPValidationError);

export type GetUsersData = {
    body: PaginationRequestSchema;
};

export type GetUsersResponse = (UsersSchema);

export type GetUsersError = (HTTPValidationError);

export type GetCurrentUserResponse = (UserBaseSchema);

export type GetCurrentUserError = unknown;

export type GetUserByIdData = {
    path: {
        user_id: number;
    };
};

export type GetUserByIdResponse = (UserBaseSchema);

export type GetUserByIdError = (HTTPValidationError);

export type UpdateUserData = {
    body: UserCreateSchema;
    path: {
        user_id: number;
    };
};

export type UpdateUserResponse = (UserBaseSchema);

export type UpdateUserError = (HTTPValidationError);

export type DeleteUserData = {
    path: {
        user_id: number;
    };
};

export type DeleteUserResponse = (unknown);

export type DeleteUserError = (HTTPValidationError);

export type CreateUserData = {
    body: UserCreateSchema;
};

export type CreateUserResponse = (unknown);

export type CreateUserError = (HTTPValidationError);

export type GetUserRolesData = {
    path: {
        user_id: number;
    };
};

export type GetUserRolesResponse = (Array<RoleSchema>);

export type GetUserRolesError = (HTTPValidationError);

export type GetUserActivitiesData = {
    body: PaginationRequestSchema;
    path: {
        user_id: number;
    };
};

export type GetUserActivitiesResponse = (UserActivitiesResponseSchema);

export type GetUserActivitiesError = (HTTPValidationError);

export type GetAllUserActivitiesData = {
    body: PaginationRequestSchema;
};

export type GetAllUserActivitiesResponse = (UserActivitiesResponseSchema);

export type GetAllUserActivitiesError = (HTTPValidationError);

export type GetAllUserLoginHistoryData = {
    body: PaginationRequestSchema;
};

export type GetAllUserLoginHistoryResponse = (UserLoginHistoryResponseSchema);

export type GetAllUserLoginHistoryError = (HTTPValidationError);