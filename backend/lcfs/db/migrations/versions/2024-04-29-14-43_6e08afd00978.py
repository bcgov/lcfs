"""Fuel code and related tables creation

Revision ID: 6e08afd00978
Revises: a1c6c67c49c6
Create Date: 2024-04-29 14:43:47.390529

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "6e08afd00978"
down_revision = "95a73f60a931"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("Draft", "Approved", "Deleted", name="fuel_code_status_enum").create(
        op.get_bind()
    )
    op.create_table(
        "fuel_code_status",
        sa.Column(
            "fuel_code_status_id", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "Draft",
                "Approved",
                "Deleted",
                name="fuel_code_status_enum",
                create_type=False,
            ),
            nullable=True,
            comment="Fuel code status",
        ),
        sa.Column(
            "description",
            sa.String(length=500),
            nullable=True,
            comment="Organization description",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "display_order",
            sa.Integer(),
            nullable=True,
            comment="Relative rank in display sorting order",
        ),
        sa.PrimaryKeyConstraint("fuel_code_status_id"),
        comment="Represents fuel code status",
    )
    op.create_table(
        "fuel_code",
        sa.Column(
            "fuel_code_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the fuel code",
        ),
        sa.Column(
            "fuel_status_id", sa.Integer(), nullable=True, comment="Fuel code status"
        ),
        sa.Column("prefix_id", sa.Integer(), nullable=False, comment="Prefix ID"),
        sa.Column(
            "fuel_code", sa.String(length=20), nullable=False, comment="Fuel code"
        ),
        sa.Column(
            "company", sa.String(length=500), nullable=False, comment="Company name"
        ),
        sa.Column(
            "carbon_intensity", sa.Numeric(precision=10, scale=2), nullable=False
        ),
        sa.Column("edrms", sa.String(length=255), nullable=False, comment="EDRMS #"),
        sa.Column(
            "last_updated",
            sa.Date(),
            nullable=False,
            comment="Date at which the record was last updated.",
        ),
        sa.Column(
            "application_date",
            sa.Date(),
            nullable=False,
            comment="application recorded date.",
        ),
        sa.Column(
            "approval_date",
            sa.Date(),
            nullable=True,
            comment="Date at which the record was approved.",
        ),
        sa.Column("fuel_type_id", sa.Integer(), nullable=False, comment="Fuel type ID"),
        sa.Column(
            "feedstock", sa.String(length=255), nullable=False, comment="Feedstock"
        ),
        sa.Column(
            "feedstock_location",
            sa.String(length=1000),
            nullable=False,
            comment="Feedstock location",
        ),
        sa.Column(
            "feedstock_misc",
            sa.String(length=500),
            nullable=True,
            comment="Feedstock misc",
        ),
        sa.Column(
            "fuel_production_facility_location",
            sa.String(length=1000),
            nullable=False,
            comment="Location of the fuel production",
        ),
        sa.Column(
            "facility_nameplate_capacity",
            sa.Integer(),
            nullable=True,
            comment="Nameplate capacity",
        ),
        sa.Column(
            "former_company",
            sa.String(length=500),
            nullable=True,
            comment="Former company",
        ),
        sa.Column("notes", sa.String(length=1000), nullable=True, comment="Notes"),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.ForeignKeyConstraint(
            ["fuel_status_id"],
            ["fuel_code_status.fuel_code_status_id"],
        ),
        sa.ForeignKeyConstraint(
            ["fuel_type_id"],
            ["fuel_type.fuel_type_id"],
        ),
        sa.ForeignKeyConstraint(
            ["prefix_id"],
            ["fuel_code_prefix.fuel_code_prefix_id"],
        ),
        sa.PrimaryKeyConstraint("fuel_code_id"),
        comment="Contains a list of all of fuel codes",
    )
    op.create_table(
        "feedstock_fuel_transport_mode",
        sa.Column(
            "feedstock_fuel_transport_mode_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier",
        ),
        sa.Column(
            "fuel_code_id", sa.Integer(), nullable=True, comment="Fuel code identifier"
        ),
        sa.Column(
            "transport_mode_id",
            sa.Integer(),
            nullable=True,
            comment="Transport mode identifier",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.ForeignKeyConstraint(
            ["fuel_code_id"], ["fuel_code.fuel_code_id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["transport_mode_id"],
            ["transport_mode.transport_mode_id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("feedstock_fuel_transport_mode_id"),
        sa.UniqueConstraint("fuel_code_id", "transport_mode_id"),
        comment="Contains a list of transport modes associated with feedstock fuel",
    )
    op.create_table(
        "finished_fuel_transport_mode",
        sa.Column(
            "finished_fuel_transport_mode_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier",
        ),
        sa.Column(
            "fuel_code_id", sa.Integer(), nullable=True, comment="Fuel code identifier"
        ),
        sa.Column(
            "transport_mode_id",
            sa.Integer(),
            nullable=True,
            comment="Transport mode identifier",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.ForeignKeyConstraint(
            ["fuel_code_id"], ["fuel_code.fuel_code_id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["transport_mode_id"],
            ["transport_mode.transport_mode_id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("finished_fuel_transport_mode_id"),
        sa.UniqueConstraint("fuel_code_id", "transport_mode_id"),
        comment="Contains a list of transport modes associated with finished fuel",
    )
    op.alter_column(
        "fuel_code_prefix",
        "prefix",
        existing_type=sa.VARCHAR(length=50),
        type_=sa.Text(),
        existing_nullable=False,
    )
    op.create_table_comment(
        "fuel_code_prefix",
        "Represents a Fuel code prefix",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "fuel_type",
        "fuel_type",
        existing_type=sa.VARCHAR(length=50),
        type_=sa.Text(),
        existing_nullable=False,
    )
    op.create_table_comment(
        "fuel_type", "Represents a Fuel Type", existing_comment=None, schema=None
    )
    op.alter_column(
        "transport_mode",
        "transport_mode",
        existing_type=sa.VARCHAR(length=50),
        type_=sa.Text(),
        existing_nullable=False,
    )
    op.create_table_comment(
        "transport_mode",
        "Represents a Transport Mode Type",
        existing_comment=None,
        schema=None,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table_comment(
        "transport_mode",
        existing_comment="Represents a Transport Mode Type",
        schema=None,
    )
    op.alter_column(
        "transport_mode",
        "transport_mode",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(length=50),
        existing_nullable=False,
    )
    op.drop_table_comment(
        "fuel_type", existing_comment="Represents a Fuel Type", schema=None
    )
    op.alter_column(
        "fuel_type",
        "fuel_type",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(length=50),
        existing_nullable=False,
    )
    op.drop_table_comment(
        "fuel_code_prefix",
        existing_comment="Represents a Fuel code prefix",
        schema=None,
    )
    op.alter_column(
        "fuel_code_prefix",
        "prefix",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(length=50),
        existing_nullable=False,
    )
    op.drop_table("finished_fuel_transport_mode")
    op.drop_table("feedstock_fuel_transport_mode")
    op.drop_table("fuel_code")
    op.drop_table("fuel_code_status")
    sa.Enum("Draft", "Approved", "Deleted", name="fuel_code_status_enum").drop(
        op.get_bind()
    )
    # ### end Alembic commands ###
