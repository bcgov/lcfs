"""initial migration

Revision ID: 1f2d554806ba
Revises: 
Create Date: 2023-11-17 18:00:30.221042

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "1f2d554806ba"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "category",
        sa.Column(
            "category_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the transfer category",
        ),
        sa.Column(
            "category",
            sa.String(length=500),
            nullable=True,
            comment="Transfer category",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.PrimaryKeyConstraint("category_id"),
        sa.UniqueConstraint("category_id"),
        comment="Transfer Category",
    )
    op.create_table(
        "comment",
        sa.Column(
            "comment_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for comment",
        ),
        sa.Column(
            "comment", sa.String(length=500), nullable=True, comment="Transfer category"
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.PrimaryKeyConstraint("comment_id"),
        sa.UniqueConstraint("comment_id"),
        comment="Comment for transaction",
    )
    op.create_table(
        "notification_channel",
        sa.Column(
            "notification_channel_id", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column(
            "channel_name",
            sa.Enum("EMAIL", "IN_APP", name="channel_enum"),
            nullable=False,
        ),
        sa.Column("enabled", sa.Boolean(), nullable=True),
        sa.Column("subscribe_by_default", sa.Boolean(), nullable=True),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.PrimaryKeyConstraint("notification_channel_id"),
        comment="Tracks the state and defaults for communication channels",
    )
    op.create_table(
        "notification_type",
        sa.Column(
            "notification_type_id", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column(
            "name",
            sa.Enum(
                "CREDIT_TRANSFER_CREATED",
                "CREDIT_TRANSFER_SIGNED_1OF2",
                "CREDIT_TRANSFER_SIGNED_2OF2",
                "CREDIT_TRANSFER_PROPOSAL_REFUSED",
                "CREDIT_TRANSFER_PROPOSAL_ACCEPTED",
                "CREDIT_TRANSFER_RECOMMENDED_FOR_APPROVAL",
                "CREDIT_TRANSFER_RECOMMENDED_FOR_DECLINATION",
                "CREDIT_TRANSFER_DECLINED",
                "CREDIT_TRANSFER_APPROVED",
                "CREDIT_TRANSFER_RESCINDED",
                "CREDIT_TRANSFER_COMMENT",
                "CREDIT_TRANSFER_INTERNAL_COMMENT",
                "PVR_CREATED",
                "PVR_RECOMMENDED_FOR_APPROVAL",
                "PVR_RESCINDED",
                "PVR_PULLED_BACK",
                "PVR_DECLINED",
                "PVR_APPROVED",
                "PVR_COMMENT",
                "PVR_INTERNAL_COMMENT",
                "PVR_RETURNED_TO_ANALYST",
                "DOCUMENT_PENDING_SUBMISSION",
                "DOCUMENT_SUBMITTED",
                "DOCUMENT_SCAN_FAILED",
                "DOCUMENT_RECEIVED",
                "DOCUMENT_ARCHIVED",
                "COMPLIANCE_REPORT_DRAFT",
                "COMPLIANCE_REPORT_SUBMITTED",
                "COMPLIANCE_REPORT_RECOMMENDED_FOR_ACCEPTANCE_ANALYST",
                "COMPLIANCE_REPORT_RECOMMENDED_FOR_REJECTION_ANALYST",
                "COMPLIANCE_REPORT_RECOMMENDED_FOR_ACCEPTANCE_MANAGER",
                "COMPLIANCE_REPORT_RECOMMENDED_FOR_REJECTION_MANAGER",
                "COMPLIANCE_REPORT_ACCEPTED",
                "COMPLIANCE_REPORT_REJECTED",
                "COMPLIANCE_REPORT_REQUESTED_SUPPLEMENTAL",
                "EXCLUSION_REPORT_DRAFT",
                "EXCLUSION_REPORT_SUBMITTED",
                "EXCLUSION_REPORT_RECOMMENDED_FOR_ACCEPTANCE_ANALYST",
                "EXCLUSION_REPORT_RECOMMENDED_FOR_REJECTION_ANALYST",
                "EXCLUSION_REPORT_RECOMMENDED_FOR_ACCEPTANCE_MANAGER",
                "EXCLUSION_REPORT_RECOMMENDED_FOR_REJECTION_MANAGER",
                "EXCLUSION_REPORT_ACCEPTED",
                "EXCLUSION_REPORT_REJECTED",
                "EXCLUSION_REPORT_REQUESTED_SUPPLEMENTAL",
                name="notification_type_enum",
            ),
            nullable=False,
        ),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("email_content", sa.Text(), nullable=True),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.PrimaryKeyConstraint("notification_type_id"),
        comment="Represents a Notification type",
    )
    op.create_table(
        "organization_address",
        sa.Column("organization_address_id", sa.Integer(), nullable=False),
        sa.Column(
            "name", sa.String(length=500), nullable=True, comment="Organization name"
        ),
        sa.Column("street_address", sa.String(length=500), nullable=True),
        sa.Column("address_other", sa.String(length=100), nullable=True),
        sa.Column("city", sa.String(length=100), nullable=True),
        sa.Column("province_state", sa.String(length=50), nullable=True),
        sa.Column("country", sa.String(length=100), nullable=True),
        sa.Column("postalCode_zipCode", sa.String(length=10), nullable=True),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.PrimaryKeyConstraint("organization_address_id"),
        comment="Represents an organization's address.",
    )
    op.create_table(
        "organization_attorney_address",
        sa.Column("organization_attorney_address_id", sa.Integer(), nullable=False),
        sa.Column(
            "name",
            sa.String(length=500),
            nullable=True,
            comment="Attorney's Organization name",
        ),
        sa.Column("street_address", sa.String(length=500), nullable=True),
        sa.Column("address_other", sa.String(length=100), nullable=True),
        sa.Column("city", sa.String(length=100), nullable=True),
        sa.Column("province_state", sa.String(length=50), nullable=True),
        sa.Column("country", sa.String(length=100), nullable=True),
        sa.Column("postalCode_zipCode", sa.String(length=10), nullable=True),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.PrimaryKeyConstraint("organization_attorney_address_id"),
        comment="Represents an organization attorney's address.",
    )
    op.create_table(
        "organization_status",
        sa.Column(
            "organization_status_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the organization",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "Unregistered",
                "Registered",
                "Suspended",
                "Canceled",
                name="org_status_enum",
            ),
            nullable=True,
            comment="Organization's status",
        ),
        sa.Column(
            "description",
            sa.String(length=500),
            nullable=True,
            comment="Organization description",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "display_order",
            sa.Integer(),
            nullable=True,
            comment="Relative rank in display sorting order",
        ),
        sa.PrimaryKeyConstraint("organization_status_id"),
        comment="Contains list of organization type",
    )
    op.create_table(
        "organization_type",
        sa.Column(
            "organization_type_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the organization_type",
        ),
        sa.Column(
            "org_type",
            sa.Enum(
                "fuel_supplier",
                "electricity_supplier",
                "broker",
                "utilities",
                name="org_type_enum",
            ),
            nullable=True,
            comment="Organization's Types",
        ),
        sa.Column(
            "description",
            sa.String(length=500),
            nullable=True,
            comment="Organization Types",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "display_order",
            sa.Integer(),
            nullable=True,
            comment="Relative rank in display sorting order",
        ),
        sa.PrimaryKeyConstraint("organization_type_id"),
        comment="Represents a Organization types",
    )
    op.create_table(
        "role",
        sa.Column("role_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "name",
            sa.Enum(
                "ADMINISTRATOR",
                "ANALYST",
                "COMPLIANCE_MANAGER",
                "DIRECTOR",
                "MANAGE_USERS",
                "TRANSFER",
                "COMPLIANCE_REPORTING",
                "SIGNING_AUTHORITY",
                "READ_ONLY",
                name="roleenum",
            ),
            nullable=False,
            comment="Role code. Natural key. Used internally. eg Admin, GovUser, GovDirector, etc",
        ),
        sa.Column(
            "description",
            sa.String(length=1000),
            nullable=True,
            comment="Descriptive text explaining this role. This is what's shown to the user.",
        ),
        sa.Column(
            "is_government_role",
            sa.Boolean(),
            nullable=True,
            comment="Flag. True if this is a government role (eg. Analyst, Administrator)",
        ),
        sa.Column(
            "display_order",
            sa.Integer(),
            nullable=True,
            comment="Relative rank in display sorting order",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.PrimaryKeyConstraint("role_id"),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("name"),
        comment="To hold all the available roles and  their descriptions.",
    )
    op.create_table(
        "transaction_type",
        sa.Column(
            "transaction_type_id", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column(
            "type",
            sa.Enum(
                "administrative_adjustment",
                "initiative_agreement",
                "assessment",
                "transfer",
                name="transaction_type_enum",
            ),
            nullable=True,
            comment="Transaction Types",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "display_order",
            sa.Integer(),
            nullable=True,
            comment="Relative rank in display sorting order",
        ),
        sa.PrimaryKeyConstraint("transaction_type_id"),
        comment="Represents a Transaction types",
    )
    op.create_table(
        "transfer_status",
        sa.Column(
            "transfer_status_id", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column(
            "status",
            sa.Enum(
                "draft",
                "deleted",
                "sent",
                "submitted",
                "recommended",
                "recorded",
                "refused",
                "declined",
                "rescinded",
                name="transfer_type_enum",
            ),
            nullable=True,
            comment="Transfer Status",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "display_order",
            sa.Integer(),
            nullable=True,
            comment="Relative rank in display sorting order",
        ),
        sa.PrimaryKeyConstraint("transfer_status_id"),
        comment="Represents a Transfer Status",
    )
    op.create_table(
        "user_login_history",
        sa.Column("user_login_history_id", sa.Integer(), nullable=False),
        sa.Column(
            "keycloak_email",
            sa.String(),
            nullable=False,
            comment="Keycloak email address to associate on first login.",
        ),
        sa.Column(
            "external_username",
            sa.String(length=150),
            nullable=True,
            comment="BCeID or IDIR username",
        ),
        sa.Column(
            "keycloak_user_id",
            sa.String(length=150),
            nullable=True,
            comment="This is the unique id returned from Keycloak and is the main mapping key between the LCFS user and the Keycloak user. The identity provider type will be appended as a suffix after an @ symbol. For ex. asdf1234@bceidbasic or asdf1234@idir",
        ),
        sa.Column(
            "is_login_successful",
            sa.Boolean(),
            nullable=True,
            comment="True if this login attempt was successful, false on failure.",
        ),
        sa.Column(
            "login_error_message",
            sa.String(length=500),
            nullable=True,
            comment="Error text on unsuccessful login attempt.",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.PrimaryKeyConstraint("user_login_history_id"),
        comment="Keeps track of all user login attempts",
    )
    op.create_table(
        "organization",
        sa.Column(
            "organization_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the organization",
        ),
        sa.Column(
            "name",
            sa.String(length=500),
            nullable=True,
            comment="Organization's legal name",
        ),
        sa.Column("organization_status_id", sa.Integer(), nullable=True),
        sa.Column(
            "organization_type_id",
            sa.Integer(),
            nullable=True,
            comment="Organization's type",
        ),
        sa.Column("organization_address_id", sa.Integer(), nullable=True),
        sa.Column("organization_attorney_address_id", sa.Integer(), nullable=True),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.ForeignKeyConstraint(
            ["organization_address_id"],
            ["organization_address.organization_address_id"],
        ),
        sa.ForeignKeyConstraint(
            ["organization_attorney_address_id"],
            ["organization_attorney_address.organization_attorney_address_id"],
        ),
        sa.ForeignKeyConstraint(
            ["organization_status_id"],
            ["organization_status.organization_status_id"],
        ),
        sa.ForeignKeyConstraint(
            ["organization_type_id"],
            ["organization_type.organization_type_id"],
        ),
        sa.PrimaryKeyConstraint("organization_id"),
        comment="Contains a list of all of the recognized Part 3 fuel suppliers, both past and present, as well as an entry for the government which is also considered an organization.",
    )
    op.create_table(
        "transaction",
        sa.Column(
            "transaction_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the transactions",
        ),
        sa.Column(
            "compliance_units",
            sa.BigInteger(),
            nullable=True,
            comment="Compliance Units",
        ),
        sa.Column("transaction_type_id", sa.Integer(), nullable=True),
        sa.Column("organization_id", sa.Integer(), nullable=True),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.organization_id"],
        ),
        sa.ForeignKeyConstraint(
            ["transaction_type_id"],
            ["transaction_type.transaction_type_id"],
        ),
        sa.PrimaryKeyConstraint("transaction_id"),
        sa.UniqueConstraint("transaction_id"),
        comment="Contains a list of all of the government to organization and Organization to Organization transaction.",
    )
    op.create_table(
        "user_profile",
        sa.Column("user_profile_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "keycloak_user_id",
            sa.String(length=150),
            nullable=True,
            comment="Unique id returned from Keycloak",
        ),
        sa.Column(
            "keycloak_email",
            sa.String(length=255),
            nullable=True,
            comment="keycloak email address",
        ),
        sa.Column(
            "keycloak_username",
            sa.String(length=150),
            nullable=False,
            comment="keycloak Username",
        ),
        sa.Column(
            "email",
            sa.String(length=255),
            nullable=True,
            comment="Primary email address",
        ),
        sa.Column(
            "username", sa.String(length=150), nullable=False, comment="Login Username"
        ),
        sa.Column(
            "display_name",
            sa.String(length=500),
            nullable=True,
            comment="Displayed name for user",
        ),
        sa.Column(
            "title", sa.String(length=100), nullable=True, comment="Professional Title"
        ),
        sa.Column(
            "phone", sa.String(length=50), nullable=True, comment="Primary phone number"
        ),
        sa.Column(
            "mobile_phone",
            sa.String(length=50),
            nullable=True,
            comment="Mobile phone number",
        ),
        sa.Column("organization_id", sa.Integer(), nullable=True),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.organization_id"],
        ),
        sa.PrimaryKeyConstraint("user_profile_id"),
        sa.UniqueConstraint("keycloak_username"),
        sa.UniqueConstraint("username"),
        sa.UniqueConstraint("username"),
        comment="Users who may access the application",
    )
    op.create_table(
        "issuance",
        sa.Column(
            "issuance_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the issuance",
        ),
        sa.Column(
            "compliance_units",
            sa.BigInteger(),
            nullable=True,
            comment="Compliance Units",
        ),
        sa.Column(
            "transaction_effective_date",
            sa.DateTime(),
            nullable=True,
            comment="Transaction effective date",
        ),
        sa.Column("organization_id", sa.Integer(), nullable=True),
        sa.Column("transaction_id", sa.Integer(), nullable=True),
        sa.Column("comment_id", sa.Integer(), nullable=True),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.ForeignKeyConstraint(
            ["comment_id"],
            ["comment.comment_id"],
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.organization_id"],
        ),
        sa.ForeignKeyConstraint(
            ["transaction_id"],
            ["transaction.transaction_id"],
        ),
        sa.PrimaryKeyConstraint("issuance_id"),
        sa.UniqueConstraint("issuance_id"),
        comment="Goverment to organization compliance units issuance",
    )
    op.create_table(
        "notification_channel_subscription",
        sa.Column(
            "notification_channel_subscription_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("is_enabled", sa.Boolean(), nullable=True),
        sa.Column("user_profile_id", sa.Integer(), nullable=True),
        sa.Column("channel_id", sa.Integer(), nullable=True),
        sa.Column("notification_type_id", sa.Integer(), nullable=True),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.ForeignKeyConstraint(
            ["channel_id"],
            ["notification_channel.notification_channel_id"],
        ),
        sa.ForeignKeyConstraint(
            ["notification_type_id"],
            ["notification_type.notification_type_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_profile_id"],
            ["user_profile.user_profile_id"],
        ),
        sa.PrimaryKeyConstraint("notification_channel_subscription_id"),
        comment="Represents a user's subscription to notification events",
    )
    op.create_table(
        "notification_message",
        sa.Column(
            "notification_message_id", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column("is_read", sa.Boolean(), nullable=True),
        sa.Column("is_warning", sa.Boolean(), nullable=True),
        sa.Column("is_error", sa.Boolean(), nullable=True),
        sa.Column("is_archived", sa.Boolean(), nullable=True),
        sa.Column("related_organization_id", sa.Integer(), nullable=True),
        sa.Column("origin_user_profile_id", sa.Integer(), nullable=True),
        sa.Column("related_user_profile_id", sa.Integer(), nullable=True),
        sa.Column("notification_type_id", sa.Integer(), nullable=True),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.ForeignKeyConstraint(
            ["notification_type_id"],
            ["notification_type.notification_type_id"],
        ),
        sa.ForeignKeyConstraint(
            ["origin_user_profile_id"],
            ["user_profile.user_profile_id"],
        ),
        sa.ForeignKeyConstraint(
            ["related_organization_id"],
            ["organization.organization_id"],
        ),
        sa.ForeignKeyConstraint(
            ["related_user_profile_id"],
            ["user_profile.user_profile_id"],
        ),
        sa.PrimaryKeyConstraint("notification_message_id"),
        comment="Represents a notification message sent to an application user",
    )
    op.create_table(
        "transfer",
        sa.Column(
            "transfer_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the org to org transfer record",
        ),
        sa.Column("from_organization_id", sa.Integer(), nullable=True),
        sa.Column("to_organization_id", sa.Integer(), nullable=True),
        sa.Column("transaction_id", sa.Integer(), nullable=True),
        sa.Column(
            "transaction_effective_date",
            sa.DateTime(),
            nullable=True,
            comment="transaction effective date",
        ),
        sa.Column("comment_id", sa.Integer(), nullable=True),
        sa.Column("transfer_category", sa.Integer(), nullable=True),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.ForeignKeyConstraint(
            ["comment_id"],
            ["comment.comment_id"],
        ),
        sa.ForeignKeyConstraint(
            ["from_organization_id"],
            ["organization.organization_id"],
        ),
        sa.ForeignKeyConstraint(
            ["to_organization_id"],
            ["organization.organization_id"],
        ),
        sa.ForeignKeyConstraint(
            ["transaction_id"],
            ["transaction.transaction_id"],
        ),
        sa.ForeignKeyConstraint(
            ["transfer_category"],
            ["category.category_id"],
        ),
        sa.PrimaryKeyConstraint("transfer_id"),
        sa.UniqueConstraint("transfer_id"),
        comment="Records of tranfer from Organization to Organization",
    )
    op.create_table(
        "user_role",
        sa.Column(
            "user_role_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique ID for the user role",
        ),
        sa.Column(
            "user_profile_id",
            sa.Integer(),
            nullable=True,
            comment="Foreign key to user_profile",
        ),
        sa.Column(
            "role_id", sa.Integer(), nullable=True, comment="Foreign key to role"
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["role.role_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_profile_id"],
            ["user_profile.user_profile_id"],
        ),
        sa.PrimaryKeyConstraint("user_role_id"),
        sa.UniqueConstraint(
            "user_profile_id", "role_id", name="user_role_unique_constraint"
        ),
        comment="Contains the user and role relationships",
    )
    op.create_table(
        "issuance_history",
        sa.Column(
            "issuance_history_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the issuance",
        ),
        sa.Column(
            "compliance_units",
            sa.BigInteger(),
            nullable=True,
            comment="Issued compliance units record",
        ),
        sa.Column("issuance_id", sa.Integer(), nullable=True),
        sa.Column("organization_id", sa.Integer(), nullable=True),
        sa.Column("transaction_id", sa.Integer(), nullable=True),
        sa.Column(
            "transaction_effective_date",
            sa.DateTime(),
            nullable=True,
            comment="Transaction Effective date",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.ForeignKeyConstraint(
            ["issuance_id"],
            ["issuance.issuance_id"],
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.organization_id"],
        ),
        sa.ForeignKeyConstraint(
            ["transaction_id"],
            ["transaction.transaction_id"],
        ),
        sa.PrimaryKeyConstraint("issuance_history_id"),
        sa.UniqueConstraint("issuance_history_id"),
        comment="History record for issuance from governmnent to Organization",
    )
    op.create_table(
        "transfer_history",
        sa.Column(
            "transfer_history_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the org to org transfer record",
        ),
        sa.Column("transfer_id", sa.Integer(), nullable=True),
        sa.Column("from_organization_id", sa.Integer(), nullable=True),
        sa.Column("to_organization_id", sa.Integer(), nullable=True),
        sa.Column("transaction_id", sa.Integer(), nullable=True),
        sa.Column(
            "transaction_effective_date",
            sa.DateTime(),
            nullable=True,
            comment="Transaction effective date",
        ),
        sa.Column("transfer_status_id", sa.Integer(), nullable=True),
        sa.Column("transfer_category_id", sa.Integer(), nullable=True),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.ForeignKeyConstraint(
            ["from_organization_id"],
            ["organization.organization_id"],
        ),
        sa.ForeignKeyConstraint(
            ["to_organization_id"],
            ["organization.organization_id"],
        ),
        sa.ForeignKeyConstraint(
            ["transaction_id"],
            ["transaction.transaction_id"],
        ),
        sa.ForeignKeyConstraint(
            ["transfer_category_id"],
            ["category.category_id"],
        ),
        sa.ForeignKeyConstraint(
            ["transfer_id"],
            ["transfer.transfer_id"],
        ),
        sa.ForeignKeyConstraint(
            ["transfer_status_id"],
            ["transfer_status.transfer_status_id"],
        ),
        sa.PrimaryKeyConstraint("transfer_history_id"),
        comment="Records of tranfer from Organization to Organization",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("transfer_history")
    op.drop_table("issuance_history")
    op.drop_table("user_role")
    op.drop_table("transfer")
    op.drop_table("notification_message")
    op.drop_table("notification_channel_subscription")
    op.drop_table("issuance")
    op.drop_table("user_profile")
    op.drop_table("transaction")
    op.drop_table("organization")
    op.drop_table("user_login_history")
    op.drop_table("transfer_status")
    op.drop_table("transaction_type")
    op.drop_table("role")
    op.drop_table("organization_type")
    op.drop_table("organization_status")
    op.drop_table("organization_attorney_address")
    op.drop_table("organization_address")
    op.drop_table("notification_type")
    op.drop_table("notification_channel")
    op.drop_table("comment")
    op.drop_table("category")
    # ### end Alembic commands ###
