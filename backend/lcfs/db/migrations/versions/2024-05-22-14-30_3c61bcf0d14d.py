"""compliance models

Revision ID: 3c61bcf0d14d
Revises: 69834c45d1dd
Create Date: 2024-05-22 14:30:35.732970

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "3c61bcf0d14d"
down_revision = "69834c45d1dd"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "Draft",
        "Submitted",
        "Recommended_by_analyst",
        "Recommended_by_manager",
        "Assessed",
        "ReAssessed",
        name="compliancereportstatusenum",
    ).create(op.get_bind())
    op.create_table(
        "allocation_transaction_type",
        sa.Column(
            "allocation_transaction_type_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the allocation transaction type",
        ),
        sa.Column(
            "type",
            sa.String(),
            nullable=False,
            comment="Type of the allocation transaction",
        ),
        sa.Column(
            "description",
            sa.String(),
            nullable=True,
            comment="Description of the allocation transaction type",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "effective_status",
            sa.Boolean(),
            nullable=False,
            comment="True if the value is currently valid, False if it is no longer valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.Column(
            "display_order",
            sa.Integer(),
            nullable=True,
            comment="Relative rank in display sorting order",
        ),
        sa.PrimaryKeyConstraint("allocation_transaction_type_id"),
        comment="Lookup table for allocation transaction types.",
    )
    op.create_table(
        "compliance_period",
        sa.Column(
            "compliance_period_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the compliance period",
        ),
        sa.Column(
            "description",
            sa.String(),
            nullable=False,
            comment="Year description for the compliance period",
        ),
        sa.Column(
            "display_order",
            sa.Integer(),
            nullable=True,
            comment="Display order for the compliance period",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "effective_status",
            sa.Boolean(),
            nullable=False,
            comment="True if the value is currently valid, False if it is no longer valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.PrimaryKeyConstraint("compliance_period_id"),
        comment="The compliance year associated with compliance reports and other related tables. The description field should be the year.",
    )
    op.create_table(
        "compliance_report_status",
        sa.Column(
            "compliance_report_status_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the compliance report status",
        ),
        sa.Column(
            "display_order",
            sa.Integer(),
            nullable=True,
            comment="Display order for the compliance report status",
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "Draft",
                "Submitted",
                "Recommended_by_analyst",
                "Recommended_by_manager",
                "Assessed",
                "ReAssessed",
                name="compliancereportstatusenum",
                create_type=False,
            ),
            nullable=False,
            comment="Status of the compliance report",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "effective_status",
            sa.Boolean(),
            nullable=False,
            comment="True if the value is currently valid, False if it is no longer valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.PrimaryKeyConstraint("compliance_report_status_id"),
        comment="Lookup table for compliance reports status",
    )
    op.create_table(
        "compliance_report_summary",
        sa.Column(
            "summary_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the compliance report summary",
        ),
        sa.Column(
            "gasoline_category_retained",
            sa.Integer(),
            nullable=False,
            comment="Retained gasoline category units",
        ),
        sa.Column(
            "gasoline_category_deferred",
            sa.Integer(),
            nullable=False,
            comment="Deferred gasoline category units",
        ),
        sa.Column(
            "gasoline_category_obligation",
            sa.Integer(),
            nullable=False,
            comment="Obligation for the gasoline category",
        ),
        sa.Column(
            "gasoline_category_previously_retained",
            sa.Integer(),
            nullable=False,
            comment="Previously retained gasoline category units",
        ),
        sa.Column(
            "diesel_category_retained",
            sa.Integer(),
            nullable=False,
            comment="Retained diesel category units",
        ),
        sa.Column(
            "diesel_category_deferred",
            sa.Integer(),
            nullable=False,
            comment="Deferred diesel category units",
        ),
        sa.Column(
            "diesel_category_obligation",
            sa.Integer(),
            nullable=False,
            comment="Obligation for the diesel category",
        ),
        sa.Column(
            "diesel_category_previously_retained",
            sa.Integer(),
            nullable=False,
            comment="Previously retained diesel category units",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.PrimaryKeyConstraint("summary_id"),
        comment="Summary of all compliance calculations displaying the compliance units credits or debits over a compliance period",
    )
    op.create_table(
        "custom_fuel_type",
        sa.Column(
            "custom_fuel_type_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the custom fuel type",
        ),
        sa.Column(
            "type", sa.String(), nullable=False, comment="Type of the custom fuel"
        ),
        sa.Column(
            "description",
            sa.String(),
            nullable=True,
            comment="Description of the custom fuel type",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "effective_status",
            sa.Boolean(),
            nullable=False,
            comment="True if the value is currently valid, False if it is no longer valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.Column(
            "display_order",
            sa.Integer(),
            nullable=True,
            comment="Relative rank in display sorting order",
        ),
        sa.PrimaryKeyConstraint("custom_fuel_type_id"),
        comment="Lookup table for custom fuel types.",
    )
    op.create_table(
        "expected_use_type",
        sa.Column(
            "expected_use_type_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the expected use type",
        ),
        sa.Column(
            "name", sa.Text(), nullable=False, comment="Name of the expected use type"
        ),
        sa.Column(
            "description",
            sa.Text(),
            nullable=True,
            comment="Description of the expected use type",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "display_order",
            sa.Integer(),
            nullable=True,
            comment="Relative rank in display sorting order",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "effective_status",
            sa.Boolean(),
            nullable=False,
            comment="True if the value is currently valid, False if it is no longer valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.PrimaryKeyConstraint("expected_use_type_id"),
        comment="Represents an expected use type for other fuels",
    )
    op.create_table(
        "provision_of_the_act",
        sa.Column(
            "provision_of_the_act_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the provision of the act",
        ),
        sa.Column(
            "provision",
            sa.String(length=100),
            nullable=False,
            comment="Name of the Provision. e.g. Section 6 (5) (a)",
        ),
        sa.Column(
            "description",
            sa.String(length=1000),
            nullable=False,
            comment="Description of the provision. This is the displayed name. e.g. Prescribed Carbon Intensity, Approved Fuel Code.",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "display_order",
            sa.Integer(),
            nullable=True,
            comment="Relative rank in display sorting order",
        ),
        sa.Column(
            "effective_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "effective_status",
            sa.Boolean(),
            nullable=False,
            comment="True if the value is currently valid, False if it is no longer valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.Date(),
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.PrimaryKeyConstraint("provision_of_the_act_id"),
        sa.UniqueConstraint("provision"),
        comment="List of provisions within Greenhouse Gas Reduction (Renewable and Low Carbon Fuel Requirement) Act. e.g. Section 6 (5) (a)",
    )
    op.create_table(
        "compliance_report",
        sa.Column(
            "compliance_report_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the compliance report",
        ),
        sa.Column(
            "compliance_period_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the compliance period",
        ),
        sa.Column(
            "organization_id",
            sa.Integer(),
            nullable=False,
            comment="Identifier for the organization",
        ),
        sa.Column(
            "summary_id",
            sa.Integer(),
            nullable=True,
            comment="Identifier for the compliance report summary",
        ),
        sa.Column(
            "status_id",
            sa.Integer(),
            nullable=True,
            comment="Identifier for the compliance report status",
        ),
        sa.Column(
            "transaction_id",
            sa.Integer(),
            nullable=True,
            comment="Identifier for the transaction",
        ),
        sa.Column(
            "nickname",
            sa.String(),
            nullable=True,
            comment="Nickname for the compliance report",
        ),
        sa.Column(
            "supplemental_note",
            sa.String(),
            nullable=True,
            comment="Supplemental note for the compliance report",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.ForeignKeyConstraint(
            ["compliance_period_id"],
            ["compliance_period.compliance_period_id"],
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.organization_id"],
        ),
        sa.ForeignKeyConstraint(
            ["status_id"],
            ["compliance_report_status.compliance_report_status_id"],
        ),
        sa.ForeignKeyConstraint(
            ["summary_id"],
            ["compliance_report_summary.summary_id"],
        ),
        sa.ForeignKeyConstraint(
            ["transaction_id"],
            ["transaction.transaction_id"],
        ),
        sa.PrimaryKeyConstraint("compliance_report_id"),
        comment="Main tracking table for all the sub-tables associated with a supplier's annual compliance report",
    )
    op.create_table(
        "allocation_agreement",
        sa.Column(
            "allocation_agreement_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the allocation agreement",
        ),
        sa.Column(
            "compliance_report_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the compliance report",
        ),
        sa.Column(
            "transaction_partner",
            sa.String(),
            nullable=False,
            comment="Partner involved in the transaction",
        ),
        sa.Column(
            "postal_address",
            sa.String(),
            nullable=False,
            comment="Postal address of the transaction partner",
        ),
        sa.Column(
            "quantity_not_sold",
            sa.Integer(),
            nullable=False,
            comment="Quantity of fuel not sold",
        ),
        sa.Column(
            "fuel_type_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the fuel type",
        ),
        sa.Column(
            "transaction_type_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the transaction type",
        ),
        sa.Column(
            "fuel_category_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the fuel category",
        ),
        sa.Column(
            "provision_of_the_act_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the provision of the act",
        ),
        sa.Column(
            "fuel_code_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the fuel code",
        ),
        sa.Column(
            "quantity",
            sa.Integer(),
            nullable=False,
            comment="Quantity of fuel involved in the transaction",
        ),
        sa.Column(
            "custom_fuel_type_id",
            sa.Integer(),
            nullable=True,
            comment="Foreign key to the custom fuel type",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "display_order",
            sa.Integer(),
            nullable=True,
            comment="Relative rank in display sorting order",
        ),
        sa.ForeignKeyConstraint(
            ["compliance_report_id"],
            ["compliance_report.compliance_report_id"],
        ),
        sa.ForeignKeyConstraint(
            ["custom_fuel_type_id"],
            ["custom_fuel_type.custom_fuel_type_id"],
        ),
        sa.ForeignKeyConstraint(
            ["fuel_category_id"],
            ["fuel_category.fuel_category_id"],
        ),
        sa.ForeignKeyConstraint(
            ["fuel_code_id"],
            ["fuel_code.fuel_code_id"],
        ),
        sa.ForeignKeyConstraint(
            ["fuel_type_id"],
            ["fuel_type.fuel_type_id"],
        ),
        sa.ForeignKeyConstraint(
            ["provision_of_the_act_id"],
            ["provision_of_the_act.provision_of_the_act_id"],
        ),
        sa.ForeignKeyConstraint(
            ["transaction_type_id"],
            ["allocation_transaction_type.allocation_transaction_type_id"],
        ),
        sa.PrimaryKeyConstraint("allocation_agreement_id"),
        comment="Records allocation agreements where the reporting obligation is passed from one party to another. Each party must report their end of the transaction.",
    )
    op.create_table(
        "compliance_report_history",
        sa.Column(
            "compliance_report_history_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the compliance report history",
        ),
        sa.Column(
            "compliance_report_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the compliance report",
        ),
        sa.Column(
            "status_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the compliance report status",
        ),
        sa.Column(
            "user_role_id",
            sa.Integer(),
            nullable=False,
            comment="Identifier for the user role associated with the status change",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.ForeignKeyConstraint(
            ["compliance_report_id"],
            ["compliance_report.compliance_report_id"],
        ),
        sa.ForeignKeyConstraint(
            ["status_id"],
            ["compliance_report_status.compliance_report_status_id"],
        ),
        sa.PrimaryKeyConstraint("compliance_report_history_id"),
        comment="Tracks status changes of compliance reports",
    )
    op.create_table(
        "compliance_report_snapshot",
        sa.Column(
            "compliance_report_snapshot_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the compliance report snapshot",
        ),
        sa.Column(
            "compliance_report_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the compliance report",
        ),
        sa.Column(
            "snapshot",
            sa.JSON(),
            nullable=False,
            comment="JSON representation of the compliance report snapshot",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.ForeignKeyConstraint(
            ["compliance_report_id"],
            ["compliance_report.compliance_report_id"],
        ),
        sa.PrimaryKeyConstraint("compliance_report_snapshot_id"),
        comment="Stores snapshots of compliance reports at important status changes like recommended, approval, or cancellation",
    )
    op.create_table(
        "fuel_supply",
        sa.Column(
            "fuel_supply_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the fuel supply",
        ),
        sa.Column(
            "compliance_report_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the compliance report",
        ),
        sa.Column(
            "quantity",
            sa.Integer(),
            nullable=False,
            comment="Quantity of fuel supplied",
        ),
        sa.Column(
            "fuel_category_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the fuel category",
        ),
        sa.Column(
            "fuel_code_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the fuel code",
        ),
        sa.Column(
            "fuel_type_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the fuel type",
        ),
        sa.Column(
            "provision_of_the_act_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the provision of the act",
        ),
        sa.Column(
            "custom_fuel_id",
            sa.Integer(),
            nullable=True,
            comment="Foreign key to the custom fuel type",
        ),
        sa.Column(
            "custom_fuel_energy_density",
            sa.Float(),
            nullable=True,
            comment="Energy density of the custom fuel",
        ),
        sa.Column(
            "end_use_id",
            sa.Integer(),
            nullable=True,
            comment="Foreign key to the end use type",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.ForeignKeyConstraint(
            ["compliance_report_id"],
            ["compliance_report.compliance_report_id"],
        ),
        sa.ForeignKeyConstraint(
            ["custom_fuel_id"],
            ["custom_fuel_type.custom_fuel_type_id"],
        ),
        sa.ForeignKeyConstraint(
            ["end_use_id"],
            ["end_use_type.end_use_type_id"],
        ),
        sa.ForeignKeyConstraint(
            ["fuel_category_id"],
            ["fuel_category.fuel_category_id"],
        ),
        sa.ForeignKeyConstraint(
            ["fuel_code_id"],
            ["fuel_code.fuel_code_id"],
        ),
        sa.ForeignKeyConstraint(
            ["fuel_type_id"],
            ["fuel_type.fuel_type_id"],
        ),
        sa.ForeignKeyConstraint(
            ["provision_of_the_act_id"],
            ["provision_of_the_act.provision_of_the_act_id"],
        ),
        sa.PrimaryKeyConstraint("fuel_supply_id"),
        comment="Records the supply of fuel for compliance purposes.",
    )
    op.create_table(
        "notional_transfer",
        sa.Column(
            "notional_transfer_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the notional transfer",
        ),
        sa.Column(
            "compliance_report_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the compliance report",
        ),
        sa.Column(
            "quantity",
            sa.Integer(),
            nullable=False,
            comment="Quantity of fuel being notionally transferred",
        ),
        sa.Column(
            "notional_transfer_partner",
            sa.String(),
            nullable=False,
            comment="Partner to whom the fuel is being transferred",
        ),
        sa.Column(
            "postal_address",
            sa.String(),
            nullable=False,
            comment="Postal address of the transfer partner",
        ),
        sa.Column(
            "fuel_category_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the fuel category",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.ForeignKeyConstraint(
            ["compliance_report_id"],
            ["compliance_report.compliance_report_id"],
        ),
        sa.ForeignKeyConstraint(
            ["fuel_category_id"],
            ["fuel_category.fuel_category_id"],
        ),
        sa.PrimaryKeyConstraint("notional_transfer_id"),
        comment="Records notional transfers for compliance reports.",
    )
    op.create_table(
        "other_uses",
        sa.Column(
            "other_uses_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the other uses record",
        ),
        sa.Column(
            "compliance_report_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the compliance report",
        ),
        sa.Column(
            "custom_fuel_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the custom fuel type",
        ),
        sa.Column(
            "expected_use_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the expected use type",
        ),
        sa.Column(
            "fuel_category_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the fuel category",
        ),
        sa.Column(
            "fuel_type_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the fuel type",
        ),
        sa.Column(
            "quantity", sa.Integer(), nullable=False, comment="Quantity of fuel used"
        ),
        sa.Column(
            "rationale",
            sa.String(),
            nullable=True,
            comment="Rationale for the use of the fuel",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.ForeignKeyConstraint(
            ["compliance_report_id"],
            ["compliance_report.compliance_report_id"],
        ),
        sa.ForeignKeyConstraint(
            ["custom_fuel_id"],
            ["custom_fuel_type.custom_fuel_type_id"],
        ),
        sa.ForeignKeyConstraint(
            ["expected_use_id"],
            ["expected_use_type.expected_use_type_id"],
        ),
        sa.ForeignKeyConstraint(
            ["fuel_category_id"],
            ["fuel_category.fuel_category_id"],
        ),
        sa.ForeignKeyConstraint(
            ["fuel_type_id"],
            ["fuel_type.fuel_type_id"],
        ),
        sa.PrimaryKeyConstraint("other_uses_id"),
        comment="Records other uses of fuels that are subject to renewable requirements but do not earn credits.",
    )
    op.alter_column(
        "additional_carbon_intensity",
        "intensity",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=10, asdecimal=2),
        existing_nullable=False,
    )
    op.create_unique_constraint(None, "admin_adjustment", ["admin_adjustment_id"])
    op.create_unique_constraint(
        None, "admin_adjustment_history", ["admin_adjustment_history_id"]
    )
    op.alter_column(
        "energy_density",
        "density",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=10, asdecimal=2),
        existing_nullable=False,
    )
    op.alter_column(
        "energy_effectiveness_ratio",
        "ratio",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=3, asdecimal=2),
        existing_comment="Energy effectiveness ratio constant",
        existing_nullable=False,
    )
    op.create_unique_constraint(
        None, "initiative_agreement", ["initiative_agreement_id"]
    )
    op.create_unique_constraint(
        None, "initiative_agreement_history", ["initiative_agreement_history_id"]
    )
    op.create_unique_constraint(None, "internal_comment", ["internal_comment_id"])
    op.create_unique_constraint(None, "transaction", ["transaction_id"])
    op.create_unique_constraint(None, "transfer", ["transfer_id"])
    op.create_unique_constraint(None, "transfer_category", ["transfer_category_id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "transfer_category", type_="unique")
    op.drop_constraint(None, "transfer", type_="unique")
    op.drop_constraint(None, "transaction", type_="unique")
    op.drop_constraint(None, "internal_comment", type_="unique")
    op.drop_constraint(None, "initiative_agreement_history", type_="unique")
    op.drop_constraint(None, "initiative_agreement", type_="unique")
    op.alter_column(
        "energy_effectiveness_ratio",
        "ratio",
        existing_type=sa.Float(precision=3, asdecimal=2),
        type_=sa.REAL(),
        existing_comment="Energy effectiveness ratio constant",
        existing_nullable=False,
    )
    op.alter_column(
        "energy_density",
        "density",
        existing_type=sa.Float(precision=10, asdecimal=2),
        type_=sa.REAL(),
        existing_nullable=False,
    )
    op.drop_constraint(None, "admin_adjustment_history", type_="unique")
    op.drop_constraint(None, "admin_adjustment", type_="unique")
    op.alter_column(
        "additional_carbon_intensity",
        "intensity",
        existing_type=sa.Float(precision=10, asdecimal=2),
        type_=sa.REAL(),
        existing_nullable=False,
    )
    op.drop_table("other_uses")
    op.drop_table("notional_transfer")
    op.drop_table("fuel_supply")
    op.drop_table("compliance_report_snapshot")
    op.drop_table("compliance_report_history")
    op.drop_table("allocation_agreement")
    op.drop_table("compliance_report")
    op.drop_table("provision_of_the_act")
    op.drop_table("expected_use_type")
    op.drop_table("custom_fuel_type")
    op.drop_table("compliance_report_summary")
    op.drop_table("compliance_report_status")
    op.drop_table("compliance_period")
    op.drop_table("allocation_transaction_type")
    sa.Enum(
        "Draft",
        "Submitted",
        "Recommended_by_analyst",
        "Recommended_by_manager",
        "Assessed",
        "ReAssessed",
        name="compliancereportstatusenum",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
