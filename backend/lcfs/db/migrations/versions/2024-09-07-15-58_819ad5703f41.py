"""Fuel exports

Revision ID: 819ad5703f41
Revises: 9d93dc700752
Create Date: 2024-09-04 15:58:00.483378

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "819ad5703f41"
down_revision = "c8a2dbd4ccd7"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "fuel_export",
        sa.Column(
            "fuel_export_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the fuel supply",
        ),
        sa.Column(
            "compliance_report_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the compliance report",
        ),
        sa.Column(
            "supplemental_report_id",
            sa.Integer(),
            nullable=True,
            comment="Foreign key to the supplemental report",
        ),
        sa.Column(
            "previous_fuel_export_id",
            sa.Integer(),
            nullable=True,
            comment="Foreign key to the previous fuel supply record",
        ),
        sa.Column(
            "change_type",
            postgresql.ENUM(
                "CREATE", "UPDATE", "DELETE", name="changetype", create_type=False
            ),
            server_default=sa.text("'CREATE'"),
            nullable=False,
            comment="Action type for this record",
        ),
        sa.Column(
            "export_date", sa.Date(), nullable=False, comment="Date of fuel supply"
        ),
        sa.Column(
            "quarter",
            postgresql.ENUM("Q1", "Q2", "Q3", "Q4", name="quarter", create_type=False),
            nullable=True,
            comment="Quarter for quarterly reports",
        ),
        sa.Column(
            "quantity",
            sa.Integer(),
            nullable=False,
            comment="Quantity of fuel supplied",
        ),
        sa.Column(
            "units",
            postgresql.ENUM(
                "Litres",
                "Kilograms",
                "Kilowatt_hour",
                "Cubic_metres",
                name="quantityunitsenum",
                create_type=False,
            ),
            nullable=False,
            comment="Units of fuel quantity",
        ),
        sa.Column(
            "compliance_units",
            sa.Integer(),
            nullable=True,
            comment="Compliance units for the fuel supply",
        ),
        sa.Column(
            "target_ci",
            sa.Float(),
            nullable=True,
            comment="CI limit for the fuel supply",
        ),
        sa.Column(
            "ci_of_fuel",
            sa.Float(),
            nullable=True,
            comment="CI of fuel for the fuel supply",
        ),
        sa.Column(
            "energy_density",
            sa.Float(),
            nullable=True,
            comment="Energy density of the fuel supplied",
        ),
        sa.Column(
            "eer",
            sa.Float(),
            nullable=True,
            comment="Energy effectiveness ratio of the fuel supplied",
        ),
        sa.Column(
            "energy",
            sa.Float(),
            nullable=True,
            comment="Energy content of the fuel supplied",
        ),
        sa.Column(
            "fuel_category_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the fuel category",
        ),
        sa.Column(
            "fuel_code_id",
            sa.Integer(),
            nullable=True,
            comment="Foreign key to the fuel code",
        ),
        sa.Column(
            "fuel_type_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the fuel type",
        ),
        sa.Column(
            "provision_of_the_act_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to the provision of the act",
        ),
        sa.Column(
            "custom_fuel_id",
            sa.Integer(),
            nullable=True,
            comment="Foreign key to the custom fuel type",
        ),
        sa.Column(
            "end_use_id",
            sa.Integer(),
            nullable=True,
            comment="Foreign key to the end use type",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.String(),
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.String(),
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.ForeignKeyConstraint(
            ["compliance_report_id"],
            ["compliance_report.compliance_report_id"],
        ),
        sa.ForeignKeyConstraint(
            ["custom_fuel_id"],
            ["custom_fuel_type.custom_fuel_type_id"],
        ),
        sa.ForeignKeyConstraint(
            ["end_use_id"],
            ["end_use_type.end_use_type_id"],
        ),
        sa.ForeignKeyConstraint(
            ["fuel_category_id"],
            ["fuel_category.fuel_category_id"],
        ),
        sa.ForeignKeyConstraint(
            ["fuel_code_id"],
            ["fuel_code.fuel_code_id"],
        ),
        sa.ForeignKeyConstraint(
            ["fuel_type_id"],
            ["fuel_type.fuel_type_id"],
        ),
        sa.ForeignKeyConstraint(
            ["previous_fuel_export_id"],
            ["fuel_export.fuel_export_id"],
        ),
        sa.ForeignKeyConstraint(
            ["provision_of_the_act_id"],
            ["provision_of_the_act.provision_of_the_act_id"],
        ),
        sa.ForeignKeyConstraint(
            ["supplemental_report_id"],
            ["supplemental_report.supplemental_report_id"],
        ),
        sa.PrimaryKeyConstraint("fuel_export_id"),
        comment="Records the supply of fuel for compliance purposes, including changes in supplemental reports",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("fuel_export")
    # ### end Alembic commands ###
