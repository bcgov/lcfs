"""Compliance report counts correction

Revision ID: 2e2f6f7ff390
Revises: ac0ac5d0c81b
Create Date: 2025-03-26 07:08:37.304453

"""

import sqlalchemy as sa
from alembic import op
import logging

# revision identifiers, used by Alembic.
revision = "2e2f6f7ff390"
down_revision = "ac0ac5d0c81b"
branch_labels = None
depends_on = None

# Set up logging
logger = logging.getLogger("alembic.runtime.migration")


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        # Drop org_compliance_count
        op.execute(
            "DROP MATERIALIZED VIEW IF EXISTS mv_org_compliance_report_count CASCADE;"
        )
        op.execute(
            "DROP FUNCTION IF EXISTS refresh_mv_org_compliance_report_count() CASCADE;"
        )
        op.execute(
            "DROP TRIGGER IF EXISTS refresh_mv_org_compliance_report_count_after_compliance_report ON compliance_report CASCADE;"
        )
        op.execute(
            "DROP INDEX IF EXISTS mv_org_compliance_report_count_org_id_idx CASCADE;"
        )
        # Create materialized views
        op.execute(
            """
            CREATE MATERIALIZED VIEW mv_org_compliance_report_count AS
            SELECT
                cr.organization_id,
                COUNT(*) FILTER (WHERE cr.current_status_id = 1) AS count_in_progress,
                COUNT(*) FILTER (WHERE cr.current_status_id in (
                    SELECT compliance_report_status_id 
                    FROM compliance_report_status where status in (
                            'Submitted',
                            'Recommended_by_analyst',
                            'Recommended_by_manager',
                            'Not_recommended_by_analyst',
                            'Not_recommended_by_manager',
                            'Analyst_adjustment'
                        )
                    )
                ) AS count_awaiting_gov_review
            FROM compliance_report cr
            JOIN (
                SELECT
                    compliance_report_group_uuid,
                    MAX(version) AS max_version
                FROM compliance_report
                GROUP BY compliance_report_group_uuid
            ) latest ON cr.compliance_report_group_uuid = latest.compliance_report_group_uuid
            AND cr.version = latest.max_version
            GROUP BY cr.organization_id
            ORDER BY cr.organization_id;
            """
        )

        # Create Refresh Functions, triggers and indices for materialized view
        op.execute(
            """
            CREATE OR REPLACE FUNCTION refresh_mv_org_compliance_report_count()
            RETURNS TRIGGER AS $$
            BEGIN
                REFRESH MATERIALIZED VIEW CONCURRENTLY mv_org_compliance_report_count;
                RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
            """
        )
        op.execute(
            """
            CREATE TRIGGER refresh_mv_org_compliance_report_count_after_compliance_report
            AFTER INSERT OR UPDATE OR DELETE ON compliance_report
            FOR EACH STATEMENT EXECUTE FUNCTION refresh_mv_org_compliance_report_count();
            """
        )
        op.execute(
            """
            CREATE UNIQUE INDEX mv_org_compliance_report_count_org_id_idx
            ON mv_org_compliance_report_count (organization_id);
            """
        )
    except Exception as e:
        logger.error(f"Migration downgrade failed: {e}")
        raise


def downgrade():
    try:
        op.execute(
            "DROP MATERIALIZED VIEW IF EXISTS mv_org_compliance_report_count CASCADE;"
        )
        op.execute(
            "DROP FUNCTION IF EXISTS refresh_mv_org_compliance_report_count() CASCADE;"
        )
        op.execute(
            "DROP TRIGGER IF EXISTS refresh_mv_org_compliance_report_count_after_compliance_report ON compliance_report CASCADE;"
        )
        op.execute("DROP INDEX IF EXISTS mv_compliance_report_count_idx CASCADE;")
        # Create Materialized Views
        op.execute(
            """
            CREATE MATERIALIZED VIEW mv_org_compliance_report_count AS
            SELECT
                cr.organization_id,
                COUNT(*) FILTER (WHERE cr.current_status_id = 1) AS count_in_progress,
                COUNT(*) FILTER (WHERE cr.current_status_id = 2) AS count_awaiting_gov_review
            FROM compliance_report cr
            JOIN (
                SELECT
                    compliance_report_group_uuid,
                    MAX(version) AS max_version
                FROM compliance_report
                GROUP BY compliance_report_group_uuid
            ) latest ON cr.compliance_report_group_uuid = latest.compliance_report_group_uuid
            AND cr.version = latest.max_version
            WHERE cr.current_status_id IN (1, 2) -- Keep only relevant statuses
            GROUP BY cr.organization_id
            ORDER BY cr.organization_id;
            """
        )

        # Create Refresh Functions, triggers and indices for materialized view
        op.execute(
            """
            CREATE OR REPLACE FUNCTION refresh_mv_org_compliance_report_count()
            RETURNS TRIGGER AS $$
            BEGIN
                REFRESH MATERIALIZED VIEW CONCURRENTLY mv_org_compliance_report_count;
                RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
            """
        )
        op.execute(
            """
            CREATE TRIGGER refresh_mv_org_compliance_report_count_after_compliance_report
            AFTER INSERT OR UPDATE OR DELETE ON compliance_report
            FOR EACH STATEMENT EXECUTE FUNCTION refresh_mv_org_compliance_report_count();
            """
        )
        op.execute(
            """
            CREATE UNIQUE INDEX mv_org_compliance_report_count_org_id_idx
            ON mv_org_compliance_report_count (organization_id);
            """
        )
    except Exception as e:
        logger.error(f"Migration downgrade failed: {e}")
        raise
