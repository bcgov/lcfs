"""fuel type modifications

Revision ID: 1b4d0dcf70a8
Revises: 4f25f8811872
Create Date: 2024-10-21 18:16:20.974946

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "1b4d0dcf70a8"
down_revision = "4f25f8811872"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "fk_allocation_agreement_custom_fuel_type_id_custom_fuel_type",
        "allocation_agreement",
        type_="foreignkey",
    )
    op.drop_column("allocation_agreement", "custom_fuel_type_id")

    op.drop_constraint(
        "fk_fuel_export_custom_fuel_id_custom_fuel_type",
        "fuel_export",
        type_="foreignkey",
    )
    op.drop_column("fuel_export", "custom_fuel_id")
    op.drop_constraint(
        "fk_fuel_supply_custom_fuel_id_custom_fuel_type",
        "fuel_supply",
        type_="foreignkey",
    )
    op.drop_column("fuel_supply", "custom_fuel_id")

    op.drop_table("custom_fuel_type")

    op.add_column(
        "allocation_agreement",
        sa.Column(
            "fuel_type_other",
            sa.String(length=1000),
            nullable=True,
            comment="Other fuel type if one provided",
        ),
    )

    op.add_column(
        "fuel_export",
        sa.Column(
            "fuel_type_other",
            sa.String(length=1000),
            nullable=True,
            comment="Other fuel type if one provided",
        ),
    )
    op.alter_column(
        "fuel_supply",
        "fuel_type_other",
        existing_type=sa.VARCHAR(length=1000),
        comment="Other fuel type if one provided",
        existing_comment="Other fuel type is one provided",
        existing_nullable=True,
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "fuel_supply",
        "fuel_type_other",
        existing_type=sa.VARCHAR(length=1000),
        comment="Other fuel type is one provided",
        existing_comment="Other fuel type if one provided",
        existing_nullable=True,
    )
    op.drop_column("fuel_export", "fuel_type_other")

    op.drop_column("allocation_agreement", "fuel_type_other")
    op.create_table(
        "custom_fuel_type",
        sa.Column(
            "custom_fuel_type_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for the custom fuel type",
        ),
        sa.Column(
            "type",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False,
            comment="Type of the custom fuel",
        ),
        sa.Column(
            "fuel_category_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Foreign key to fuel_category table",
        ),
        sa.Column(
            "provision_of_the_act_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Foreign key to provision_of_the_act table",
        ),
        sa.Column(
            "fuel_code_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Foreign key to fuel_code table",
        ),
        sa.Column(
            "unit",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False,
            comment="Units of fuel quantity",
        ),
        sa.Column(
            "energy_density",
            sa.REAL(),
            autoincrement=False,
            nullable=False,
            comment="Energy density of the fuel",
        ),
        sa.Column(
            "description",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="Description of the custom fuel type",
        ),
        sa.Column(
            "create_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "effective_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The calendar date the value became valid.",
        ),
        sa.Column(
            "effective_status",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=False,
            comment="True if the value is currently valid, False if it is no longer valid.",
        ),
        sa.Column(
            "expiration_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The calendar date the value is no longer valid.",
        ),
        sa.Column(
            "display_order",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Relative rank in display sorting order",
        ),
        sa.ForeignKeyConstraint(
            ["fuel_category_id"],
            ["fuel_category.fuel_category_id"],
            name="fk_custom_fuel_type_fuel_category_id_fuel_category",
        ),
        sa.ForeignKeyConstraint(
            ["fuel_code_id"],
            ["fuel_code.fuel_code_id"],
            name="fk_custom_fuel_type_fuel_code_id_fuel_code",
        ),
        sa.ForeignKeyConstraint(
            ["provision_of_the_act_id"],
            ["provision_of_the_act.provision_of_the_act_id"],
            name="fk_custom_fuel_type_provision_of_the_act_id_provision_o_a13c",
        ),
        sa.PrimaryKeyConstraint("custom_fuel_type_id", name="pk_custom_fuel_type"),
        comment="Lookup table for custom fuel types.",
    )
    op.add_column(
        "fuel_supply",
        sa.Column(
            "custom_fuel_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Foreign key to the custom fuel type",
        ),
    )
    op.create_foreign_key(
        "fk_fuel_supply_custom_fuel_id_custom_fuel_type",
        "fuel_supply",
        "custom_fuel_type",
        ["custom_fuel_id"],
        ["custom_fuel_type_id"],
    )
    op.add_column(
        "fuel_export",
        sa.Column(
            "custom_fuel_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Foreign key to the custom fuel type",
        ),
    )
    op.create_foreign_key(
        "fk_fuel_export_custom_fuel_id_custom_fuel_type",
        "fuel_export",
        "custom_fuel_type",
        ["custom_fuel_id"],
        ["custom_fuel_type_id"],
    )
    op.add_column(
        "allocation_agreement",
        sa.Column(
            "custom_fuel_type_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Foreign key to the custom fuel type",
        ),
    )
    op.create_foreign_key(
        "fk_allocation_agreement_custom_fuel_type_id_custom_fuel_type",
        "allocation_agreement",
        "custom_fuel_type",
        ["custom_fuel_type_id"],
        ["custom_fuel_type_id"],
    )
    # ### end Alembic commands ###
