"""transaction relationships

Revision ID: 069ae6a1044f
Revises: 4f19e1f5efba
Create Date: 2024-03-13 23:36:26.620295

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "069ae6a1044f"
down_revision = "4f19e1f5efba"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("transaction_type")
    op.create_unique_constraint(None, "admin_adjustment", ["admin_adjustment_id"])
    op.create_unique_constraint(
        None, "admin_adjustment_history", ["admin_adjustment_history_id"]
    )
    op.create_unique_constraint(None, "comment", ["comment_id"])
    op.create_unique_constraint(
        None, "initiative_agreement", ["initiative_agreement_id"]
    )
    op.create_unique_constraint(
        None, "initiative_agreement_history", ["initiative_agreement_history_id"]
    )
    op.alter_column(
        "transaction",
        "transaction_action",
        existing_type=postgresql.ENUM(
            "Adjustment", "Reserved", "Released", name="transaction_action_enum"
        ),
        nullable=True,
        existing_comment="Action type for the transaction, e.g., Adjustment, Reserved, or Released.",
    )
    op.create_unique_constraint(None, "transaction", ["transaction_id"])
    op.add_column(
        "transfer", sa.Column("from_transaction_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "transfer", sa.Column("to_transaction_id", sa.Integer(), nullable=True)
    )
    op.create_unique_constraint(None, "transfer", ["transfer_id"])
    op.drop_constraint("transfer_transaction_id_fkey", "transfer", type_="foreignkey")
    op.create_foreign_key(
        None, "transfer", "transaction", ["from_transaction_id"], ["transaction_id"]
    )
    op.create_foreign_key(
        None, "transfer", "transaction", ["to_transaction_id"], ["transaction_id"]
    )
    op.drop_column("transfer", "transaction_id")
    op.create_unique_constraint(None, "transfer_category", ["transfer_category_id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "transfer_category", type_="unique")
    op.add_column(
        "transfer",
        sa.Column("transaction_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "transfer", type_="foreignkey")
    op.drop_constraint(None, "transfer", type_="foreignkey")
    op.create_foreign_key(
        "transfer_transaction_id_fkey",
        "transfer",
        "transaction",
        ["transaction_id"],
        ["transaction_id"],
    )
    op.drop_constraint(None, "transfer", type_="unique")
    op.drop_column("transfer", "to_transaction_id")
    op.drop_column("transfer", "from_transaction_id")
    op.drop_constraint(None, "transaction", type_="unique")
    op.alter_column(
        "transaction",
        "transaction_action",
        existing_type=postgresql.ENUM(
            "Adjustment", "Reserved", "Released", name="transaction_action_enum"
        ),
        nullable=False,
        existing_comment="Action type for the transaction, e.g., Adjustment, Reserved, or Released.",
    )
    op.drop_constraint(None, "initiative_agreement_history", type_="unique")
    op.drop_constraint(None, "initiative_agreement", type_="unique")
    op.drop_constraint(None, "comment", type_="unique")
    op.drop_constraint(None, "admin_adjustment_history", type_="unique")
    op.drop_constraint(None, "admin_adjustment", type_="unique")
    op.create_table(
        "transaction_type",
        sa.Column(
            "transaction_type_id", sa.INTEGER(), autoincrement=True, nullable=False
        ),
        sa.Column(
            "type",
            postgresql.ENUM(
                "admin_adjustment",
                "initiative_agreement",
                "assessment",
                "transfer",
                name="transaction_type_enum",
            ),
            autoincrement=False,
            nullable=True,
            comment="Transaction Types",
        ),
        sa.Column(
            "create_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "create_user",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "update_user",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "display_order",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Relative rank in display sorting order",
        ),
        sa.PrimaryKeyConstraint("transaction_type_id", name="transaction_type_pkey"),
        comment="Represents a Transaction types",
    )
    # ### end Alembic commands ###
