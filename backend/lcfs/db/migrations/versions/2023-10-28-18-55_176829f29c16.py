"""empty message

Revision ID: 176829f29c16
Revises: f6a88571ec3c
Create Date: 2023-10-28 18:55:05.399665

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "176829f29c16"
down_revision = "f6a88571ec3c"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP VIEW IF EXISTS role_view")
    op.execute("DROP VIEW IF EXISTS user_view")
    op.drop_table("role_permission")
    op.drop_table("permission")
    op.drop_column("organization", "effective_date")
    op.drop_column("organization", "expiry_date")
    op.alter_column(
        "organization_address",
        "effective_date",
        existing_type=postgresql.TIMESTAMP(),
        comment="The calendar date the value became valid.",
        existing_comment="The date and time that the code became valid and could be used.",
        existing_nullable=True,
    )
    op.drop_column("organization_address", "expiry_date")
    op.alter_column(
        "organization_balance",
        "effective_date",
        existing_type=postgresql.TIMESTAMP(),
        comment="The calendar date the value became valid.",
        existing_comment="The date and time that the code became valid and could be used.",
        existing_nullable=True,
    )
    op.drop_column("organization_balance", "expiry_date")
    op.drop_column("organization_history", "effective_date")
    op.drop_column("organization_history", "expiry_date")
    op.drop_column("role", "effective_date")
    op.drop_column("role", "expiry_date")
    op.add_column(
        "user",
        sa.Column(
            "keycloak_email",
            sa.String(length=255),
            nullable=True,
            comment="keycloak email address",
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "keycloak_username",
            sa.String(length=150),
            nullable=False,
            comment="keycloak Username",
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "mobile_phone",
            sa.String(length=50),
            nullable=True,
            comment="Mobile phone number",
        ),
    )
    op.create_unique_constraint(None, "user", ["keycloak_username"])
    op.drop_column("user", "is_active")
    op.drop_column("user", "last_login")
    op.drop_column("user", "is_mapped")
    op.drop_column("user", "expiry_date")
    op.drop_column("user", "cell_phone")
    op.drop_column("user", "effective_date")
    op.drop_column("user", "first_name")
    op.drop_column("user", "last_name")
    op.drop_column("user", "password")
    op.drop_column("user_role", "effective_date")
    op.drop_column("user_role", "expiry_date")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user_role",
        sa.Column(
            "expiry_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time after which the code is no longer valid and should not be used.",
        ),
    )
    op.add_column(
        "user_role",
        sa.Column(
            "effective_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time that the code became valid and could be used.",
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "password",
            sa.VARCHAR(length=128),
            autoincrement=False,
            nullable=True,
            comment="Password hash",
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "last_name",
            sa.VARCHAR(length=150),
            autoincrement=False,
            nullable=True,
            comment="Last name (retrieved from Siteminder)",
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "first_name",
            sa.VARCHAR(length=150),
            autoincrement=False,
            nullable=True,
            comment="First name (retrieved from Siteminder",
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "effective_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time that the code became valid and could be used.",
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "cell_phone",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
            comment="Mobile phone number",
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "expiry_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time after which the code is no longer valid and should not be used.",
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "is_mapped",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="whether or not the user has been mapped to the system",
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "last_login",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Last login time",
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "is_active",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=False,
            comment="True if can login",
        ),
    )
    op.drop_constraint(None, "user", type_="unique")
    op.drop_column("user", "mobile_phone")
    op.drop_column("user", "keycloak_username")
    op.drop_column("user", "keycloak_email")
    op.add_column(
        "role",
        sa.Column(
            "expiry_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time after which the code is no longer valid and should not be used.",
        ),
    )
    op.add_column(
        "role",
        sa.Column(
            "effective_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time that the code became valid and could be used.",
        ),
    )
    op.add_column(
        "organization_history",
        sa.Column(
            "expiry_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time after which the code is no longer valid and should not be used.",
        ),
    )
    op.add_column(
        "organization_history",
        sa.Column(
            "effective_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time that the code became valid and could be used.",
        ),
    )
    op.add_column(
        "organization_balance",
        sa.Column(
            "expiry_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time after which the code is no longer valid and should not be used.",
        ),
    )
    op.alter_column(
        "organization_balance",
        "effective_date",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time that the code became valid and could be used.",
        existing_comment="The calendar date the value became valid.",
        existing_nullable=True,
    )
    op.add_column(
        "organization_address",
        sa.Column(
            "expiry_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time after which the code is no longer valid and should not be used.",
        ),
    )
    op.alter_column(
        "organization_address",
        "effective_date",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time that the code became valid and could be used.",
        existing_comment="The calendar date the value became valid.",
        existing_nullable=True,
    )
    op.add_column(
        "organization",
        sa.Column(
            "expiry_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time after which the code is no longer valid and should not be used.",
        ),
    )
    op.add_column(
        "organization",
        sa.Column(
            "effective_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time that the code became valid and could be used.",
        ),
    )
    op.create_table(
        "permission",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('permission_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "code",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
            comment="Permission Code",
        ),
        sa.Column(
            "name",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
            comment="descriptive name",
        ),
        sa.Column(
            "description",
            sa.VARCHAR(length=1000),
            autoincrement=False,
            nullable=True,
            comment="description of each permission",
        ),
        sa.Column(
            "create_user",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "create_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_user",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "update_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "effective_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time that the code became valid and could be used.",
        ),
        sa.Column(
            "expiry_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time after which the code is no longer valid and should not be used.",
        ),
        sa.PrimaryKeyConstraint("id", name="permission_pkey"),
        sa.UniqueConstraint("code", name="_code_uc"),
        comment="Contains the list of permissions to grant access to certain actions of areas for the system.",
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "role_permission",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("role_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("permission_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "create_user",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="The user who created this record in the database.",
        ),
        sa.Column(
            "create_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_user",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="The user who last updated this record in the database.",
        ),
        sa.Column(
            "update_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.Column(
            "effective_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time that the code became valid and could be used.",
        ),
        sa.Column(
            "expiry_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="The date and time after which the code is no longer valid and should not be used.",
        ),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permission.id"],
            name="role_permission_permission_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["role.id"], name="role_permission_role_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="role_permission_pkey"),
        sa.UniqueConstraint("role_id", "permission_id", name="_role_permission_uc"),
        comment="Relationship between roles and permissions",
    )
    # ### end Alembic commands ###
