"""Compliance report internal comments

Revision ID: 29327a0069bd
Revises: 86d53ce094d3
Create Date: 2024-09-13 10:36:06.808681

"""
import sqlalchemy as sa
from alembic import op
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "29327a0069bd"
down_revision = "86d53ce094d3"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "compliance_report_internal_comment",
        sa.Column(
            "compliance_report_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to compliance_report, part of the composite primary key.",
        ),
        sa.Column(
            "internal_comment_id",
            sa.Integer(),
            nullable=False,
            comment="Foreign key to internal_comment, part of the composite primary key.",
        ),
        sa.Column(
            "create_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was created in the database.",
        ),
        sa.Column(
            "update_date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
            comment="Date and time (UTC) when the physical record was updated in the database. It will be the same as the create_date until the record is first updated after creation.",
        ),
        sa.ForeignKeyConstraint(
            ["compliance_report_id"],
            ["compliance_report.compliance_report_id"],
        ),
        sa.ForeignKeyConstraint(
            ["internal_comment_id"],
            ["internal_comment.internal_comment_id"],
        ),
        sa.PrimaryKeyConstraint("compliance_report_id", "internal_comment_id"),
        comment="Associates internal comments with compliance report.",
    )
    op.alter_column(
        "internal_comment",
        "audience_scope",
        existing_type=postgresql.ENUM("Director", "Analyst", name="audience_scope"),
        comment="Defines the audience scope for the comment, e.g., Director, Analyst, Compliance Manager",
        existing_comment="Defines the audience scope for the comment, e.g., Director, Analyst.",
        existing_nullable=False,
    )
    op.sync_enum_values(
        "public",
        "audience_scope",
        ["Director", "Analyst", "Compliance Manager"],
        [
            TableReference(
                table_schema="public",
                table_name="internal_comment",
                column_name="audience_scope",
            )
        ],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        "public",
        "audience_scope",
        ["Director", "Analyst"],
        [
            TableReference(
                table_schema="public",
                table_name="internal_comment",
                column_name="audience_scope",
            )
        ],
        enum_values_to_rename=[],
    )
    op.alter_column(
        "internal_comment",
        "audience_scope",
        existing_type=postgresql.ENUM("Director", "Analyst", name="audience_scope"),
        comment="Defines the audience scope for the comment, e.g., Director, Analyst.",
        existing_comment="Defines the audience scope for the comment, e.g., Director, Analyst, Compliance Manager",
        existing_nullable=False,
    )
    op.drop_table("compliance_report_internal_comment")
    # ### end Alembic commands ###
